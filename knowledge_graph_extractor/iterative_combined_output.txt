
--- /Users/thubpham/knowledge_graph_ingestion/README.md ---
# kg_extractor

A Python library for extracting knowledge graphs from text using LLMs and storing them in FalkorDB.

## Installation

```bash
pip install .
```

## Requirements
- Python 3.8+
- FalkorDB running locally (default: localhost:6379)
- Google Gemini API key (set `GEMINI_API_KEY` in your `.env`)

## Usage

```python
from kg_extractor import extract_knowledge_graph
from kg_extractor.input_text import text  # Example input

# Your own list of dicts, e.g., [{"article_0": "..."}, ...]
# text = ...

db_name = "your_db_name"
extract_knowledge_graph(text, db_name)
```

## Example
See `examples/run_extraction.py` for a runnable example.

## License
MIT

--- /Users/thubpham/knowledge_graph_ingestion/combine_files.py ---
import os

output_file = "iterative_combined_output.txt"
workspace_dir = "/Users/thubpham/knowledge_graph_ingestion"  # folder
excluded_dirs = {"__init__.py", "input_text.py", "utils.py", "__pycache__"}

with open(output_file, "w", encoding="utf-8") as outfile:
    for root, dirs, files in os.walk(workspace_dir):
        # Remove excluded directories from traversal
        dirs[:] = [d for d in dirs if d not in excluded_dirs]
        for file in files:
            if file == output_file or file.startswith(".") or file.endswith(".pyc"):
                continue  # Skip the output file itself, hidden files, or bytecode

            file_path = os.path.join(root, file)

            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    outfile.write(f"\n--- {file_path} ---\n")
                    outfile.write(f.read())
            except Exception as e:
                print(f"Could not read {file_path}: {e}")

--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/backend.py ---
from __future__ import annotations

import random
import time
from datetime import datetime
from typing import Dict, List

from flask import Flask, jsonify, request
from flask_cors import CORS

import os
import itertools
from kg_extractor.config import api_key
import asyncio
from graphiti_core.driver.falkordb_driver import FalkorDriver
from graphiti_core.search.search_config_recipes import COMBINED_HYBRID_SEARCH_RRF
from graphiti_core import Graphiti
from graphiti_core.llm_client.config import LLMConfig
from graphiti_core.llm_client.gemini_client import GeminiClient
from graphiti_core.embedder.gemini import GeminiEmbedder, GeminiEmbedderConfig
from graphiti_core.cross_encoder.gemini_reranker_client import GeminiRerankerClient
from graphiti_core.driver.falkordb_driver import FalkorDriver
import itertools
from graphiti_core.driver.falkordb_driver import FalkorDriver
from graphiti_core.search.search_config_recipes import COMBINED_HYBRID_SEARCH_RRF
from graphiti_core import Graphiti
from graphiti_core.llm_client.config import LLMConfig
from graphiti_core.llm_client.gemini_client import GeminiClient
from graphiti_core.embedder.gemini import GeminiEmbedder, GeminiEmbedderConfig
from graphiti_core.cross_encoder.gemini_reranker_client import GeminiRerankerClient
from graphiti_core.driver.falkordb_driver import FalkorDriver
from query import search_graph_and_format_results
from kg_extractor.llm import generate_embedding, salvage_json

usr_falkor_driver = FalkorDriver(
	host='localhost',        
	port=6379,           
	username=None,         
	password=None,
	database="aug-8-db-tech-doc",       
)

usr_embed_client = GeminiEmbedder(
		config=GeminiEmbedderConfig(
			api_key=api_key,
			embedding_model="gemini-embedding-001",
		)
	)

usr_cross_encoder = GeminiRerankerClient(
		config=LLMConfig(
			api_key=api_key,
			model="gemini-2.0-flash-lite",
			temperature=0.3,
		)
	)

usr_llm_client = GeminiClient(
		config=LLMConfig(
			api_key=api_key,
			temperature=0.65,
			model="gemini-2.5-flash",
			small_model='gemini-2.5-flash-lite'
		))

usr_graphiti = Graphiti(
	graph_driver=usr_falkor_driver,
	llm_client=usr_llm_client,
	embedder=usr_embed_client,
	cross_encoder=usr_cross_encoder,)

app = Flask(__name__)

# --------------------------------------------------------------
# Enable CORS for *all* routes ‚Äì you can tighten this later.
# --------------------------------------------------------------
CORS(app)

# --------------------------------------------------------------
# Simple rule‚Äëbased chatbot logic.
# --------------------------------------------------------------
# You can extend this dictionary with more patterns / answers.
RESPONSES: Dict[str, List[str]] = {
    "hello": [
        "Hey there! üëã How can I help you today?",
        "Hi! What would you like to talk about?",
    ],
    "hi": [
        "Hello! üòä Feel free to ask me anything.",
        "Hey! What‚Äôs on your mind?",
    ],
    "bye": [
        "Goodbye! üëã Have a great day!",
        "See you later! Take care.",
    ],
    "thanks": [
        "You‚Äôre welcome! Glad I could help.",
        "Anytime! Let me know if you need anything else.",
    ],
    "joke": [
        "Why don‚Äôt scientists trust atoms? Because they make up everything! üòÜ",
        "I told my computer I needed a break, and it said ‚ÄòNo problem ‚Äì I‚Äôll go to sleep.‚Äô üò¥",
    ],
    "help": [
        "I can chat about anything, tell jokes, or answer simple questions. Try saying ‚Äúhello‚Äù, ‚Äújoke‚Äù, or just ask me something.",
    ],
}


def chat(user_input: str) -> str:
    answer = asyncio.run(search_graph_and_format_results(user_input, usr_falkor_driver, usr_embed_client, usr_cross_encoder, usr_llm_client, usr_graphiti))
    print("answer")
    print(answer)
    answer_real = salvage_json(answer)
    answer_real = answer_real.get('answer', "Sorry, I couldn't find the information you requested.")

    # Fallback ‚Äì echo the user's message (you can replace with more logic)
    return answer_real


# --------------------------------------------------------------
# Helper: log request/response with a timestamp
# --------------------------------------------------------------
def log(message: str) -> None:
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{now}] {message}")


# --------------------------------------------------------------
# API Endpoint ‚Äì the one the front‚Äëend will call
# --------------------------------------------------------------
@app.route("/chat", methods=["POST"])
def chat_endpoint():
    """
    Expected JSON payload:
    {
        "message": "your text"
    }

    Returns:
    {
        "response": "bot reply"
    }
    """
    # -----------------------------------------------------------------
    # 1Ô∏è‚É£ Parse JSON safely
    # -----------------------------------------------------------------
    data = request.get_json(silent=True)
    if not data:
        log("‚ùå Invalid JSON payload")
        return jsonify({"error": "Invalid JSON"}), 400

    user_msg = data.get("message", "").strip()
    if not user_msg:
        log("‚ùå Empty 'message' field")
        return jsonify({"error": "Missing 'message' field"}), 400

    # -----------------------------------------------------------------
    # 2Ô∏è‚É£ Simulate a "thinking" delay so the UI‚Äôs typing‚Äëindicator shows
    # -----------------------------------------------------------------
    simulated_delay = random.uniform(0.4, 1.2)   # seconds
    time.sleep(simulated_delay)

    # -----------------------------------------------------------------
    # 3Ô∏è‚É£ Generate the reply
    # -----------------------------------------------------------------
    try:
        reply = chat(user_msg)
        log(f"üó£Ô∏è  User: {user_msg} | Bot: {reply}")
        return jsonify({"response": reply})
    except Exception as exc:          # pragma: no cover
        # In a real service you would log the traceback.
        log(f"‚ùó Unexpected error: {exc}")
        return jsonify({"error": "Internal server error"}), 500


# --------------------------------------------------------------
# Health‚Äëcheck endpoint (optional but handy)
# --------------------------------------------------------------
@app.route("/ping", methods=["GET"])
def ping():
    return jsonify({"status": "ok"}), 200


# --------------------------------------------------------------
# Run the app (development mode)
# --------------------------------------------------------------
if __name__ == "__main__":
    # Accessible from other devices on the same network:
    #   http://<your‚Äëmachine‚Äëip>:5000/
    app.run(host="0.0.0.0", port=5011, debug=True)
--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/requirements.txt ---
python-dotenv
google-generativeai
falkordb

--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/query.py ---
import os
import json
import itertools
from kg_extractor.config import api_key
import asyncio
from graphiti_core.driver.falkordb_driver import FalkorDriver
from graphiti_core.search.search_config_recipes import COMBINED_HYBRID_SEARCH_RRF
from graphiti_core import Graphiti
from graphiti_core.llm_client.config import LLMConfig
from graphiti_core.llm_client.gemini_client import GeminiClient
from graphiti_core.embedder.gemini import GeminiEmbedder, GeminiEmbedderConfig
from graphiti_core.cross_encoder.gemini_reranker_client import GeminiRerankerClient
from graphiti_core.driver.falkordb_driver import FalkorDriver
import itertools
from graphiti_core.driver.falkordb_driver import FalkorDriver
from graphiti_core.search.search_config_recipes import COMBINED_HYBRID_SEARCH_RRF
from graphiti_core import Graphiti
from graphiti_core.llm_client.config import LLMConfig
from graphiti_core.llm_client.gemini_client import GeminiClient
from graphiti_core.embedder.gemini import GeminiEmbedder, GeminiEmbedderConfig
from graphiti_core.cross_encoder.gemini_reranker_client import GeminiRerankerClient
from graphiti_core.driver.falkordb_driver import FalkorDriver
from kg_extractor.llm import llm_call, salvage_json
from kg_extractor.prompts import agent_prompt

async def search_graph_and_format_results(query_from_user, falkor_driver, embed_client, cross_encoder, llm_client, graphiti) -> str:
	class NodeResult:
		def __init__(self, name, summary, uuid=None):
			self.name = name
			self.summary = summary
			self.uuid = uuid

	async def get_node_from_uuid(uuid):
		query = """MATCH (n:Entity {uuid: '""" + uuid + """'})
				RETURN
					n.name AS name,
					n.summary AS summary,
					n.uuid AS uuid
				"""
		res = await falkor_driver.execute_query(query)
		if res and res[0]:
			data = res[0][0]
			# Check if the returned data is a dictionary and adapt
			if isinstance(data, dict):
				return NodeResult(data.get('name'), data.get('summary'), data.get('uuid'))
			# If it's already an object with the expected attributes, return it directly
			elif hasattr(data, 'name') and hasattr(data, 'summary'):
				return data
		return None 

	node_search_config = COMBINED_HYBRID_SEARCH_RRF.model_copy(deep=True)
	node_search_config.limit = 5  # Limit to 5 results

	# Execute the node search
	node_search_results = await graphiti._search(
		query=query_from_user,
		config=node_search_config,
	)

	output_string = ""
	nodes = node_search_results.nodes
	edges = node_search_results.edges

	for node, edge in itertools.zip_longest(nodes, edges, fillvalue=None):
		# Process node if it exists for the current iteration
		if node is not None:
			output_string += f"SOURCE Node Name: {node.name}\n"
			output_string += f"SOURCE Node Summary: {node.summary}\n"

		# Process edge if it exists for the current iteration
		if edge is not None:
			target_node = await get_node_from_uuid(edge.target_node_uuid)

			source_node_name = node.name if node is not None else "Unknown Source Node (pairing mismatch)"
			
			# Safely get target node name and summary, in case target_node was not found.
			target_node_name = target_node.name if target_node is not None else "Unknown Target Node (UUID not found)"
			target_node_summary = target_node.summary if target_node is not None else "N/A"

			output_string += f"TARGET Node Name: {target_node_name}\n"
			output_string += f"TARGET Node Summary: {target_node_summary}\n\n"
			output_string += f"## Relationship\n"
			output_string += f"{source_node_name} -[:{edge.name}]-> {target_node_name} (FACT:{edge.fact})\n"
			output_string += f"------\n"
	
	systemp_prompt = f"""
	System Prompt:
	{agent_prompt}
	
	Queried context: 
	{output_string}
	"""

	response = llm_call(
		user_prompt=query_from_user,
		sys_prompt=systemp_prompt
	)

	json_response = salvage_json(response)

	return json_response
--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/user_query.py ---
import os
import itertools
from kg_extractor.config import api_key
import asyncio
from graphiti_core.driver.falkordb_driver import FalkorDriver
from graphiti_core.search.search_config_recipes import COMBINED_HYBRID_SEARCH_RRF
from graphiti_core import Graphiti
from graphiti_core.llm_client.config import LLMConfig
from graphiti_core.llm_client.gemini_client import GeminiClient
from graphiti_core.embedder.gemini import GeminiEmbedder, GeminiEmbedderConfig
from graphiti_core.cross_encoder.gemini_reranker_client import GeminiRerankerClient
from graphiti_core.driver.falkordb_driver import FalkorDriver
import itertools
from graphiti_core.driver.falkordb_driver import FalkorDriver
from graphiti_core.search.search_config_recipes import COMBINED_HYBRID_SEARCH_RRF
from graphiti_core import Graphiti
from graphiti_core.llm_client.config import LLMConfig
from graphiti_core.llm_client.gemini_client import GeminiClient
from graphiti_core.embedder.gemini import GeminiEmbedder, GeminiEmbedderConfig
from graphiti_core.cross_encoder.gemini_reranker_client import GeminiRerankerClient
from graphiti_core.driver.falkordb_driver import FalkorDriver
from query import search_graph_and_format_results

usr_falkor_driver = FalkorDriver(
	host='localhost',        
	port=6379,           
	username=None,         
	password=None,
	database="aug-8-db-tech-doc",       
)

usr_embed_client = GeminiEmbedder(
		config=GeminiEmbedderConfig(
			api_key=api_key,
			embedding_model="gemini-embedding-001",
		)
	)

usr_cross_encoder = GeminiRerankerClient(
		config=LLMConfig(
			api_key=api_key,
			model="gemini-2.0-flash-lite",
			temperature=0.3,
		)
	)

usr_llm_client = GeminiClient(
		config=LLMConfig(
			api_key=api_key,
			temperature=0.65,
			model="gemini-2.5-flash",
			small_model='gemini-2.5-flash-lite'
		))

usr_graphiti = Graphiti(
	graph_driver=usr_falkor_driver,
	llm_client=usr_llm_client,
	embedder=usr_embed_client,
	cross_encoder=usr_cross_encoder,)

user_question = "How is Apple related to Techcombank?"

answer = asyncio.run(search_graph_and_format_results(user_question, usr_falkor_driver, usr_embed_client, usr_cross_encoder, usr_llm_client, usr_graphiti))
print(answer)
--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/setup.py ---
from setuptools import setup, find_packages

setup(
    name="kg_extractor",
    version="0.1.0",
    description="A library for extracting knowledge graphs from text using LLMs and storing them in FalkorDB.",
    author="Your Name",
    author_email="your.email@example.com",
    packages=find_packages(),
    install_requires=[
        "python-dotenv",
        "google-generativeai",
        "falkordb",
    ],
    python_requires=">=3.8",
    include_package_data=True,
    url="",
    classifiers=[
        "Programming Language :: Python :: 3",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
    ],
)

--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/frontend.html ---
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>ChatBot ‚Äì Modern Messenger UI</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap"
      rel="stylesheet">

<style>
/* --------------------------------------------------------------
   Design tokens (default = ‚Äúwhite‚Äù theme)
   -------------------------------------------------------------- */
:root{
    --color-primary:#0084ff;               /* messenger blue            */
    --color-primary-dark:#005c99;
    --color-sent-bg:#dcf8c6;               /* user bubble               */
    --color-received-bg:#ffffff;           /* bot bubble                */
    --color-bg:#f0f2f5;                    /* page background           */
    --color-header-bg:linear-gradient(135deg,#0066ff,#004bb5);
    --color-text:#2c2c2c;
    --color-muted:#777;
    --color-border:#e0e0e0;
    --radius:20px;
    --font-family:'Inter',Arial,Helvetica,sans-serif;
}

/* -----------------------------------------------------------------
   Theme overrides
   ----------------------------------------------------------------- */
.theme-maroon{
    --color-primary:#800020;
    --color-primary-dark:#5a0016;
    --color-sent-bg:#ffe5e5;
    --color-received-bg:#fff5f5;
    --color-bg:#fce7e7;
    --color-header-bg:linear-gradient(135deg,#800020,#5a0016);
    --color-text:#2c2c2c;
    --color-muted:#777;
    --color-border:#e0b0b0;
}
.theme-grey{
    --color-primary:#607d8b;
    --color-primary-dark:#455a64;
    --color-sent-bg:#dbe9f4;
    --color-received-bg:#ffffff;
    --color-bg:#f5f5f5;
    --color-header-bg:linear-gradient(135deg,#607d8b,#455a64);
    --color-text:#212121;
    --color-muted:#666;
    --color-border:#c0c0c0;
}

/* -----------------------------------------------------------------
   Global reset & basic layout
   ----------------------------------------------------------------- */
*,*::before,*::after{box-sizing:border-box;margin:0;padding:0}
html,body{height:100%;font-family:var(--font-family);background:var(--color-bg);
        color:var(--color-text);transition:background .3s,color .3s}
.chat-app{
    display:flex;flex-direction:column;width:100%;max-width:480px;height:100vh;
    margin:auto;background:#fff;border-radius:12px;box-shadow:0 4px 12px rgba(0,0,0,.15);
    overflow:hidden;transition:background .3s;
}

/* -----------------------------------------------------------------
   Header (now holds the theme selector)
   ----------------------------------------------------------------- */
.chat-header{
    padding:12px 16px;background:var(--color-header-bg);color:#fff;
    display:flex;align-items:center;gap:12px;transition:background .3s;
}
.chat-header img{width:36px;height:36px;border-radius:50%;object-fit:cover}
.chat-header h2{font-size:1.1rem;font-weight:600;margin:0}

/* Theme selector ‚Äì right‚Äëaligned */
.theme-switcher{
    margin-left:auto;
}
.theme-switcher select{
    background:transparent;border:none;color:#fff;font-size:0.9rem;
    appearance:none;padding:4px 8px;cursor:pointer;
}

/* -----------------------------------------------------------------
   Conversation body
   ----------------------------------------------------------------- */
.chat-body{
    flex:1;overflow-y:auto;padding:12px;display:flex;flex-direction:column;gap:8px;
}
.chat-body::-webkit-scrollbar{width:6px}
.chat-body::-webkit-scrollbar-thumb{background:#bbb;border-radius:3px}

/* -----------------------------------------------------------------
   Message bubbles
   ----------------------------------------------------------------- */
.message{
    max-width:75%;position:relative;padding:10px 14px;border-radius:var(--radius);
    line-height:1.45;word-break:break-word;animation:fadeIn .2s ease;
    transition:background .2s;
}

/* Sent (user) */
.message.sent{
    align-self:flex-end;background:var(--color-sent-bg);color:#000;
}
.message.sent::after{
    content:"";position:absolute;bottom:0;right:-6px;
    border:6px solid transparent;border-left-color:var(--color-sent-bg);
}

/* Received (bot) ‚Äì avatar fix */
.message.received{
    align-self:flex-start;background:var(--color-received-bg);color:var(--color-text);
    border:1px solid var(--color-border);margin-left:38px;/* space for avatar */
    position:relative;/* keep pseudo‚Äëtails working */
}
.message.received::before{
    content:"";position:absolute;bottom:0;left:-6px;
    border:6px solid transparent;border-right-color:var(--color-received-bg);
}

/* Avatar ‚Äì no longer clipping the bubble */
.message.received .avatar{
    width:28px;height:28px;border-radius:50%;overflow:hidden;
    position:absolute;left:-38px;top:0;
}
.message.received .avatar img{width:100%;height:100%;object-fit:cover}

/* Timestamp */
.message .time{
    font-size:0.65rem;color:var(--color-muted);position:absolute;
    bottom:-16px;right:6px;
}

/* -----------------------------------------------------------------
   Typing indicator (three dots)
   ----------------------------------------------------------------- */
.typing-indicator{
    align-self:flex-start;display:flex;gap:4px;padding:8px 14px;
    background:var(--color-received-bg);border:1px solid var(--color-border);
    border-radius:var(--radius);position:relative;
}
.typing-indicator .dot{
    width:6px;height:6px;background:#aaa;border-radius:50%;
    animation:bounce 1s infinite;
}
.typing-indicator .dot:nth-child(2){animation-delay:.2s}
.typing-indicator .dot:nth-child(3){animation-delay:.4s}
@keyframes bounce{
    0%,80%,100%{transform:scale(0.6);opacity:.6}
    40%{transform:scale(1);opacity:1}
}

/* -----------------------------------------------------------------
   Input bar
   ----------------------------------------------------------------- */
.chat-input{
    display:flex;align-items:center;gap:8px;padding:8px;
    border-top:1px solid var(--color-border);background:#fafafa;
}
.chat-input textarea{
    flex:1;resize:none;border:none;outline:none;border-radius:20px;
    padding:10px 14px;font-family:inherit;font-size:1rem;background:#e9ebee;
    max-height:150px;overflow-y:auto;
}
.chat-input button{
    background:var(--color-primary);border:none;width:44px;height:44px;
    border-radius:50%;cursor:pointer;display:flex;align-items:center;
    justify-content:center;color:#fff;transition:background .2s;
}
.chat-input button:disabled{background:#a0c8ff;cursor:not-allowed}
.chat-input button:hover:not(:disabled){background:var(--color-primary-dark)}

/* -----------------------------------------------------------------
   Small utilities / animations
   ----------------------------------------------------------------- */
@keyframes fadeIn{
    from{opacity:0;transform:translateY(6px)}
    to{opacity:1;transform:none}
}

/* -----------------------------------------------------------------
   Responsive tweaks
   ----------------------------------------------------------------- */
@media (max-width:480px){
    .chat-app{border-radius:0;height:100vh}
}
</style>
</head>

<body class="theme-white"><!-- default theme; will be overwritten by JS -->
<div class="chat-app">

    <!-- Header -->
    <header class="chat-header">
        <img src="https://i.pravatar.cc/150?img=68" alt="Bot avatar">
        <h2>ChatBot</h2>

        <!-- Theme switcher -->
        <div class="theme-switcher">
            <select id="theme-select" title="Select theme">
                <option value="white">White</option>
                <option value="maroon">Maroon</option>
                <option value="grey">Grey</option>
            </select>
        </div>
    </header>

    <!-- Conversation -->
    <main class="chat-body" id="chat-body">
        <!-- messages are injected here -->
    </main>

    <!-- Input -->
    <footer class="chat-input">
        <textarea id="msg-input" rows="1" placeholder="Type a message‚Ä¶"></textarea>
        <button id="send-btn" title="Send">
            <svg viewBox="0 0 24 24" width="22" height="22" fill="currentColor">
                <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
            </svg>
        </button>
    </footer>
</div>

<script>
/* --------------------------------------------------------------
   Helper functions
   -------------------------------------------------------------- */
function formatTime(date){
    return date.toLocaleTimeString([], {hour:'2-digit',minute:'2-digit'});
}

/* Create a single message element (type = 'sent' | 'received') */
function createMessage(text, type){
    const msg = document.createElement('div');
    msg.className = `message ${type}`;
    msg.textContent = text;

    // timestamp
    const time = document.createElement('span');
    time.className = 'time';
    time.textContent = formatTime(new Date());
    msg.appendChild(time);

    // Avatar for bot messages
    if(type === 'received'){
        const avatar = document.createElement('div');
        avatar.className = 'avatar';
        const img = document.createElement('img');
        img.src = 'https://i.pravatar.cc/150?img=68';
        img.alt = 'Bot';
        avatar.appendChild(img);
        msg.insertBefore(avatar, msg.firstChild);
    }
    return msg;
}

/* Insert into chat body and scroll into view */
function addMessage(text, type){
    const chatBody = document.getElementById('chat-body');
    const el = createMessage(text, type);
    chatBody.appendChild(el);
    el.scrollIntoView({behavior:'smooth', block:'nearest'});
}

/* Typing indicator handling */
function showTyping(){
    const chatBody = document.getElementById('chat-body');
    const indicator = document.createElement('div');
    indicator.className = 'typing-indicator';
    indicator.id = 'typing-indicator';
    for(let i=0;i<3;i++){
        const dot = document.createElement('div');
        dot.className = 'dot';
        indicator.appendChild(dot);
    }
    chatBody.appendChild(indicator);
    indicator.scrollIntoView({behavior:'smooth', block:'nearest'});
}
function hideTyping(){
    const ind = document.getElementById('typing-indicator');
    if(ind) ind.remove();
}

/* --------------------------------------------------------------
   Core logic ‚Äì sendMessage()
   -------------------------------------------------------------- */
async function sendMessage(){
    const input   = document.getElementById('msg-input');
    const rawText = input.value.trim();
    if(!rawText) return;

    // 1Ô∏è‚É£ Show user bubble instantly
    addMessage(rawText, 'sent');

    // 2Ô∏è‚É£ Reset / collapse the textarea
    input.value = '';
    autoResize();

    // 3Ô∏è‚É£ Show typing animation and lock UI
    showTyping();
    document.getElementById('send-btn').disabled = true;
    input.disabled = true;

    try{
        const response = await fetch('http://127.0.0.1:5011/chat', {
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify({message: rawText})
        });

        if(!response.ok) throw new Error(`HTTP ${response.status}`);

        const data = await response.json(); // expects {"response":"‚Ä¶"}
        const botReply = data.response ?? data.reply ?? data.answer ?? '[no reply]';

        hideTyping();
        addMessage(botReply, 'received');
    }catch(err){
        console.error(err);
        hideTyping();
        addMessage('‚ö†Ô∏è Oops! Something went wrong.', 'received');
    }finally{
        // 4Ô∏è‚É£ Unlock UI
        document.getElementById('send-btn').disabled = false;
        input.disabled = false;
        input.focus();
    }
}

/* --------------------------------------------------------------
   UI helpers
   -------------------------------------------------------------- */
function autoResize(){
    const textarea = document.getElementById('msg-input');
    textarea.style.height = 'auto';
    textarea.style.height = textarea.scrollHeight + 'px';
}

/* --------------------------------------------------------------
   Theme handling
   -------------------------------------------------------------- */
function setTheme(theme){
    document.body.classList.remove('theme-white','theme-maroon','theme-grey');
    document.body.classList.add('theme-'+theme);
    localStorage.setItem('chatTheme', theme);
}

/* Initialise theme from localStorage (default = white) */
function initTheme(){
    const saved = localStorage.getItem('chatTheme') || 'white';
    const selector = document.getElementById('theme-select');
    selector.value = saved;
    setTheme(saved);
}

/* --------------------------------------------------------------
   Event bindings
   -------------------------------------------------------------- */
document.getElementById('send-btn')
        .addEventListener('click', sendMessage);

document.getElementById('msg-input')
        .addEventListener('input', autoResize);

document.getElementById('msg-input')
        .addEventListener('keydown', e => {
            if(e.key === 'Enter' && !e.shiftKey){
                e.preventDefault();
                sendMessage();
            }
        });

document.getElementById('theme-select')
        .addEventListener('change', e => setTheme(e.target.value));

window.addEventListener('load', () => {
    initTheme();                                 // apply saved theme
    // initial greeting ‚Äì just for demo
    setTimeout(()=>{
        addMessage('üëã Hi! I‚Äôm your friendly chatbot. Ask me anything.', 'received');
    },500);
});
</script>
</body>
</html>
--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/kg_extractor/db.py ---
from falkordb.asyncio import FalkorDB
from .config import db_client
from datetime import datetime, timedelta, timezone

def convert_datetimes_to_strings(obj):
	if isinstance(obj, dict):
		return {k: convert_datetimes_to_strings(v) for k, v in obj.items()}
	elif isinstance(obj, list):
		return [convert_datetimes_to_strings(item) for item in obj]
	elif isinstance(obj, tuple):
		return tuple(convert_datetimes_to_strings(item) for item in obj)
	elif isinstance(obj, datetime):
		return obj.isoformat()
	else:
		return obj

async def execute_query(cypher_query_, database='default', **kwargs):
		graph = db_client.select_graph(database)
  
		params = convert_datetimes_to_strings(dict(kwargs))
		try:
			result = await graph.query(cypher_query_, params=params)
		except Exception as e:
			print(f'Error executing FalkorDB query: {e}\n{cypher_query_}\n{params}')
			raise
   
		header = [h[1] for h in result.header]
  
		if not result.result_set:
			return None

		records = []
		for row in result.result_set:
			records.append(dict(zip(header, row)))
		return records

## DB OPERATION

async def get_node_from_uuid(uuid, db_name):
	query = """MATCH (n:Entity {uuid: '""" + uuid + """'})
			RETURN
				n.name AS name,
				n.summary AS summary,
				n.uuid AS uuid
			"""
	res = await execute_query(query, db_name)
	try:
		return res[0]
	except:
		return None

async def get_uuid_from_name(name, db_name):
	query = "MATCH (n:Entity {name: $name}) RETURN n.uuid AS uuid"
	params = {"name": name}
	
	record = await execute_query(query,db_name, **params)

	try:
		record = record[0]
	except:
		return None

	if record and 'uuid' in record:
		return record['uuid']
	else:
		return None
--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/kg_extractor/config.py ---
from dotenv import load_dotenv
from google import genai
from falkordb.asyncio import FalkorDB
import os

load_dotenv()

api_key = os.getenv("GEMINI_API_KEY")

if not api_key:
    raise ValueError("GEMINI_API_KEY not found in .env")

ai_client = genai.Client(api_key=api_key)

db_client = FalkorDB(
    host="localhost",
    port=6379,
    username=None,
    password=None,
)
--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/kg_extractor/__init__.py ---
import asyncio
from .pipeline import processing_node_edge

def extract_knowledge_graph(text, db_name):
	"""
	Main API function to extract a knowledge graph from text and store it in the database.
	Args:
		text (list): List of dicts, each containing an article or document.
		db_name (str): Name of the database to store the graph.
	Returns:
		None
	"""
	asyncio.run(processing_node_edge(text, db_name))

--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/kg_extractor/llm.py ---
import re
import json
import time
import asyncio
from functools import wraps
from google.genai import types
from google.genai.errors import ClientError
from .config import ai_client


def salvage_json(raw_output):
	if not raw_output:
		return None

	raw_output = re.sub(r"^```json|^```|```$", "", raw_output.strip(), flags=re.MULTILINE).strip()

	try:
		return json.loads(raw_output)
	except json.JSONDecodeError:
		print("Warning: Initial JSON parse failed, attempting salvage.")
		match = re.search(r"\{.*\}", raw_output, re.DOTALL)
		if match:
			try:
				return json.loads(match.group(0))
			except json.JSONDecodeError:
				print("Error: Could not parse JSON after salvage.")
				raise

def generate_embedding(input_data):
    time.sleep(0.3)
    result = ai_client.models.embed_content(
        model="gemini-embedding-001",
        contents=[input_data],
        config=types.EmbedContentConfig(output_dimensionality=1024),
    )
    if not result.embeddings or not result.embeddings[0].values:
        raise ValueError('No embeddings returned from Gemini API in create()')

    return result.embeddings[0].values

def llm_call(user_prompt, sys_prompt):
	res = ai_client.models.generate_content(
		model="gemini-2.5-flash-lite",
		config=types.GenerateContentConfig(
			thinking_config=types.ThinkingConfig(
				thinking_budget=2048,
				include_thoughts=False
			),
			system_instruction=sys_prompt,
			temperature=0.3,
			response_mime_type='application/json',
			top_p=0.9,
			max_output_tokens=60000,
		),
		contents=user_prompt
	)
	return res.text

def chunking_llm_call(input_text, sys_prompt):
	words = input_text.split()

	if len(words) <= 3000:
		print("Input is within the word limit. No chunking needed.")
		return {"chunk_1": input_text}

	try:
		print("Input is longer than 3000 words. Chunking...")
		user_prompt = f"""Below is the article to be processed:\n{input_text}"""

		res = ai_client.models.generate_content(
			model="gemini-2.5-flash",
			config=types.GenerateContentConfig(
				system_instruction=sys_prompt,
				temperature=0.1,
				response_mime_type='application/json',
				top_p=0.9,
				max_output_tokens=60000,
			),
			contents=user_prompt
		)

		raw_output = res.text
		json_output = salvage_json(raw_output)
		print("Chunking completed. Waiting 30 seconds to respect rate limits...\n")
		time.sleep(30)
		return json_output

	except Exception as e:
		print(f"An error occurred during chunking: {e}")
		return {"error": str(e)}

--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/kg_extractor/prompts.py ---
# Node and Edge Extraction
extraction_sys_node = """
You are an expert AI system for knowledge graph extraction.
Your task is to analyze the provided text and extract all significant entities (nodes).
First, I want you to read everything, think carefully about all the importance node, then come to return a json

You must follow these rules precisely:
1. IDENTIFY ENTITIES (Nodes): Identify all significant concepts & entities that is key and important in the text
2. GENERATE SUMMARIES: For each entity, write a concise summary (under 80 words) based *only* on the information present in the text.
3. FINAL OUTPUT: You MUST respond with a single, valid JSON object that strictly adheres to the schema below. Do not include any explanations or text outside of the JSON object.
<OUTPUT_JSON_SCHEMA>
{{
    "nodes": [{{"entity_name": "string", "summary": "string"}}]
}}
</OUTPUT_JSON_SCHEMA>
""".strip()
        
extraction_sys_edge = """
You are an expert AI system for knowledge graph extraction.
Your task is to analyze the provided text and extract all significant factual relationships between them (edges).

Extract all factual relationships between the given ENTITIES based on the TEXT_TO_ANALYZE.
Based on the PROVIDED_ENTITIES_LIST only

Only extract facts that:
- Involve two DISTINCT ENTITIES from the ENTITIES list,
- Are clearly stated or unambiguously implied in the CURRENT MESSAGE, and can be represented as edges in a knowledge graph.
- The FACT TYPES provide a list of the most important types of facts, make sure to extract facts of these types
- The FACT TYPES are not an exhaustive list, extract all facts from the message even if they do not fit into one of the FACT TYPES
- The FACT TYPES each contain their fact_type_signature which represents the source and target entity types.

You must follow these rules precisely:
1. Only emit facts where both the subject and object match entity_name in ENTITIES.
2. Each fact must involve two **distinct** entities.
3. Use a SCREAMING_SNAKE_CASE string as the `relation_type` (e.g., FOUNDED, WORKS_AT).
4. Do not emit duplicate or semantically redundant facts.
5. The `fact_text` should quote or closely paraphrase the original source sentence(s).
7. Do **not** hallucinate or infer temporal bounds from unrelated events.
8. IDENTIFY RELATIONSHIPS (Edges): Identify direct, factual relationships between the entities. Represent each relationship as an edge connecting two entities using their `temp_id`.
9. EXTRACT FACT TEXT: For each edge, include the `fact_text` field, which should be the specific sentence or phrase from the source text that states the relationship.
10. FINAL OUTPUT: You MUST respond with a single, valid JSON object that strictly adheres to the schema below. Do not include any explanations or text outside of the JSON object.
<OUTPUT_JSON_SCHEMA>
{{
    "edges": [
      {{"source_entity": "string", "target_entity": "string", "relation_type": "string", "fact_text": "string"}}
    ]
}}
</OUTPUT_JSON_SCHEMA>
""".strip()
        
extraction_usr_node = """
<TEXT_TO_ANALYZE>
{data}
</TEXT_TO_ANALYZE>

Generate the JSON output based on the rules and schema provided in the system prompt.""".strip()

extraction_usr_edge = """
<TEXT_TO_ANALYZE>
{data}
</TEXT_TO_ANALYZE>

<PROVIDED_ENTITIES_LIST>
{node_data}
</PROVIDED_ENTITIES_LIST>

Generate the JSON output based on the rules and schema provided in the system prompt.""".strip()

# Article Chunking
chunking_system_prompt = """
# Context: You are an expert text processing assistant. Your primary goal is to break down long articles into smaller, cohesive, and easily digestible chunks.
# Input: You will receive a list of dictionary. Each dictionary represents a single, lengthy article.
# Instruction: 
1. Divide the article into distinct sections (chunks), each chunk must have a length that is at least 700 words and at most 1000 words.
2. Each chunk must be a self-contained, meaningful unit of information. It should make sense on its own without requiring the reader to jump back and forth excessively between chunks.
3. Do not ommit or alter any information from the original article. Your only job is to cut it into chunks - the total length and content must be exactly the same as the original article.
4. Output Format: Provide the chunked content as a JSON object, where each value represents one coherent chunk. Do not include any introductory or concluding remarks outside of the JSON object. The one and only thing you should return is the JSON object.
Example Output:
{
    "chunk_1": "...",
    "chunk_2": "...",
    "chunk_3": "..."
}
"""

agent_prompt = """You are a helpful and friendly chatbot assistant. Your task is to answer the user's question based *only* on the provided context. If the context does not contain the answer, state that you couldn't find the information. Answer in the same language as the user's question.

At the end, you will always return a JSON object of this format: 
{
    "query" : "your question here",
    "answer": "the returned answer here"
}
Do not include any other text outside of this JSON object.
"""
--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/kg_extractor/input_text.py ---
text = [
    {
        "article_0" : """Techcombank's Auto-Earning feature revolutionizes banking

        Three months after Techcombank's Auto-Earning feature on its mobile e-banking app was introduced in January, its slogan - "Let your money work" - has become a social media trend in Vietnam.

        Techcombank‚Äôs focus on meeting the needs of retail customers is evident in its growth strategy in recent years. Last year, the bank attracted around 2.6 million new customers, the highest in its history. By March 2024, the bank‚Äôs total number of retail customers had reached 13.8 million. 

        Focusing on retail services

        Notably, Techcombank‚Äôs customers are engaging with a broader spectrum of the bank‚Äôs services. On average, customers are using four to five services, compared to one or two services in the past. This has propelled Techcombank‚Äôs retail segment forward, establishing it as the primary transaction bank for its customers and fueling its sustained growth since 2006.

        ‚ÄúAs early as 7 a.m, many customers use Techcombank's code to book a taxi or use points to redeem a coffee or buy breakfast. When they need to buy something for lunch, they use Techcombank's card or other payment solutions. In the evening, when they go shopping or engage with friends and relatives, they have Techcombank Rewards points for vouchers at stores, restaurants, and entertainment venues. This warms my heart,‚Äù said Techcombank‚Äôs Chief Retail Banking Group Officer Nguyen Anh Tuan. 

        Techcombank pioneered the ‚Äúzero fee - free e-banking money-transfer policy‚Äù in September 2016, which drove forward the banking industry‚Äôs digital transformation and championed the adoption of cashless payments. The move resulted in a quick spread of a ‚Äúzero fee‚Äù policy throughout the entire Vietnamese banking market, which has benefited Vietnamese customers nationwide.

        In January 2024, Techcombank introduced another breakthrough offering, the Auto-Earning feature on its mobile e-banking app. With a simple one-time activation, customers‚Äô idle cash in their primary account earns optimal returns at a highly competitive rate of 3.1% per annum (depending on prevailing policies at the time), while remaining liquid and accessible for transactions when needed. 

        This feature enhances convenience for customers, automatically earns them profit on their idle cash, and is delivered through a seamless digital banking experience.

        The Zero Fee policy and Auto Earning feature align with a broader objective of Techcombank: advancing towards a cashless society and revolutionizing digital banking. 

        Achieving this objective was supported with a substantial investment of US$300 million in technology infrastructure in the period of 2016-2020 (excluding human resources costs). 

        Techcombank has allocated a further US$500 million to technology investment under its 5-year strategy in the 2021-2025 period. The capital is being used to spearhead new projects and drive digital transformation, enhancing its competitiveness in the market.

        "We hope customers always see Techcombank as a trusted companion in every step of their financial lives. With Auto-Earning, Techcombank's mobile app becomes a financial assistant in their pocket, helping customers multiply their funds effortlessly,‚Äù said Nguyen Anh Tuan.

        Auto-earning for all customers 

        Tuan revealed that prior to the official launch of Auto Earning in January 2024, the project team dedicated 18 months to designing, testing, and gathering feedback on the new feature. This enabled the project team to make necessary design adjustments and restructure the customer journey and the feature‚Äôs functionality before it was launched.

        ‚ÄúIf you do something without a specific direction or vision, it will be stressful. But when you have a firm belief that once you roll out the feature, customers will love it and benefit from it, and it is no longer a pressure. It becomes motivation,‚Äù Nguyen Anh Tuan said. 

        ‚ÄúWe had to identify which features needed to be improved for Auto Earning to provide the best convenience and support to our customers. Next, we engaged with customers through various interactive channels to get their feedback and assess their needs while using the application. Based on this insight, the bank continued to make necessary adjustments to ensure the most seamless customer experience possible,‚Äù he added.

        During the research and testing phase of Auto Earning, internal pressure was immense. According to Tuan, Auto Earning was a key project prioritized by Techcombank‚Äôs Board of Directors, leading to additional financial and human resources being allocated to the project. This desire to deliver a new breakthrough product for customers extended beyond the direct project team, inspiring all management levels and the entire company. 

        The Board of Directors faced the challenging task of balancing this desire to create a unique customer value proposition with the need to ensure other areas of the business continued to thrive. 

        In many countries, the Auto Earning feature is very popular, often referred to as the Auto Sweeping Facility. Implementing such a feature requires methodological investment in product features and technological infrastructure to ensure seamless convenience, enhanced user experience, and numerous benefits for customers. 

        In this regard, Techcombank stands out as a trailblazer in introducing this innovation to customers in Vietnam.

        ‚ÄúAt Techcombank, we consistently prioritize meeting the needs of our customers, placing them at the heart of everything we do. With this new feature, customers can enjoy enhanced efficiency in time management and cash flow,‚Äù said Nguyen Anh Tuan.

        ‚ÄúTechcombank‚Äôs exceptional performance can be attributed to our steadfast adherence to the core cultural value of the 'Customer is the focus'across all business endeavors,‚Äù he added.

        A ‚Äúlong-lasting fortune‚Äù

        The decision to launch the Auto-Earning feature just before the 2024 Lunar New Year (Tet holiday) has an intriguing backstory. Tuan recalled that the project team had confidence in the new product, but it was impossible to be certain it was perfect. 

        Understandably, while this feature took 18 months to develop, it was only tested on small groups of selected customers. Meanwhile, Techcombank‚Äôs mobile app is used by many millions of customers every day. Nonetheless, the management team of Techcombank opted to activate Auto Earning during the Tet holiday, aiming to usher in ‚Äúa new year of luck and lasting fortune‚Äù for customers. 

        After only three months, the Auto-Earning slogan - ‚ÄúLet your money work‚Äù - has become a social media trend in Vietnam. 

        Thanks to its unique value proposition, it has attracted nearly 500,000 registered users, propelling Techcombank back to the top in CASA, with a ratio of 40.5% and a NIM of 4% at the end of March 2024. Buoyed by the success of this feature, Techcombank aims to attract two million new customers in 2024.

        Nguyen Anh Tuan, a highly experienced manager that has been with the bank for over 18 years, attributes its success to its ability to change and progress through investment in digitalization and by attracting the best talent. 

        Techcombank‚Äôs market-leading application of digital technology and data analysis enables the bank to gain deeper insights into customer needs and preferences. These insights, coupled with its strong customer-centric approach, empower the bank to deliver unique customer value propositions and experiences tailored to the unique needs of individual customers.   

        However, technology on its own is not enough. Techcombank boasts over 11,000 employees that include Vietnamese and international talent. Its team comprises 18 different nationalities, all united in their commitment to delivering the best experience possible for customers and to fullfilling the bank‚Äôs vision of ‚ÄúChange banking, Change lives.‚Äù

        ‚ÄúWe hope that as we understand customers better, our solutions, especially unsecured lending solutions based on convenience, speed, timing and suitability for customers, will be the next products that make a difference, enriching the convenience that we offer,‚Äù Tuan said.

        According to reports at Techcombank‚Äôs 2024 General Meeting of Shareholders, the bank‚Äôs total investment in technology for the 2021-2025 period amounts to US$500 million. Techcombank has made significant strides towards its goal of becoming an AI-driven bank, harnessing the power of data to enhance business value. The bank‚Äôs data system is structured into 100 micro-segments, with a focus on achieving personalized experiences for each customer. Furthermore, more than 52 million individual financial analyses have been conducted, resulting in improved conversion rates for targeted campaigns."""
    },
    {
        "article_1" : """
        Techcombank ‚ÄòAuto-earning‚Äô feature a social media trend in Vietnam
        By Tri Duc
        Mon, May 20, 2024 | 5:11 pm GMT+7
        Less than three months after Techcombank introduced the ‚ÄúLet-your-money-work‚Äù Auto-earning feature on its mobile e-banking app, it has gone viral and become a social media trend.

        A Techcombank branch. Photo courtesy of Techcombank.
        A Techcombank branch. Photo courtesy of Techcombank.
        Commenting on the success, the nation‚Äôs leading private bank said that a focus on meeting the needs of retail customers has been intrinsic to its growth strategy in recent years.

        At the end of Q1/ 2024, the number of the bank's retail customers reached 13.8 million. In 2023, it attracted a record 2.6 million new customers.

        The bank also noted that the increase in the number of retail customers has been accompanied by greater engagement with a broader spectrum of its services, from 1-2 earlier to an average of 4-5 at present.

        This indicated that the retail customers‚Äô primary banking relationship is with Techombank, a factor fuelling its sustained growth since 2006, according to Nguyen Anh Tuan, chief retail banking group officer.

        ‚ÄúAs early as 7 a.m., many customers use Techcombank's code to book a taxi or use points to redeem a coffee or buy breakfast. When they need to buy something for lunch, they use Techcombank's card or other payment solutions. In the evening, when they go shopping or engage with friends and relatives, they use Techcombank Rewards points for vouchers at stores, restaurants, and entertainment venues. This warms my heart,‚Äù Tuan said.

        Techcombank marked itself as a pioneer in the Vietnamese banking industry in September 2016, when it introduced the ‚ÄúZero Fee - Free E-banking Money-Transfer Policy,‚Äù propelling the industry‚Äôs digital transformation and championing the adoption of cashless payments.

        The Zero Fee policy quickly spread throughout the entire Vietnamese banking market, benefiting customers nationwide.

        This year‚Äôs Auto-earning feature is another breakthrough offering. With a simple one-time activation, customers‚Äô idle cash in their primary account can earn optimal returns at a highly competitive rate of 3.1% per annum (depending on prevailing policies at the time), while remaining liquid and accessible for transactions when needed. This feature enhances convenience for the customer, automatically earning them profit on their idle cash, all delivered through a seamless digital banking experience, Tuan said.

        Both ‚ÄúZero Fee‚Äù and ‚ÄúAuto Earning‚Äù features align with the bank‚Äôs broader objective of advancing towards a cashless society and revolutionizing digital banking.

        Pursuit of this objective has been supported by a substantial investment of $300 million in technology infrastructure from 2016 to 2020 (excluding human resource costs).

        Techcombank has allocated a further $500 million for technology investment under its 2021-2025 five-year strategy.

        ‚ÄúThis money is being used to spearhead new projects and drive digital transformation, enhancing its competitiveness in the market.

        "We hope customers always see Techcombank as a trusted companion in every step of their financial lives. With ‚ÄòAuto-earning,‚Äô Techcombank's mobile app becomes a financial assistant in their pocket, helping customers multiply their funds effortlessly,‚Äù Tuan said.

        Thorough preparation

        Tuan revealed that prior to the official launch of ‚ÄúAuto Earning‚Äù in January 2024, the project team dedicated 18 months to designing, testing and constantly gathering feedback on the new feature.

        This enabled the team to make necessary design adjustments and even restructure the customer journey and the feature‚Äôs functionality before it was ready for launch, he said.

        Techcombank mobile app interface. Photo courtesy of Techcombank.
        Techcombank mobile app interface. Photo courtesy of Techcombank.
        ‚ÄúIf you do something without a specific direction or vision, it will be stressful. But when you have a firm belief that once you roll out the feature, customers will love it and benefit from it, it is no longer a pressure. It becomes motivation,‚Äù Tuan said.

        He added: ‚ÄúWe had to identify which features needed to be improved for ‚ÄòAuto earning‚Äô to provide the best convenience and support for our customers. Next, we engaged with customers through various interactive channels to get their feedback and assess their needs while using the application. Based on these insights, the bank continued to make necessary adjustments to ensure the most seamless customer experience possible.‚Äù

        Tuan said the new feature was a key project prioritized by the board of directors, leading to additional financial and human resources being allocated for research and development.

        Tuan emphasized the bank‚Äôs customer-centric approach, saying: ‚ÄúAt Techcombank, we consistently prioritize meeting the needs of our customers, placing them at the heart of everything we do. With this new feature, customers can enjoy enhanced efficiency in time management and cash flow.

        ‚ÄúTechcombank‚Äôs exceptional performance can be attributed to our steadfast adherence to the core cultural value of customer being the focus across all business endeavors.‚Äù

        ‚ÄòLong-lasting fortune‚Äô

        The decision to activate Auto-earning during the Tet holiday aimed to usher in ‚Äúa new year of luck and lasting fortune‚Äù for customers, Tuan said, adding: ‚ÄúThe numbers speak for themselves. The feature‚Äôs unique value proposition has helped it attract nearly 500,000 registered users, helping propel Techcombank back to the top in CASA, with a ratio of 40.5% and a NIM of 4% at the end of Q1/2024. Buoyed by the success of this feature, we aim to attract two million new customers in 2024.‚Äù

        Tuan, who has been with the bank for more than 18 years, said its ability to change and progress through investment in digitalization and attracting the best talent was key to its success.

        He said the bank‚Äôs market-leading application of digital technology and data analysis has enabled it to gain deeper insights into customer needs and preferences.

        However, technology alone is not enough, Tuan noted.

        ‚ÄúTechcombank boasts over 11,000 employees, including Vietnamese and international talent. Our team comprises 18 different nationalities, all united in their commitment to delivering the best experience possible for customers and to fulfilling the bank‚Äôs vision of ‚ÄòChange banking, Change lives.‚Äô

        ‚ÄúWe hope that as we understand customers better, our solutions, especially unsecured lending solutions based on convenience, speed, timing, and suitability for customers, will be the next products that make a difference, enriching the convenience that we offer.‚Äù
        """
    }, 
    {
        "article_2" : """Techcombank Automatic profit generation 2.0 and the story of creating a trend in banking digital experience

        H·ªìng Th·∫Øm
        
        14:56, Thu Mar 20, 2025 (GMT+7)

        As a bank that is always a pioneer in technology and leading digital trends, Techcombank is creating a new trend in digital experience.

        The strong development of technology has led to increasingly high customer expectations for financial products. The digital banking experience today does not stop at convenience, speed, and safety, but must also suit each user portrait.

        Banks lead the trend

        Techcombank is still known as a "Tend creating bank" thanks to its strongly invested technology platform, especially in digital experience.

        A typical example, in 2016, this bank, one of the most effective banks in Vietnam, implemented Zero Fee, creating a "seismic" in the market when it exempted all fees for customers using Techcombank's digital banking service, even though at that time the service fee could be up to thousands of billions of VND and was a large source of revenue for banks. For a while, a series of other banks have also applied, and up to now, almost all banks in Vietnam no longer collect fees.

        Or in January 2024, Techcombank was the first bank in Vietnam to deploy "Autumn profits" - paying high interest rates for idle money to have the Automatic profits feature enabled in the payment account. The "revolution" created by Techcombank has attracted nearly 3 million more customers after more than a year of launch, helping nearly 80,000 billion VND of customers optimize benefits.

        After more than a year, up to now, a series of banks have also implemented paying interest on accounts similar to the "Autumn Profit" version of Techcombank in the early stages, but with different names, as the "era of free transactions" in Vietnam was created from Techcombank's initiative.

        However, customers always constantly expect improvement, especially in terms of experience. This has prompted Techcombank to launch version 2.0 of Automatic sinh after only 01 year and more completely optimize the customer experience thanks to its convenient, absolutely seamless features with a processing speed of only 1 second for every transaction and payment on all channels without any restrictions.

        According to banking and financial experts, Automatic profit generation is not just a trend but could be a new standard, a revolution in the banking industry. Continuously innovating to enhance the experience, the bank can change customers' thinking about a completely new financial product, bringing more value to customers like Apple's way of refreshing the phone, making the Iphone a symbol of the world.

        Automatic language development sets new standards

        "Automatic profit" is a product of Techcombank but has attracted the rapid participation of many banks and the support of millions of customers, thereby setting new standards for financial products, including:

        Flexibly use all your account balances 24/7 while your money is optimized for yields:

        The special feature of Automatic Profit is flexibility. With just 01 click, customers no longer have to worry about what to choose to optimize the yield for idle money, everything is completely automatically set up so that the account always achieves the highest yield, up to 4%/year. Unlike allowing customers to only use a part of their account balance for certain time frames, Techcombank's 2.0 Automatic Profit version has just been launched, allowing customers to flexibly use all their account balances for all transactions such as payment, transfer or withdrawal 24/7 anytime, anywhere.

        The automatic transfer system ensures uninterrupted spending demand. While the current version of some banks will only allow customers to use a part of their account balances for certain time frames. At the same time, instead of the amount of 10 million VND or more for regular customers and over 100 million VND for priority customers who are new to " make a profit", with "Automatic profits" 2.0 have optimized all the money in the account, erasing all gaps to the threshold for profit. All of the customers' idle money is profitable, even for just 1 day.

        Change your habits in financial management: When customers tend to keep money in their accounts for longer, they will generate more returns from idle money. This encourages customers to keep money in their accounts instead of withdrawing for unnecessary expenses, because the higher the balance, the greater the profit. In addition, customers also avoid spending wastefully, thereby building a better financial habit.

        With Techcombank's system, the balance in the account is automatically filtered and the "surplus" is transferred to the "interest space" for profit, while still ensuring that customers can spend at any time. This creates a smart savings habit, where customers do not need to proactively deposit savings but can still optimize profits from idle money.

        Outstanding digital experience: With just one operation, customers will easily manage profits right on the app, can receive interest every day and track the profits generated. This also encourages customers to use more digital banking services, from checking balances, monitoring profits, to making payment transactions. With the Automatic Profit version 2.0, Techcombank has continuously improved and has had a breakthrough solution with a monthly interest payment mechanism to help customers easily track the yield from idle money in a simple, intuitive way. The fact that nearly 3 million new customers have been added, more than half of which come from digital channels, and nearly 15 million Techcombank users are participating in the current "Automatic Profit Era" is the clearest proof.

        One initiative - many values

        Automatic profit making not only helps this bank grow quickly, but also brings many values to customers, the banking industry as well as the whole society.

        For customers, the fact that many people have turned on Autumn Profit and encouraged other banks to join in and implement it shows that this product is truly attractive and brings practical benefits.

        For the banking industry, Automatic profits encourage customers to use digital channels instead of traditional transactions at the counter, helping banks reduce operating costs, optimize resources and move towards a modern banking model. In addition, it also promotes competition between banks, thereby creating increasingly superior products for users.

        As for the whole society, it is clear that in the current 4.0 era, financial products and services are increasingly optimized and bring better benefits and experiences, so users coming to digital banking is always a top priority. This contributes significantly to promoting cashless payments in society and soon completing the cashless payment target set by the Government.

        Pioneering in providing innovative financial products such as "Autumn profits" also helps Techcombank affirm its position as a leading bank in innovation, enhancing its reputation in the industry."""
    }
]
--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/kg_extractor/utils.py ---

--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/kg_extractor/pipeline.py ---
import uuid
import asyncio
from typing import List
from .prompts import extraction_sys_edge, extraction_usr_edge, extraction_sys_node, extraction_usr_node, chunking_system_prompt
from .llm import llm_call, chunking_llm_call, salvage_json
from .graph_ops import add_metadata_to_nodes, add_metadata_to_edge, node_to_db, edge_to_db, episodic_generator, advanced_deduplication_controller
from .input_text import text 

async def each_ep_generator_node_edge(data, db_name, ep_name):
	#* Step 1: Generate Nodes
	node_step1 = salvage_json(llm_call(sys_prompt=extraction_sys_node,
	                       user_prompt=extraction_usr_node.format(data=data)))
 
	#* Step 2: Generate Edges
	edge_step1 = salvage_json(llm_call(sys_prompt=extraction_sys_edge,
	                       user_prompt=extraction_usr_edge.format(data=data, node_data=node_step1)))
   
	episode_uuid = str(uuid.uuid4())
			
	node_step2 = add_metadata_to_nodes(node_step1, 'Entity')
 
	await node_to_db(node_step2, db_name)
 
	edge_step2 = await add_metadata_to_edge(edge_step1, 'RELATES_TO', db_name, episode_uuid)
 
	await edge_to_db(edge_step2, db_name)
 
	episode_node, episode_edges = episodic_generator(node_step2, edge_step2, ep_name, data, 'text_source', episode_uuid)
 
	await node_to_db(episode_node, db_name)

	await edge_to_db(episode_edges, db_name)

	await advanced_deduplication_controller(db_name, 0.88)
 
	return "DONE"

async def processing_node_edge(text: list, db_name: str):
    for i in range(0, len(text)):
    
        print(f"\n\n--- Start processing article_{i} ---")
        print("STEP 1: Chunking article content...")
        article_content = text[i][f"article_{i}"]
        chunked_article = chunking_llm_call(article_content, chunking_system_prompt)

        print("STEP 2: Processing nodes and edges...")
        for j, chunk in enumerate(chunked_article.values(), start=0):
            await each_ep_generator_node_edge(chunk.strip(), db_name, f"chunk_{j}_article_{i}")
            await advanced_deduplication_controller(db_name, 0.88)
            print(f"Processed chunk {j} for article_{i}")
        
        print(f"--- Finish parsing article_{i} ---")
        print("Waiting 1 second to respect rate limits...\n")
        await asyncio.sleep(20)



async def process_articles(text: list, db_name: str):
    for i in range(len(text)):

        print(f"\n\n--- Start processing article_{i} ---")
        print("STEP 1: Chunking article content...")
        article_content = text[i][f"article_{i}"]
        chunked_article = chunking_llm_call(article_content, chunking_system_prompt)

        print("STEP 2: Extracting nodes and edges from chunks...")
        for j, chunk in enumerate(chunked_article.values()):
            data = chunk.strip()

            # Step 1: Generate Nodes
            node_step1 = salvage_json(
                llm_call(
                    sys_prompt=extraction_sys_node,
                    user_prompt=extraction_usr_node.format(data=data)
                )
            )

            # Step 2: Generate Edges
            edge_step1 = salvage_json(
                llm_call(
                    sys_prompt=extraction_sys_edge,
                    user_prompt=extraction_usr_edge.format(data=data, node_data=node_step1)
                )
            )

            # Step 3: Add metadata and store in DB
            episode_uuid = str(uuid.uuid4())
            node_step2 = add_metadata_to_nodes(node_step1, 'Entity')
            await node_to_db(node_step2, db_name)

            edge_step2 = await add_metadata_to_edge(edge_step1, 'RELATES_TO', db_name, episode_uuid)
            await edge_to_db(edge_step2, db_name)

            # Step 4: Create episodic node & edges
            episode_node, episode_edges = episodic_generator(
                node_step2,
                edge_step2,
                f"chunk_{j}_article_{i}",
                data,
                'text_source',
                episode_uuid
            )

            await node_to_db(episode_node, db_name)
            await edge_to_db(episode_edges, db_name)

            # Step 5: Deduplication
            await advanced_deduplication_controller(db_name, 0.88)

            print(f"Processed chunk {j} for article_{i}")

        print(f"--- Finish parsing article_{i} ---")
        print("Waiting 20 seconds to respect rate limits...\n")
        await asyncio.sleep(20)
--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/kg_extractor/graph_ops.py ---
import uuid
import json
from datetime import datetime, timedelta, timezone
from .llm import generate_embedding, salvage_json, llm_call
from .db import execute_query, get_uuid_from_name
from typing import List, Dict, Any
from collections import defaultdict
import asyncio

# Add Metadata to Node and Edge
def add_metadata_to_nodes(json_data, label):
	if label not in ["Entity", "Episodic"]:
		raise ValueError("The label must be either 'Entity' or 'Episodic'.")

	if "nodes" not in json_data or not isinstance(json_data["nodes"], list):
		raise ValueError("The input JSON must contain a key 'nodes' with a list of edge objects.")

	updated_json_data = json_data.copy()
	nodes = updated_json_data.get("nodes", [])
	
	for node in nodes:
		if "entity_name" in node:
			node["name"] = node.pop("entity_name")
		node["uuid"] = str(uuid.uuid4())
		node["name_embedding"] = generate_embedding(str(node["name"]))
		node["created_at"] = datetime.now(tz=timezone(timedelta(hours=7))).isoformat()
		node["labels"] = label
		node["group_id"] = '_'
	
	return updated_json_data

async def add_metadata_to_edge(json_data, label, db_name, episode_uuid):
	if label not in ["MENTIONS", "RELATES_TO"]:
		raise ValueError("The label must be either 'MENTIONS' or 'RELATES_TO'.")

	if "edges" not in json_data or not isinstance(json_data["edges"], list):
		raise ValueError("The input JSON must contain a key 'edges' with a list of edge objects.")

	updated_json_data = {k: v[:] if isinstance(v, list) else v for k, v in json_data.items()}
  
	transformed_edges = []
	for edge in updated_json_data.get("edges", []):

		transformed_edge = {
		"uuid": str(uuid.uuid4()),
		"source_entity": await get_uuid_from_name(edge.get("source_entity"), db_name),
		"target_entity": await get_uuid_from_name(edge.get("target_entity"), db_name),
		"name": edge.get("relation_type"),
		"created_at": datetime.now(tz=timezone(timedelta(hours=7))).isoformat(),
		"group_id": "_",
		"labels": label,
		"episodes": [episode_uuid],
		"fact": edge.get("fact_text"),
		"fact_embedding": generate_embedding(edge.get("fact_text"))
		}
		transformed_edges.append(transformed_edge)
  
	updated_json_data["edges"] = transformed_edges
	
	return updated_json_data

def episodic_generator(node_json, edge_json, episodic_name, data, source_description, episode_uuid):
	
	edges_of_episode = []
	entity_edges = []
		
	for each in edge_json['edges']:
		entity_edges.append(each['uuid'])
	
	episode_node = {
		"uuid": episode_uuid,
  		"group_id": "_",
		"source_description": source_description,
		"source" : "text",
		"content": data,
		"labels": "Episodic",
		"entity_edges": entity_edges,
		"name": episodic_name,
		"created_at": datetime.now(tz=timezone(timedelta(hours=7))).isoformat(),
 		"valid_at":datetime.now(tz=timezone(timedelta(hours=7))).isoformat(),}
	
	for each in node_json['nodes']:
		episode_edge = {
			"uuid": str(uuid.uuid4()),
			"group_id": "_",
			"created_at": datetime.now(tz=timezone(timedelta(hours=7))).isoformat(),
			"labels": 'MENTIONS',
			"target_entity": each['uuid'],
			"source_entity": episode_uuid
		}
		edges_of_episode.append(episode_edge)

	final_episode_node = {"nodes": [episode_node]}
	final_episode_edges = {"edges": edges_of_episode}

	return final_episode_node, final_episode_edges


async def node_to_db(data, db_name):
	nodes = data.get('nodes')
	for node in nodes:
		node_labels = node['labels']
		properties = {key: value for key, value in node.items() if key != 'labels'}
		prop_list = []
		for key, value in properties.items():
			if key == 'name_embedding':
				prop_list.append(f"{key}: vecf32({value})")
			else:
				prop_list.append(f"{key}: {json.dumps(value)}")
		props_string = ", ".join(prop_list)
		query = f"CREATE (n:{node_labels} {{{props_string}}})"
		await execute_query(query, db_name)
  
async def edge_to_db(data, db_name):
	edges = data.get('edges')
	for edge in edges:
		source_uuid = edge.get('source_entity')
		target_uuid = edge.get('target_entity')
		relationship_type = edge.get('labels', 'RELATES_TO') # Default to RELATES_TO if not present

		# Proceed only if source and target UUIDs are present
		if source_uuid and target_uuid:
			# Create a dictionary of properties for the edge, excluding keys used for matching/typing
			edge_props_dict = {
				k: v for k, v in edge.items() 
				if k not in ['source_entity', 'target_entity', 'labels']
			}

			prop_list = []
			for key, value in edge_props_dict.items():
				# Check if the value is a list (assumed to be a vector for embedding)
				if key == 'fact_embedding':
					prop_list.append(f"{key}: vecf32({value})")
				else:
					# Use json.dumps for all other types for safe string formatting
					prop_list.append(f"{key}: {json.dumps(value)}")

			edge_props_str = ", ".join(prop_list)

			query = f"""
		MATCH (a), (b)
		WHERE a.uuid = {json.dumps(source_uuid)} AND b.uuid = {json.dumps(target_uuid)}
		CREATE (a)-[r:{relationship_type} {{{edge_props_str}}}]->(b)
		""".strip()
			await execute_query(query, db_name)


from typing import List, Dict, Any
from collections import defaultdict

async def find_duplicate_communities(db_name: str, similarity_threshold: float = 0.91):
	"""
	Finds communities of duplicate nodes using real vector similarity search.

	It fetches all pairs of nodes whose 'name_embedding' are closer than the
	threshold, then uses a client-side graph traversal to group these pairs
	into distinct communities of duplicates.

	Args:
		db_name: The name of the database.
		similarity_threshold: The cosine similarity score (0.0 to 1.0) above which
							  nodes are considered duplicates.

	Returns:
		A list of lists, where each inner list contains the UUIDs of a duplicate community.
	"""
	print(f"\n--- Step 4.1: Finding Duplicate Communities (Threshold > {similarity_threshold}) ---")
	
	query = """
	MATCH (n1:Entity), (n2:Entity)
	WHERE id(n1) < id(n2)
	WITH n1, n2, (2 - vec.cosineDistance(n1.name_embedding, n2.name_embedding))/2 AS similarity
	WHERE similarity > $threshold
	RETURN n1.uuid AS uuid1, n2.uuid AS uuid2
	"""
	
	result = await execute_query(query, db_name, threshold=similarity_threshold)

	if not result:
		print("No similar pairs found. The graph appears clean.")
		return []

	print(f"Found {len(result)} similar pairs. Building communities...")

	# Use a graph traversal algorithm (BFS/DFS) to find connected components (communities)
	adj = defaultdict(list)
	nodes_in_pairs = set()
	for record in result:
		u, v = record["uuid1"], record["uuid2"]
		adj[u].append(v)
		adj[v].append(u)
		nodes_in_pairs.add(u)
		nodes_in_pairs.add(v)

	communities = []
	visited = set()
	for node_uuid in nodes_in_pairs:
		if node_uuid not in visited:
			community = []
			q = [node_uuid]
			visited.add(node_uuid)
			head = 0
			while head < len(q):
				current_node = q[head]
				head += 1
				community.append(current_node)
				for neighbor in adj[current_node]:
					if neighbor not in visited:
						visited.add(neighbor)
						q.append(neighbor)
			communities.append(community)

	print(f"Grouped pairs into {len(communities)} distinct duplicate communities.")
	return communities


async def select_canonical_node(db_name: str, community_uuids: List[str]) -> str:
	"""
	Selects the best node from a community to be the canonical (surviving) node.
	It scores nodes based on relationship count (degree) and property completeness,
	using the creation date as a tie-breaker.

	Args:
		db_name: The name of the database.
		community_uuids: A list of UUIDs in the duplicate community.

	Returns:
		The UUID of the selected canonical node.
	"""
	print(f"  - Selecting canonical node from community of size {len(community_uuids)}...")
	
	# This query fetches metrics for each node in the community to calculate a "survivor score".
	# Degree (relationship count) is a great proxy for importance.
	query = """
	UNWIND $uuids AS uuid
	MATCH (n:Entity {uuid: uuid})
	OPTIONAL MATCH (n)-[r]-()
	WITH n, count(r) AS degree
	RETURN n.uuid AS uuid,
		   n.created_at AS created_at,
		   size(n.summary) AS summary_length,
		   degree
	"""
	
	results = await execute_query(query, db_name, uuids=community_uuids)
	
	if not results:
		raise ValueError(f"Query for community {community_uuids} returned no results.")
	
	best_node_uuid = None
	max_score = -1.0
	best_created_at = datetime.max
	
	WEIGHTS = {
		'degree': 10.0,           # Each relationship is highly valuable.
		'summary_length': 0.08,   # Each character in the summary adds a small amount to the score.
	}

	for record in results:
		degree_score = record["degree"] * WEIGHTS['degree']
		summary_score = (record["summary_length"] or 0) * WEIGHTS['summary_length']

		# The total score is the sum of all weighted components
		score = degree_score + summary_score

		uuid = record["uuid"]
		created_at = record["created_at"]

		# Tie-breaking logic:
		# 1. Higher score wins.
		# 2. If scores are identical, the older node (earlier created_at) wins.
		if score > max_score or (score == max_score and created_at < best_created_at):
			max_score = score
			best_node_uuid = uuid
			best_created_at = created_at

	return best_node_uuid

async def find_similar_edge_communities(db_name: str, canonical_uuid: str, similarity_threshold: float = 0.88) -> List[List[int]]:
	"""
	Finds communities of semantically similar edges for a given node.
	
	This function fetches all outgoing edges from the canonical node, compares their
	`fact_embedding` property, and groups highly similar edges into communities.

	Args:
		db_name: The name of the database.
		canonical_uuid: The UUID of the node whose edges are to be deduplicated.
		similarity_threshold: The cosine similarity score above which edges are considered duplicates.

	Returns:
		A list of lists, where each inner list contains the database IDs of a duplicate edge community.
	"""
	print(f"  - Finding similar edge communities for node {canonical_uuid[:8]} (Threshold > {similarity_threshold})...")
	
	# This query finds pairs of similar outgoing edges from the canonical node.
	query = """
	MATCH (canonical:Entity {uuid: $uuid})-[r1]->()
	MATCH (canonical)-[r2]->()
	WHERE id(r1) < id(r2) AND r1.fact_embedding IS NOT NULL AND r2.fact_embedding IS NOT NULL

	WITH r1, r2, (2 - vec.cosineDistance(r1.fact_embedding, r2.fact_embedding))/2 AS similarity
	WHERE similarity > $threshold

	RETURN id(r1) AS id1, id(r2) AS id2
	"""
	
	results = await execute_query(query, database=db_name, uuid=canonical_uuid, threshold=similarity_threshold)

	if not results:
		print("    - No similar edge pairs found.")
		return []

	print(f"    - Found {len(results)} similar edge pairs. Building communities...")

	# Build communities from pairs using a graph traversal (same logic as for nodes)
	adj = defaultdict(list)
	edges_in_pairs = set()
	for record in results:
		u, v = record["id1"], record["id2"]
		adj[u].append(v)
		adj[v].append(u)
		edges_in_pairs.add(u)
		edges_in_pairs.add(v)

	communities = []
	visited = set()
	for edge_id in edges_in_pairs:
		if edge_id not in visited:
			community = []
			q = [edge_id]
			visited.add(edge_id)
			head = 0
			while head < len(q):
				current_edge = q[head]
				head += 1
				community.append(current_edge)
				for neighbor in adj[current_edge]:
					if neighbor not in visited:
						visited.add(neighbor)
						q.append(neighbor)
			communities.append(community)

	print(f"    - Grouped into {len(communities)} distinct duplicate edge communities.")
	return communities

async def merge_edge_community(db_name: str, edge_community_ids: List[int]):
	"""
	Merges a community of duplicate edges into a single, summarized edge.
	"""
	if len(edge_community_ids) < 2:
		return

	print(f"    - Merging edge community of size {len(edge_community_ids)}...")

	# 1. Fetch data for all edges in the community
	query_fetch_edges = """
	UNWIND $ids AS edge_id
	MATCH ()-[r]-() WHERE id(r) = edge_id
	RETURN id(r) AS id, r.fact AS fact, r.episodes AS episodes, r.created_at AS created_at
	ORDER BY r.created_at ASC
	"""
	edge_data_list = await execute_query(query_fetch_edges, database=db_name, ids=edge_community_ids)

	if not edge_data_list:
		print("      - Warning: Could not fetch data for edge community. Skipping.")
		return
		
	# 2. Select canonical edge (the oldest), and gather data for merge
	canonical_edge = edge_data_list[0]
	canonical_edge_id = canonical_edge['id']
	duplicate_edge_ids = [edge['id'] for edge in edge_data_list[1:]]

	facts_to_merge = [edge['fact'] for edge in edge_data_list if edge.get('fact')]
	
	# 3. Use LLM to synthesize a new, better fact
	synthesized_fact = canonical_edge.get('fact', '')
	if len(facts_to_merge) > 1:
		print("      - Synthesizing new edge fact with LLM...")
		try:
			llm_response = salvage_json(llm_call(
				sys_prompt="You are an expert graph data analyst. Your task is to merge multiple 'fact' descriptions from duplicate relationships into one definitive, consolidated sentence.",
				user_prompt=f"""The following facts all describe a similar relationship. Please merge them into concise, comprehensive, and clear short paragraph, retain all the key point and facts.
FACTS TO MERGE:
- {" - ".join(facts_to_merge)}

Return a JSON object with a single key: "synthesized_fact".
"""
			))
			if llm_response and 'synthesized_fact' in llm_response:
				synthesized_fact = llm_response['synthesized_fact']
				print("      - LLM synthesis of fact successful.")
		except Exception as e:
			print(f"      - LLM synthesis failed, will use fact from the oldest edge. Error: {e}")
			
	# 4. Generate new embedding and merge properties
	new_embedding = generate_embedding(synthesized_fact)
	embedding_str = str(new_embedding)[1:-1]
	
	# Merge 'episodes' by creating a unique set
	all_episodes = set()
	for edge in edge_data_list:
		if edge.get('episodes'):
			all_episodes.update(edge['episodes'])
	merged_episodes = list(all_episodes)

	# 5. Perform the merge and delete in a single transaction
	try:
		# First, verify the canonical edge still exists
		verify_query = """
		MATCH ()-[r]-() WHERE id(r) = $canonical_id
		RETURN count(r) as exists
		"""
		verify_result = await execute_query(verify_query, db_name, canonical_id=canonical_edge_id)
		
		if not verify_result or verify_result[0]['exists'] == 0:
			print(f"      - Warning: Canonical edge {canonical_edge_id} no longer exists")
			return

		# Update canonical edge
		query_update = f"""
		MATCH ()-[r]-() WHERE id(r) = $canonical_id
		SET r.fact = $new_fact,
			r.fact_embedding = vecf32([{embedding_str}]),
			r.episodes = $merged_episodes,
			r.updated_at = $now
		RETURN count(r) as updated
		"""
		
		update_result = await execute_query(query_update, db_name, 
										  canonical_id=canonical_edge_id,
										  new_fact=synthesized_fact,
										  merged_episodes=merged_episodes,
										  now=datetime.now(tz=timezone(timedelta(hours=7))).isoformat())
		
		if not update_result or update_result[0]['updated'] == 0:
			print(f"      - Warning: Failed to update canonical edge {canonical_edge_id}")
			return

		# Delete duplicate edges one by one with validation
		deleted_count = 0
		for dup_id in duplicate_edge_ids:
			try:
				delete_query = """
				MATCH ()-[r]-() WHERE id(r) = $edge_id
				DELETE r
				RETURN count(r) as deleted
				"""
				delete_result = await execute_query(delete_query, db_name, edge_id=dup_id)
				if delete_result and delete_result[0]['deleted'] > 0:
					deleted_count += 1
			except Exception as e:
				print(f"      - Warning: Could not delete edge {dup_id}: {e}")
		
		print(f"      - Updated 1 canonical edge, deleted {deleted_count} duplicate edges.")
		
	except Exception as e:
		print(f"      - Error during edge merge transaction: {e}")
		return


async def consolidate_edges_for_node(db_name: str, canonical_uuid: str):
	"""
	Orchestrates the new, advanced edge deduplication process for a single node.
	"""
	print(f"\n--- Step 4.4: Consolidating Edges for Node {canonical_uuid[:8]} ---")
	
	# Find communities of similar edges based on 'fact' similarity
	edge_communities = await find_similar_edge_communities(db_name, canonical_uuid)
	
	if not edge_communities:
		print("  - No semantic edge duplications found. Node is clean.")
		return
		
	# Merge each community into a single, summarized edge
	for community in edge_communities:
		await merge_edge_community(db_name, community)


async def merge_and_consolidate_nodes(db_name: str, canonical_uuid: str, duplicate_uuids: List[str]):
	"""
	Merges duplicate nodes into the canonical node, re-wires relationships,
	and then triggers the advanced edge consolidation.
	"""
	print(f"\n--- Step 4.3: Merging {len(duplicate_uuids)} nodes into {canonical_uuid[:8]} ---")
	
	# 1. Fetch node data for property merge
	query_fetch_data = "MATCH (n:Entity) WHERE n.uuid IN $uuids RETURN n.uuid AS uuid, n.summary AS summary, n.name AS name"
	all_uuids = [canonical_uuid] + duplicate_uuids
	print(all_uuids)
	results = await execute_query(query_fetch_data, database=db_name, uuids=all_uuids)
	node_data = {record["uuid"]: {"summary": record.get("summary"), "name": record.get("name")} for record in results}

	# 2. Use LLM to synthesize a new summary
	summaries_to_merge = [data['summary'] for data in node_data.values() if data and data.get('summary')]
	final_summary = node_data.get(canonical_uuid, {}).get('summary', '')

	if len(summaries_to_merge) > 1:
		print("  - Synthesizing new node summary with LLM...")
		try:
			llm_response = salvage_json(llm_call(
				sys_prompt="You are an expert knowledge graph editor. Your task is to synthesize multiple descriptions of the same entity into one definitive, high-quality summary.",
				user_prompt=f"""The following summaries all describe the entity '{node_data[canonical_uuid]['name']}'.  Please merge them into concise, comprehensive, clear, and factually accurate summary short. retain all the key point and facts.

SUMMARIES TO MERGE:
- {" - ".join(summaries_to_merge)}

Return a JSON object with a single key: "synthesized_summary".
"""
			))
			if llm_response and 'synthesized_summary' in llm_response:
				final_summary = llm_response['synthesized_summary']
				print("  - LLM synthesis successful.")
		except Exception as e:
			print(f"  - LLM synthesis failed, will use canonical's summary. Error: {e}")
			
	final_embedding = generate_embedding(final_summary)
	embedding_str = str(final_embedding)[1:-1]
	
	# 3. Rewire relationships
	query_fetch_rels = """
	UNWIND $duplicate_uuids AS dup_uuid
	MATCH (duplicate {uuid: dup_uuid})-[r]->(target) RETURN type(r) AS rel_type, properties(r) AS props, dup_uuid AS source_uuid, target.uuid AS target_uuid
	UNION
	UNWIND $duplicate_uuids AS dup_uuid
	MATCH (source)-[r]->(duplicate {uuid: dup_uuid}) RETURN type(r) AS rel_type, properties(r) AS props, source.uuid AS source_uuid, dup_uuid AS target_uuid
	"""
	rel_results = await execute_query(query_fetch_rels, database=db_name, duplicate_uuids=duplicate_uuids)
	
	rewired_count = 0

	if rel_results:
		for record in rel_results:
			rel_type = record["rel_type"]
			props = record["props"]
			source_uuid = record["source_uuid"]
			target_uuid = record["target_uuid"]
			
			new_source_uuid = canonical_uuid if source_uuid in duplicate_uuids else source_uuid
			new_target_uuid = canonical_uuid if target_uuid in duplicate_uuids else target_uuid
			if new_source_uuid == new_target_uuid:
				continue
			
			prop_list = []
			for key, value in props.items():
				if key == 'fact_embedding' and value is not None:
					# The value is already a list from the DB, str(value) gives '[0.1, ...]'
					prop_list.append(f"{key}: vecf32({str(value)})")
				else:
					# Use json.dumps for all other types for safe string formatting
					prop_list.append(f"{key}: {json.dumps(value)}")
			
			props_str = ", ".join(prop_list)

			# Create the new relationship with the correctly formatted properties
			query_rewire_rel = f"""
			MATCH (a:Entity {{uuid: $source}}), (b:Entity {{uuid: $target}})
			CREATE (a)-[r:`{rel_type}` {{{props_str}}}]->(b)
			"""
			
			await execute_query(query_rewire_rel, database=db_name, source=new_source_uuid, target=new_target_uuid)
			rewired_count += 1
	
	print(f"  - Successfully rewired {rewired_count} relationships.")


	# 4. Update canonical node and delete the old duplicates
	query_cleanup = f"""
	MATCH (canonical:Entity {{uuid: $canonical_uuid}})
	SET canonical.summary = $final_summary,
		canonical.name_embedding = vecf32([{embedding_str}])
	WITH canonical
	UNWIND $duplicate_uuids AS dup_uuid
	MATCH (duplicate:Entity {{uuid: dup_uuid}})
	DETACH DELETE duplicate
	"""
	await execute_query(query_cleanup, database=db_name, 
						canonical_uuid=canonical_uuid, 
						duplicate_uuids=duplicate_uuids, 
						final_summary=final_summary)
	
	print(f"  - Node merge complete. Canonical node {canonical_uuid[:8]} updated with new summary and embedding.")


async def advanced_deduplication_controller(db_name: str, node_threshold=0.91):
	"""
	Main controller to orchestrate the advanced deduplication and merge process.
	"""
	print("\n===== Starting Advanced Deduplication and Consolidation Process =====")
	
	# 1. Find and process duplicate NODE communities
	duplicate_node_communities = await find_duplicate_communities(db_name, node_threshold)

	if not duplicate_node_communities:
		print("\n===== Deduplication complete. No node communities found. =====")
		return

	for community in duplicate_node_communities:
		if len(community) < 2:
			continue
			
		print(f"\n--- Processing Node Community: {community} ---")
		try:
			# 2. Select the best node to be the survivor
			canonical_uuid = await select_canonical_node(db_name, community)
			duplicate_uuids = [uuid for uuid in community if uuid != canonical_uuid]
			
			# 3. Merge nodes and rewire relationships
			await merge_and_consolidate_nodes(db_name, canonical_uuid, duplicate_uuids)
			
			# 4. NEW: Run semantic edge consolidation on the canonical node
			await consolidate_edges_for_node(db_name, canonical_uuid)

		except Exception as e:
			print(f"Could not process community {community}. Error: {e}")

	print("\n===== Advanced deduplication and consolidation process complete. =====")
--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/kg_extractor/main.py ---
from pipeline import processing_node_edge
from input_text import text
import asyncio
from pipeline import advanced_deduplication_controller

# Changable text and database name
input = text
database = "aug-8-db-tech-doc"

# Add document to knowledge graph
asyncio.run(processing_node_edge(text, database))
--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/examples/run_extraction.py ---
from kg_extractor import extract_knowledge_graph
from kg_extractor.input_text import text

if __name__ == "__main__":
    db_name = "example_db"
    extract_knowledge_graph(text, db_name)

--- /Users/thubpham/knowledge_graph_ingestion/knowledge_graph_extractor/examples/example_notebook.ipynb ---
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# IMPORT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- Imports ---\n",
    "import os\n",
    "import re\n",
    "import json\n",
    "import uuid\n",
    "import asyncio\n",
    "from datetime import datetime\n",
    "from typing import Dict, List, Any\n",
    "\n",
    "# --- Dependencies ---\n",
    "# pip install python-dotenv google-generativeai falkordb\n",
    "from google import genai\n",
    "from google.genai import types\n",
    "from dotenv import load_dotenv\n",
    "from redis.asyncio import Redis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PROMPTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- PROMPTS ---\n",
    "PROMPT_TEMPLATES = {\n",
    "    \"one_shot_extraction\": {\n",
    "        \"system\": \"\"\"\n",
    "        You are an expert AI system for knowledge graph extraction. Your task is to analyze the provided text and extract all significant entities (nodes) and the factual relationships between them (edges) in a single pass.\n",
    "        You must follow these rules precisely:\n",
    "        1. IDENTIFY ENTITIES (Nodes): Identify all significant concepts or organizations.\n",
    "        2. ASSIGN TEMPORARY IDs: Assign a unique integer `temp_id` to each entity you find, starting from 0.\n",
    "        3. GENERATE SUMMARIES: For each entity, write a concise summary (under 50 words) based *only* on the information present in the text.\n",
    "        4. IDENTIFY RELATIONSHIPS (Edges): Identify direct, factual relationships between the entities. Represent each relationship as an edge connecting two entities using their `temp_id`. Relationship type can be chosen from a list of relationship in <RELATIONSHIP_TYPES></RELATIONSHIP_TYPES>, and must always be returned with an underscore (e.g., `related_to`).\n",
    "        5. EXTRACT FACT TEXT: For each edge, include the `fact_text` field, which should be the specific sentence or phrase from the source text that states the relationship.\n",
    "        6. EXTRACT TEMPORAL DATA: For each edge, identify `valid_at` and `invalid_at`. Use ISO 8601 format (e.g., `2025-08-05T00:00:00Z`). Use the provided `<REFERENCE_TIME>` to resolve relative dates. If no time is mentioned, both fields should be `null`.\n",
    "        7. FINAL OUTPUT: You MUST respond with a single, valid JSON object that strictly adheres to the schema below. Do not include any explanations or text outside of the JSON object. You MUST also return all of the parameters in the OUTPUT_JSON_SCHEMA\n",
    "        <OUTPUT_JSON_SCHEMA>\n",
    "        {{\n",
    "          \"candidate_subgraph\": {{\n",
    "            \"nodes\": [\n",
    "              {{\"temp_id\": \"integer\", \"entity_name\": \"string\", \"entity_type\": \"string\", \"summary\": \"string\"}}\n",
    "            ],\n",
    "            \"edges\": [\n",
    "              {{\"source_temp_id\": \"integer\", \"target_temp_id\": \"integer\", \"relation_type\": \"string\", \"fact_text\": \"string\", \"valid_at\": \"string or null\", \"invalid_at\": \"string or null\"}}\n",
    "            ]\n",
    "          }}\n",
    "        }}\n",
    "        </OUTPUT_JSON_SCHEMA>\n",
    "        \"\"\",\n",
    "        \"user\": \"\"\"\n",
    "        <ENTITY_TYPES>\n",
    "        [\"concept\", \"organization\", \"person\", \"location\", \"event\", \"object\"]\n",
    "        </ENTITY_TYPES>\n",
    "        <RELATIONSHIP_TYPES>\n",
    "        [\"mention\", \"related_to\"]\n",
    "        </RELATIONSHIP_TYPES>\n",
    "        <REFERENCE_TIME>\n",
    "        {reference_time}\n",
    "        </REFERENCE_TIME>\n",
    "        <TEXT_TO_ANALYZE>\n",
    "        {text_chunk}\n",
    "        </TEXT_TO_ANALYZE>\n",
    "        Generate the JSON output based on the rules and schema provided in the system prompt.\n",
    "        \"\"\"\n",
    "    },\n",
    "    \"holistic_resolution\": {\n",
    "        \"system\": \"\"\"\n",
    "        You are an AI data curator specializing in knowledge graph reconciliation. Your task is to analyze a `<CANDIDATE_SUBGRAPH>` and compare it against `<EXISTING_ENTITIES>` to determine duplications and contradictions.\n",
    "        Rules:\n",
    "        1. NODE DEDUPLICATION: A candidate is a duplicate of an existing node if they refer to the same real-world concept.\n",
    "        2. EDGE DEDUPLICATION: A candidate edge is a duplicate of an existing edge if it represents the exact same factual statement.\n",
    "        3. EDGE INVALIDATION: A candidate edge invalidates an existing edge if the new fact directly contradicts the old fact.\n",
    "        Your entire response must be a single, valid JSON object that adheres to the schema below.\n",
    "        <OUTPUT_JSON_SCHEMA>\n",
    "        {{\n",
    "          \"node_resolutions\": [\n",
    "            {{\"temp_id\": \"integer\", \"resolution\": \"string (The uuid of the existing node or 'NEW')\"}}\n",
    "          ],\n",
    "          \"edge_resolutions\": [\n",
    "            {{\"candidate_edge\": {{...}}, \"resolution\": \"string (The uuid of the existing edge or 'NEW')\"}}\n",
    "          ],\n",
    "          \"invalidated_edges\": [\n",
    "            {{\"uuid\": \"string (The uuid of the existing edge to invalidate)\", \"reason\": \"string\"}}\n",
    "          ]\n",
    "        }}\n",
    "        </OUTPUT_JSON_SCHEMA>\n",
    "        \"\"\",\n",
    "        \"user\": \"\"\"\n",
    "        Based on the provided data and the rules in the system prompt, generate the resolution JSON object.\n",
    "        <CANDIDATE_SUBGRAPH>\n",
    "        {candidate_subgraph}\n",
    "        </CANDIDATE_SUBGRAPH>\n",
    "        <EXISTING_NODES>\n",
    "        {existing_nodes}\n",
    "        </EXISTING_NODES>\n",
    "        <EXISTING_EDGES>\n",
    "        {existing_edges}\n",
    "        </EXISTING_EDGES>\n",
    "        \"\"\"\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CLASSES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class GeminiLLMClient:\n",
    "    \"\"\"A client to interact with the Google Gemini API.\"\"\"\n",
    "    def __init__(self, *args, **kwargs):\n",
    "        api_key = os.getenv('GEMINI_API_KEY')\n",
    "        self.client = genai.Client(api_key=api_key)\n",
    "\n",
    "    def _salvage_json(self, raw_output: str) -> Dict[str, Any] | None:\n",
    "        \"\"\"Robustly extracts a JSON object from a raw LLM output string.\"\"\"\n",
    "        if not raw_output: return None\n",
    "        \n",
    "        raw_output = re.sub(r\"^```json|^```|```$\", \"\", raw_output.strip(), flags=re.MULTILINE).strip()\n",
    "        \n",
    "        try:\n",
    "            return json.loads(raw_output)\n",
    "        except json.JSONDecodeError:\n",
    "            print(\"Warning: Initial JSON parse failed, attempting to find object within string.\")\n",
    "            match = re.search(r\"\\{.*\\}\", raw_output, re.DOTALL)\n",
    "            if match:\n",
    "                try:\n",
    "                    return json.loads(match.group(0))\n",
    "                except json.JSONDecodeError:\n",
    "                    print(\"Error: Could not parse JSON even after salvaging.\")\n",
    "                    return None\n",
    "        return None\n",
    "    \n",
    "    async def generate_json(self, system_prompt: str, user_prompt: str) -> Dict | None:\n",
    "        \"\"\"Makes an async call to the Gemini API and returns a parsed JSON object.\"\"\"\n",
    "        # full_prompt = f\"{system_prompt}\\n\\n{user_prompt}\"\n",
    "        try:\n",
    "            response = await self.client.aio.models.generate_content(\n",
    "                model='gemini-2.5-flash',\n",
    "                config=types.GenerateContentConfig(temperature=0.1,\n",
    "                                        top_p=0.9,\n",
    "                                        max_output_tokens=55000,\n",
    "                                        system_instruction=system_prompt,\n",
    "                                        thinking_config=types.ThinkingConfig(\n",
    "                                        thinking_budget=1024),),\n",
    "                contents=user_prompt)\n",
    "\n",
    "            raw_json = self._salvage_json(response.text)\n",
    "            if not raw_json:\n",
    "                print(f\"Error: Failed to salvage JSON from LLM response: {response.text}\")\n",
    "            return raw_json\n",
    "        except Exception as e:\n",
    "            print(f\"An error occurred during Gemini API call: {e}\")\n",
    "            return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "class FalkorDBClient:\n",
    "    \"\"\"A client to interact with a FalkorDB graph database.\"\"\"\n",
    "    def __init__(self, host, port, db_name):\n",
    "        self.db_client = Redis(host=host, port=port, decode_responses=True)\n",
    "        self.graph = self.db_client.graph(db_name)\n",
    "        # self.db = FalkorDB(host=host, port=port)\n",
    "        # self.graph = self.db.select_graph(db_name)\n",
    "        print(f\"FalkorDBClient connected to graph '{db_name}' at {host}:{port}.\")\n",
    "\n",
    "    async def _execute_query(self, query, params=None):\n",
    "        return await self.graph.query(query, params)\n",
    "\n",
    "    async def find_potential_duplicate_nodes(self, entity_names: List[str]) -> List[Dict]:\n",
    "        \"\"\"Finds existing nodes that might be duplicates based on name matching.\"\"\"\n",
    "        if not entity_names:\n",
    "            return []\n",
    "        # Use UNWIND for an efficient multi-name lookup\n",
    "        query = \"\"\"\n",
    "        UNWIND $names AS name\n",
    "        MATCH (n:Node)\n",
    "        WHERE toLower(n.entity_name) CONTAINS toLower(name)\n",
    "        RETURN n\n",
    "        \"\"\"\n",
    "        result = await self._execute_query(query, {\"names\": entity_names})\n",
    "        nodes = [record[0].properties for record in result.result_set]\n",
    "        print(f\"DB: Found {len(nodes)} potential duplicate nodes.\")\n",
    "        return nodes\n",
    "\n",
    "    async def find_potential_related_edges(self, node_uuids: List[str]) -> List[Dict]:\n",
    "        \"\"\"Finds all existing edges connected to a list of potentially duplicate nodes.\"\"\"\n",
    "        if not node_uuids:\n",
    "            return []\n",
    "        query = \"\"\"\n",
    "        UNWIND $uuids AS uuid\n",
    "        MATCH (n {uuid: uuid})-[r]-()\n",
    "        RETURN r\n",
    "        \"\"\"\n",
    "        result = await self._execute_query(query, {\"uuids\": node_uuids})\n",
    "        edges = [record[0].properties for record in result.result_set]\n",
    "        print(f\"DB: Found {len(edges)} potentially related edges.\")\n",
    "        return edges\n",
    "\n",
    "    async def integrate_graph_data(self, resolution_plan: Dict, candidate_subgraph: Dict):\n",
    "        \"\"\"Processes the full resolution plan to create/update nodes and edges.\"\"\"\n",
    "        # 1. Handle nodes and create a mapping from temp IDs to permanent UUIDs\n",
    "        temp_id_to_uuid_map = {}\n",
    "        candidate_nodes_map = {node['temp_id']: node for node in candidate_subgraph['nodes']}\n",
    "\n",
    "        for resolution in resolution_plan.get('node_resolutions', []):\n",
    "            temp_id = resolution['temp_id']\n",
    "            res_uuid = resolution['resolution']\n",
    "\n",
    "            if res_uuid == 'NEW':\n",
    "                new_uuid = str(uuid.uuid4())\n",
    "                node_data = candidate_nodes_map[temp_id]\n",
    "                params = {**node_data, \"uuid\": new_uuid, \"uuid_1\": new_uuid, \"name\": node_data['entity_name']}\n",
    "                await self._execute_query(\n",
    "                    # \"CREATE (n:Node $params)\", {\"params\": params}\n",
    "                    \"CREATE (n:Node) SET n = $params\", {\"params\": params} # NEW syntax: CREATE => CREATE and SET\n",
    "                )\n",
    "                temp_id_to_uuid_map[temp_id] = new_uuid\n",
    "                print(f\"DB: UPLOADED new node '{node_data['entity_name']}'.\")\n",
    "            else:\n",
    "                temp_id_to_uuid_map[temp_id] = res_uuid\n",
    "\n",
    "        # 2. Handle edges using the new mapping\n",
    "        for resolution in resolution_plan.get('edge_resolutions', []):\n",
    "            if resolution['resolution'] == 'NEW':\n",
    "                edge_data = resolution['candidate_edge']\n",
    "                source_uuid = temp_id_to_uuid_map[edge_data['source_temp_id']]\n",
    "                target_uuid = temp_id_to_uuid_map[edge_data['target_temp_id']]\n",
    "                print(f\"Edge Data: {edge_data}\")\n",
    "                \n",
    "                params = {\n",
    "                    \"uuid\": str(uuid.uuid4()),\n",
    "                    \"fact_text\": edge_data.get('fact_text', ''),\n",
    "                    \"valid_at\": edge_data.get('valid_at'),\n",
    "                    \"is_active\": True\n",
    "                }\n",
    "\n",
    "                # Remove None values from params to avoid setting them in the DB\n",
    "                params = {k: v for k, v in params.items() if v is not None}\n",
    "\n",
    "                # Try catch block to handle missing relation_type\n",
    "                try:\n",
    "                    relation_type = edge_data['relation_type']\n",
    "                except KeyError:\n",
    "                    if 'relation_text' in edge_data:\n",
    "                        relation_type = edge_data['relation_text']\n",
    "                        print(f\"Using fallback 'relation_text' as relation_type: {relation_type}\")\n",
    "                    else:\n",
    "                        print(f\"Edge missing both 'relation_type' and 'relation_text'. Skipping...\")\n",
    "                        continue  # Skip this edge if neither field is available\n",
    "                \n",
    "                query = f\"\"\"\n",
    "                MATCH (a:Node {{uuid: $source_uuid}}), (b:Node {{uuid: $target_uuid}})\n",
    "                CREATE (a)-[r:`{relation_type}`]->(b)\n",
    "                SET r = $params\n",
    "                \"\"\"\n",
    "                await self._execute_query(query, {\n",
    "                    \"source_uuid\": source_uuid, \n",
    "                    \"target_uuid\": target_uuid, \n",
    "                    \"params\": params\n",
    "                })\n",
    "                print(f\"DB: UPLOADED new edge '{relation_type}'.\")\n",
    "\n",
    "        # 3. Handle invalidations\n",
    "        for inv in resolution_plan.get('invalidated_edges', []):\n",
    "            edge_uuid = inv['uuid']\n",
    "            await self._execute_query(\n",
    "                \"MATCH ()-[r {uuid: $uuid}]->() SET r.is_active = false\", \n",
    "                {\"uuid\": edge_uuid}\n",
    "            )\n",
    "            print(f\"DB: INVALIDATED edge {edge_uuid[:8]}... due to: {inv['reason']}\")\n",
    "\n",
    "class KnowledgeGraphProcessor:\n",
    "    \"\"\"Orchestrates the entire KG building process for a text chunk.\"\"\"\n",
    "    def __init__(self, db_client: FalkorDBClient, llm_client: GeminiLLMClient):\n",
    "        self.db = db_client\n",
    "        self.llm = llm_client\n",
    "        print(\"KnowledgeGraphProcessor initialized.\")\n",
    "\n",
    "    async def add_episode(self, text_chunk: str):\n",
    "        \"\"\"Processes a new chunk of text and updates the knowledge graph.\"\"\"\n",
    "        print(f\"\\n===== Processing new episode... =====\\nText: '{text_chunk[:]}...'\")\n",
    "\n",
    "        # 1. Call 1: One-Shot Extraction\n",
    "        print(\"\\n--- Step 1: Kicking off Extraction Call ---\")\n",
    "        extraction_response = await self.llm.generate_json(\n",
    "            PROMPT_TEMPLATES[\"one_shot_extraction\"][\"system\"],\n",
    "            PROMPT_TEMPLATES[\"one_shot_extraction\"][\"user\"].format(\n",
    "                reference_time=datetime.utcnow().isoformat() + \"Z\",\n",
    "                text_chunk=text_chunk\n",
    "            )\n",
    "        )\n",
    "        if not extraction_response or \"candidate_subgraph\" not in extraction_response:\n",
    "            print(\"Extraction failed or returned empty. Concluding process.\")\n",
    "            return\n",
    "        \n",
    "        candidate_subgraph = extraction_response[\"candidate_subgraph\"]\n",
    "        if not candidate_subgraph.get('nodes'):\n",
    "            print(\"Extraction yielded no nodes. Concluding process.\")\n",
    "            return\n",
    "        print(\"LLM Response (Extraction) received and parsed.\")\n",
    "\n",
    "        # 2. Query DB for potential duplicates\n",
    "        node_names = [node['entity_name'] for node in candidate_subgraph['nodes']]\n",
    "        potential_nodes = await self.db.find_potential_duplicate_nodes(node_names)\n",
    "        potential_node_uuids = [node['uuid'] for node in potential_nodes]\n",
    "        potential_edges = await self.db.find_potential_related_edges(potential_node_uuids)\n",
    "\n",
    "        # 3. Call 2: Holistic Resolution\n",
    "        print(\"\\n--- Step 2: Kicking off Resolution Call ---\")\n",
    "        resolution_plan = await self.llm.generate_json(\n",
    "            PROMPT_TEMPLATES[\"holistic_resolution\"][\"system\"],\n",
    "            PROMPT_TEMPLATES[\"holistic_resolution\"][\"user\"].format(\n",
    "                candidate_subgraph=json.dumps(candidate_subgraph, indent=2),\n",
    "                existing_nodes=json.dumps(potential_nodes, indent=2),\n",
    "                existing_edges=json.dumps(potential_edges, indent=2)\n",
    "            )\n",
    "        )\n",
    "        if not resolution_plan:\n",
    "            print(\"Resolution call failed. Aborting integration.\")\n",
    "            return\n",
    "        print(\"LLM Response (Resolution) received and parsed.\")\n",
    "\n",
    "        # 4. Integrate results into DB\n",
    "        print(\"\\n--- Step 3: Integrating results into DB ---\")\n",
    "        await self.db.integrate_graph_data(resolution_plan, candidate_subgraph)\n",
    "        \n",
    "        print(\"===== Episode processing complete. =====\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MAIN"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PYTHON CHUNKING TEST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mock = [\n",
    "        {\n",
    "                \"article_1\" : \"\"\"La La Land is a 2016 American musical romantic comedy-drama film written and directed by Damien Chazelle. It stars Ryan Gosling and Emma Stone as a struggling jazz pianist and an aspiring actress who meet and fall in love while pursuing their dreams in Los Angeles. The supporting cast includes John Legend, Rosemarie DeWitt, Finn Wittrock, and J. K. Simmons.\n",
    "\n",
    "                Having been fond of musicals during his time as a drummer, Chazelle first conceptualized the film alongside Justin Hurwitz while attending Harvard University together. After moving to Los Angeles in 2010, Chazelle penned the script but did not find a studio willing to finance the production without changes to his design. After the success of his film Whiplash (2014), the project was picked up by Summit Entertainment. Miles Teller and Emma Watson were originally in talks to star, but after both dropped out, Gosling and Stone were cast. Filming took place in Los Angeles between August and September 2015, with the film's score composed by Hurwitz, who also wrote the film's songs with lyricists Benj Pasek and Justin Paul and the dance choreography by Mandy Moore.\n",
    "\n",
    "                La La Land premiered at the 73rd Venice International Film Festival on August 31, 2016, and was released theatrically in the United States on December 9, by Lionsgate. The film emerged as a major commercial success, grossing $472 million worldwide on a budget of $30 million, and received widespread critical acclaim, particularly for Chazelle's direction and screenplay, the performances of Gosling and Stone, the score, musical numbers, cinematography, visual style, costumes and production design. It went on to receive numerous accolades, including winning a record seven awards at the 74th Golden Globe Awards and received eleven nominations at the 70th British Academy Film Awards, winning five, including Best Film. The film also received a record-tying fourteen nominations at the 89th Academy Awards, winning in six categories including Best Director and Best Actress (Stone). In the former category, Chazelle became the youngest winner at age 32. It has since been regarded as one of the best films of the 2010s and the 21st century, and as one of the best musical and romantic films of all time.[a] As of February 2023, a stage musical adaptation is in the works.[14]\n",
    "\n",
    "                Plot\n",
    "                While stuck in Los Angeles traffic, Sebastian \"Seb\" Wilder has a moment of road rage directed at aspiring actress Mia Dolan. After a hard day at work, Mia's next audition goes awry because the casting director takes a phone call during an emotional scene. That night, her roommates take her to a lavish party in the Hollywood Hills, promising her that someone in the crowd could jump-start her career. After her car is towed, she walks home in disappointment.\n",
    "\n",
    "                During a gig at a restaurant, Seb slips into jazz improvisation despite the owner's warning to only play traditional Christmas pieces. Mia hears him playing as she passes by. Moved, she enters the restaurant and observes Seb being fired for his disobedience. Mia attempts to compliment him as he storms out, but he brushes by her. Months later, she runs into Seb at a party where he plays in a 1980s pop cover band. Mia requests that Seb play \"I Ran\" for her. After the gig, they walk to their cars and ‚Äì despite an obvious chemistry ‚Äì lament wasting a lovely night on each other.\n",
    "\n",
    "                Seb arrives at Mia's workplace, and she shows him around the Warner Bros. backlot, where she works as a barista, while expressing her passion for acting. He takes her to a jazz club, describing his passion for jazz and his desire to open his own club. Seb invites Mia to a screening of Rebel Without a Cause and she accepts, forgetting a date with her boyfriend. Bored with the latter date, she rushes to the theater and finds Seb as the film begins. When the screening is interrupted by a projector malfunction, Seb and Mia spend the rest of the evening together with a romantic visit to the Griffith Observatory.\n",
    "\n",
    "                After more failed auditions, Mia decides, with Seb's encouragement, to write a one-woman play. Seb begins to perform regularly at a jazz club, and the two of them eventually move in together. A former bandmate of Seb invites him to be the keyboardist in a new jazz fusion band, which will give him a steady income. Although dismayed by the band's pop style, Seb signs on after hearing Mia trying to convince her mother that he is working on his career. The band finds success, but Mia knows their music is not the type of music Seb wants to perform.\n",
    "\n",
    "                During the band's first tour, Seb and Mia argue: she accuses him of abandoning his dreams, while he claims that she liked him more when he was unsuccessful because it made her feel better about herself. Two weeks later, Seb misses Mia's play because of a photoshoot he had forgotten about. The play fails, very few people attend, and Mia overhears dismissive comments about her performance. Unable to forgive him for missing her play and their previous argument, Mia returns to her hometown of Boulder City, Nevada.\n",
    "\n",
    "                Seb receives a phone call from a prominent casting director who attended Mia's play, inviting her to audition for an upcoming film. Knowing that this could be her big break, he drives in a hurry to Boulder City and finds her house since he remembered that she lived across the street from the library, where she fell in love with acting. Seb persuades her to attend, and she reluctantly agrees to go.\n",
    "\n",
    "                During the audition the next day, Mia is asked to tell a story. In response, she sings about how her aunt, a one-time stage actress who eventually died from alcoholism, inspired her to chase her dreams. Confident the audition was a success, Seb encourages Mia to devote herself to acting. The two then recognize that they will always love each other despite what may come for their relationship.\n",
    "\n",
    "                Five years later, Mia is living a happy life as a successful actress and married to a different man, with whom she has a daughter. That night, the couple stumble upon a jazz bar. Recognizing the logo she had once designed, Mia realizes that Seb has opened his own jazz club. Seb notices Mia in the crowd and begins to play their love theme on the piano. The two imagine what their happy life together would have been had their relationship thrived along with their careers, then acknowledge each other with a silent exchange of smiles and go their separate ways.\n",
    "\n",
    "                Cast\n",
    "                Ryan Gosling as Sebastian \"Seb\" Wilder, a musician who wants to own his own jazz club\n",
    "                Emma Stone as Amelia \"Mia\" Dolan, an actress whose aunt inspired her to follow her dreams\n",
    "                John Legend as Keith, Seb's friend and musician who invites him to join his band\n",
    "                J. K. Simmons as Bill, the manager of the restaurant where Seb worked at before his firing\n",
    "                Rosemarie DeWitt as Laura Wilder, Seb's sister\n",
    "                Finn Wittrock as Greg, Mia's ex-boyfriend\n",
    "                Callie Hernandez as Tracy, one of Mia's roommates\n",
    "                Sonoya Mizuno as Caitlin, one of Mia's roommates\n",
    "                Jessica Rothe as Alexis, one of Mia's roommates\n",
    "                Tom Everett Scott as David\n",
    "                Amiee Conn as The Famous Actress\n",
    "                Anna Chazelle as Sarah\n",
    "                Josh Pence as Josh\n",
    "                Meagen Fay as Mia's mother\n",
    "                Damon Gupton as Harry\n",
    "                Jason Fuchs as Carlo\n",
    "                Marius de Vries as Clyde\n",
    "                Olivia Hamilton as Bree\n",
    "                Hemky Madera as Jimmy\n",
    "                Valarie Rae Miller as Amy Brandt\n",
    "                Miles Anderson as Alistair the photographer\n",
    "                Khirye Tyler as Seb's Pianist\n",
    "                Production\n",
    "                Pre-production\n",
    "\n",
    "                Chazelle first conceived the idea for the film while attending Harvard University with Justin Hurwitz, the film's composer.\n",
    "                As a drummer, Chazelle has a predilection for musical films.[15] He wrote the screenplay for La La Land in 2010, when the film industry seemed out of reach for him.[16] His idea was \"to take the old musical but ground it in real life where things don't always exactly work out,\"[15] and to salute creative people who move to Los Angeles to chase their dreams.[17] He conceived the film when he was a student at Harvard University with his classmate Justin Hurwitz. The two explored the concept in their senior thesis through a low-budget musical about a Boston jazz musician, Guy and Madeline on a Park Bench.[18][19] Chazelle was moved by the tradition of 1920s \"city symphony\" films, such as Manhatta (1921) and Man with a Movie Camera (1929), that paid tribute to cities.[20] After graduating, both moved to Los Angeles in 2010 and continued writing the script, but made a few modifications, such as altering the location to Los Angeles instead of Boston.[18]\n",
    "\n",
    "                Rather than trying to match L.A. to the charms of Paris or San Francisco, he focused on the qualities that make the city distinctive: the traffic, the sprawl, and the skylines.[20] The style and tone of the film were inspired by Jacques Demy's The Umbrellas of Cherbourg and The Young Girls of Rochefort, especially the latter, which was more dance and jazz-oriented.[21] The film also makes visual allusions to Hollywood classics such as Broadway Melody of 1940, Singin' in the Rain, The Band Wagon, and An American in Paris.[22] About An American in Paris, Chazelle commented: \"That's a movie that we just pillaged. It's an awesome example of how daring some of those old musicals really were.\"[23] It shares some character development and themes with Chazelle's previous musical work, Whiplash; Chazelle said:\n",
    "\n",
    "                \"They're both about the struggle of being an artist and reconciling your dreams with the need to be human. La La Land is just much less angry about it.\"[24]\n",
    "                He said that both films reflect his own experiences as a filmmaker working his way up the Hollywood ladder.[17] La La Land in particular is inspired by his experience of moving from the East Coast with preconceived notions of what L.A. would be like, \"that it was all just strip malls and freeways\".[20]\n",
    "\n",
    "                Chazelle was unable to produce the film for years as no studio was willing to finance an original contemporary musical with no familiar songs. It is also a jazz musical, which The Hollywood Reporter called an \"extinct genre\". He believed that since he and Hurwitz were unknown at that time, it might have made financiers dubious about the project's potential.[25][18] Gosling's character Sebastian holds a view of the jazz of the past being superior. According to an article by Anthony Carew, Chazelle wrote this character trait as a reflection of \"[his] own relationship with the past and with jazz, too\".[26] Chazelle found producers through friends who introduced him to Fred Berger and Jordan Horowitz. With the two producers on board, the script went to Focus Features at a budget of around $1 million. The studio demanded alterations: the male lead was asked to be changed from a jazz pianist to a rock musician, the complicated opening number had to be altered, and the story's bittersweet ending needed to be dropped. Chazelle scrapped the project and moved on.[18]\n",
    "\n",
    "                Chazelle later wrote Whiplash, which was an easier concept to sell and a less risky investment.[27] After Whiplash was well received by critics upon its premiere at the 2014 Sundance Film Festival in January, Chazelle continued his efforts to bring La La Land to the big screen.[18] A year later, when Whiplash earned five Oscar nominations at the 87th Academy Awards, including Best Picture, and grossed nearly $50 million worldwide off a $3.3 million production budget, Chazelle and his project began to attract attention from studios.[25]\n",
    "\n",
    "                Five years after Chazelle wrote the script,[28] Summit Entertainment and Black Label Media, along with producer Marc Platt, agreed to invest in La La Land and distribute it. They had been impressed by the critical and commercial success of Whiplash.[17] Lionsgate's Patrick Wachsberger, who previously had worked on the Step Up franchise, pushed Chazelle to increase the film's budget since he felt high-quality musicals could not be made cheaply.[29]\n",
    "\n",
    "                Casting\n",
    "                Miles Teller and Emma Watson were originally slated to star in the leading roles. Watson dropped out to honor her commitments to Disney's live-action Beauty and the Beast remake (2017), while Teller exited via long contract negotiations.[16] Coincidentally, Gosling turned down the Beast role in Beauty and the Beast in favor of La La Land.[30] Chazelle subsequently decided to make his characters somewhat older, with experience in struggling to make their dreams, rather than younger newcomers just arriving in Los Angeles.[18]\n",
    "\n",
    "                Emma Stone plays Mia, an aspiring actress in Los Angeles.[25] Stone has loved musicals since she saw Les Mis√©rables when she was eight years old. She said \"bursting into song has always been a real dream of mine\", and her favorite film is the 1931 Charlie Chaplin romantic comedy City Lights.[25][15] She studied pom dancing as a child, with a year of ballet.[25] She moved to Hollywood with her mother at age fifteen to pursue a career, and struggled constantly to get an audition during her first year. When she did, she often was turned away after singing or saying just one line.[31] Stone drew from her own experiences for her character of Mia, and some were added into the film.[24]\n",
    "\n",
    "\n",
    "                Ryan Gosling learned tap dancing and piano for his role.\n",
    "                She met Chazelle in 2014 while she was making her Broadway debut in Cabaret. Chazelle and Hurwitz saw her perform on a night when the actress had a cold.[25][32] She met with Chazelle at Brooklyn Diner in New York City, where the director outlined his vision for the planned film.[33] Stone gained confidence from performing in Cabaret to handle the demands of the film.[33] In preparation for her role, Stone watched some of the musical movies that inspired Chazelle, including The Umbrellas of Cherbourg and Fred Astaire and Ginger Rogers collaborations.[28] Stone accepted the offer because Chazelle was so passionate about the project.[33]\n",
    "\n",
    "                Ryan Gosling plays Sebastian, a jazz pianist.[25] Like Stone, Gosling drew from his own experiences as an aspiring artist. One incident was used for Mia. Gosling was performing a crying scene in an audition and the casting director took a phone call during it, talking about her lunch plans while he was emoting.[25][31][34] Chazelle met with Gosling when he was about to begin filming for The Big Short.[18]\n",
    "\n",
    "                Chazelle cast Gosling and Stone immediately after Summit bought the film.[17] He stated that the duo \"feel like the closest thing that we have right now to an old Hollywood couple\" as akin to Spencer Tracy and Katharine Hepburn, Fred Astaire and Ginger Rogers, Humphrey Bogart and Lauren Bacall, and Myrna Loy and William Powell.[24] The film marked the third collaboration between Gosling and Stone, following Crazy, Stupid, Love (2011) and Gangster Squad (2013).[35] Chazelle asked the two about their audition disasters when they were both trying to make it.[31] Both learned to sing and dance for the film's six original tunes.[18]\n",
    "\n",
    "                The rest of the cast ‚Äì J. K. Simmons, Sonoya Mizuno, Jessica Rothe, Callie Hernandez, Finn Wittrock, Rosemarie DeWitt, John Legend, Jason Fuchs, Meagen Fay ‚Äì were announced between July and August 2015.[36][37][38][39][40][41]\n",
    "\n",
    "                The film was choreographed by Mandy Moore. Rehearsals took place at a production office in Atwater Village, Los Angeles over the span of three to four months, beginning in May 2015. Gosling practiced piano in one room, Stone worked with Moore in another, and costume designer Mary Zophres had her own corner of the complex.[25][18] Gosling, with no previous experience, had to learn how to play the piano; no hand models were used.[42] Moore emphasized working on emotion rather than technique, which Stone said was key when they filmed the \"A Lovely Night\" scene (searching for the parked car).[25] To help his cast and crew get their creative mode flowing, Chazelle held screenings on the soundstages every Friday night of classical films that had inspired him for the film, including The Umbrellas of Cherbourg, Singin' in the Rain, Top Hat, and Boogie Nights.[18]\n",
    "\n",
    "                Filming\n",
    "                From the beginning, Chazelle wanted the film's musical numbers to be filmed \"head to toe\" and performed in a single take, like those of the 1930s works of Fred Astaire and Ginger Rogers.[33] He also wanted the film to emulate the widescreen, CinemaScope look of 1950s musicals such as It's Always Fair Weather. Consequently, the movie was shot on celluloid 4-perf Super 35mm film (not digitally) with Panavision anamorphic lenses in CinemaScope's 2.55:1 aspect ratio, but not in true CinemaScope as that technology is no longer available.[43][44][45][46]\n",
    "\n",
    "                Chazelle wanted Los Angeles to be the primary setting for his film, commenting that \"there is something very poetic about the city I think, about a city that is built by people with these unrealistic dreams and people who kind of just put it all on the line for that.\"[15] Principal photography on the film officially began in the city on August 10, 2015,[47] and filming took place in more than 60 locations both in and near Los Angeles, including the Angels Flight trolley in downtown, houses in the Hollywood Hills, the Colorado Street Bridge, the Rialto Theatre in South Pasadena, the Warner Bros. studio lot, the Grand Central Market, Hermosa Beach's Lighthouse Caf√©, Griffith Observatory, Griffith Park, Chateau Marmont, the Watts Towers, and Long Beach,[48] with many scenes shot in one take. It took 40 days to complete shooting, finishing in mid-September 2015.[18][49][50]\n",
    "\n",
    "                The opening pre-credits sequence was the first to be shot,[18] and was filmed on a closed-off portion of two carpool direct connector ramps of the Judge Harry Pregerson Interchange, connecting the I-105 Carpool Lane to the I-110 Express Lanes, leading to Downtown Los Angeles. It was filmed in a span of two days, and required more than 100 dancers.[17][51] For this particular scene, Chazelle wanted to give a sense of how vast the city is.[20] The scene was originally planned for a stretch of ground-level highway, until Chazelle decided to shoot it in the 105‚Äì110 interchange, which arcs 100 feet (30 m) in the air. Production designer David Wasco said, \"I thought somebody was going to fall off and get killed.\" Not every portion of the highway was blocked.[18] Chazelle compared the scene to the yellow brick road leading to the Emerald City in The Wizard of Oz (1939).[18]\n",
    "\n",
    "\n",
    "                The Angels Flight (pictured), which was shut down for about four years, including at the time of the filming, was re-opened for a single day exclusively for the film to shoot a scene.\n",
    "                Chazelle scouted for \"old L.A.\" locations that were in ruins, or were perhaps razed. One such example was the use of the Angels Flight trolley, built in 1901. The funicular had been closed in 2013 after a derailment. Attempts were made to repair and re-open the railway, but to no avail. However, the production team was able to secure permission to use it for a day. Chazelle and his crew then arranged to have it run for shooting (it was re-opened to the public in 2017).[20] Mia works at a coffee shop on the Warner Bros. studio lot; Chazelle considered studio lots to be \"monuments\" of Hollywood. Production designer Wasco created numerous fake old film posters. Chazelle occasionally created names for them, deciding to use the title of his first feature, Guy and Madeline on a Park Bench (2009) for one poster, which reimagines it as a 1930s musical.[20]\n",
    "\n",
    "                External videos\n",
    "                video icon The full \"A Lovely Night\" scene via YouTube\n",
    "                The now-iconic[52][53][54] six-minute-long \"A Lovely Night\" scene (searching for the parked car) had to be completed during the brief \"magic hour\" moment at sunset. It took eight takes and two days to shoot it.[25] When Ryan Gosling and Emma Stone finally nailed it, \"everybody just exploded,\" Stone said.[33] Since Gosling and Stone were not primarily dancers, the two made a number of mistakes, especially during long uninterrupted single-take musical numbers. However, Chazelle was very sympathetic towards them, understanding their lack of experience and not minding their errors.[28] While shooting Sebastian and Mia's first dance together, Stone stumbled over the back of a bench, but picked right up and kept on going with the scene.[28] In 2024, Gosling reflected on the filming of this scene, wishing he could re-film it to correct the positioning of his hand in the famous still frame from the sequence that was used throughout the film's marketing, saying that \"It just killed the energy that way ... It was all leading to what? A lazy ... I call it La La Hand.\"[53]\n",
    "\n",
    "                Chazelle said that the romantic dinner that Sebastian prepared for Mia was \"one of the scenes that I think I wrote and rewrote and rewrote more than any other in the script\".[55] Gosling and Stone also helped create the dialogue of the scene to get it to be one of the more realistic scenes in a film filled with fantasy and fantastical elements.[55]\n",
    "\n",
    "                Chazelle spent nearly a year editing the film with editor Tom Cross, as the two were primarily concerned with getting the tone right.[18]\n",
    "\n",
    "                Soundtrack\n",
    "\n",
    "                Main article: La La Land (soundtrack)\n",
    "                The songs and score for La La Land were composed and orchestrated by Justin Hurwitz, Chazelle's Harvard University classmate, who also worked on his two prior films.[25] The lyrics were written by Pasek and Paul,[33] except for \"Start a Fire\", which was written by John Legend, Hurwitz, Marius de Vries and Angelique Cinelu.[56] A soundtrack album was released on December 9, 2016, by Interscope Records, featuring selections from Hurwitz's score and songs performed by the cast.[56]\n",
    "\n",
    "                The film's opening number, \"Another Day of Sun\", shot as a single tracking shot on an L.A. freeway, received praise for its choreography. The songs \"City of Stars\" and \"Audition (The Fools Who Dream)\" received numerous awards.\n",
    "\n",
    "                Release\n",
    "                La La Land had its world premiere as the Venice Film Festival's opening night film on August 31, 2016.[57][58] The film also screened at the Telluride Film Festival,[59] the Toronto International Film Festival, beginning September 12, 2016,[60] the BFI London Film Festival,[61] the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016.[62]\n",
    "\n",
    "                La La Land was originally set for a July 15, 2016, release;[63] however, in March 2016, it was announced the film would be given a limited release starting December 2, 2016, before expanding on December 16, 2016.[64] Chazelle stated that the change was because he felt that the release date was not right for the context of the film, and because he wanted to have a slow rollout beginning with the early fall film festivals.[24] The limited release was later moved back a week to December 9, 2016, with the wide release still being planned for December 16, 2016.[65] Lionsgate opened the film in five locations on December 9, 2016, and expanded it to about 200 theaters on December 16, 2016, before going nationwide on December 25, 2016. The film went fully wide on January 6, 2017,[50] with a release into select IMAX theaters a week later.[66]\n",
    "\n",
    "                La La Land was released in the United Kingdom on January 12, 2017.[67] The film was released in the Netherlands on December 22, 2016, and in Australia on December 26, with the rest of the territories planned for a release from mid-January 2017.[68]\n",
    "\n",
    "                Home media\n",
    "                Lionsgate released La La Land on Digital HD on April 11, 2017, and Blu-ray, Ultra HD Blu-ray and DVD on April 25, 2017.[69]\n",
    "\n",
    "                Reception\n",
    "                Box office\n",
    "                La La Land grossed $151.1 million in the United States and Canada, and $320.9 million in other territories, for a worldwide total of $472 million, against a production budget of $30 million.[70] Deadline Hollywood calculated the net profit of the film to be $68.25 million, when factoring together all expenses and revenues for the film, making it one of the top 20 most profitable releases of 2016.[71] This is Ryan Gosling's second highest-grossing film, as it was displaced by Barbie in 2023.[72]\n",
    "\n",
    "                La La Land began its theatrical release with a limited release in five theaters in Los Angeles and New York City on December 9. It made $881,107 in its opening weekend, giving the film a per-theater average of $176,221, the best average of the year.[73][74][75] In its second week of limited release, the film expanded to 200 theaters and grossed $4.1 million, finishing seventh at the box-office. It was an increase of 366% from the previous week and good for a per-theater of $20,510.[76] The following week, the film had its wide expansion to 734 theaters, grossing $5.8 million for the weekend (including $4 million on Christmas Day and $9.2 million over the four days), and finishing eighth at the box-office.[77] On January 6, 2017, the weekend of the Golden Globes, the film expanded to 1,515 theaters and grossed $10 million over the weekend, finishing fifth at the box-office.[78] In its sixth week of release, the film grossed $14.5 million (a total of $16.9 million over the four-day weekend for Martin Luther King Jr. Day), finishing second at the box-office behind Hidden Figures.[79] After receiving its 14 Oscar nominations, the film expanded to 3,136 theaters on January 27, 2017 (an increase of 1,271 from the week before) and grossed $12.1 million (up 43% from its previous week's $8.4 million).[80] During the weekend of February 24‚Äì26 (the weekend of the Academy Awards) the film grossed $4.6 million, exactly the same amount it grossed the previous weekend.[81] The next week, following its six Oscar wins, the film grossed $3 million.[82]\n",
    "\n",
    "                Critical response\n",
    "\n",
    "                Ryan Gosling and Emma Stone garnered widespread critical acclaim for their performances, earning them Academy Award nominations for Best Actor and Best Actress, with Stone winning.\n",
    "                La La Land received widespread critical acclaim, with high praise directed towards Chazelle's direction and screenplay, cinematography, music, the performances of Gosling and Stone and their chemistry.[83][84][85][86] The review aggregator Rotten Tomatoes gives the film an approval rating of 91% based on 470 reviews, with an average rating of 8.7/10. The website's critical consensus reads, \"La La Land breathes new life into a bygone genre with thrillingly assured direction, powerful performances, and an irresistible excess of heart.\"[87] On Metacritic, the film has a weighted average score of 94 out of 100, based on 54 critics, indicating \"universal acclaim\".[88] It was the third- and sixth-highest scoring film released in 2016 on each respective site.[89][90] Audiences polled by CinemaScore gave the film an average grade of \"A‚àí\" on an A+ to F scale,[91] while PostTrak reported audiences gave an 81% overall positive score and a 93% \"definite recommend\".[79]\n",
    "\n",
    "                Peter Travers of Rolling Stone gave La La Land four stars out of four, describing it as \"a hot miracle\" and complimenting its musical numbers, particularly the opening scene. He went on to name it his favorite movie of the year.[92] Michael Phillips of the Chicago Tribune similarly lauded the opening sequence, in addition to highlighting Stone's performance, stating \"she's reason enough to see La La Land.\" Despite being less enthusiastic about Gosling's dancing and the film's middle section, Phillips nevertheless gave the film four out of four stars, declaring it \"the year's most seriously pleasurable entertainment\".[93] A.O. Scott of The New York Times praised the film, stating that it \"succeeds both as a fizzy fantasy and a hard-headed fable, a romantic comedy and a showbiz melodrama, a work of sublime artifice and touching authenticity\".[94] Peter Bradshaw of The Guardian awarded the film five out of five stars, describing it as \"a sun-drenched musical masterpiece.\"[95] Tom Charity of Sight & Sound stated, \"Chazelle has crafted that rare thing, a genuinely romantic comedy, and as well, a rhapsody in blue, red, yellow and green.\"[96] Writing for The Boston Globe, Ty Burr summarized the effectiveness of the film to relate to audiences stating: \"...the movie traffics in the bittersweet happiness of treasuring things that are vanishing, like the unrealized future imagined in the climactic dance number, or those inky, star-filled dance floors that go on forever in old movies, or Hollywood musicals themselves. Or jazz: Sebastian has an early moment at a nightclub where he passionately sticks up for the music he loves. 'It's dying on the vine,' he says. 'And the world says 'Let it die. It had its time.' Well, not on my watch.' In that scene, he speaks for the director. By the end of La La Land, he's speaking for all of us.\"[97] Filmmakers Jonathan Demme, Jay Duplass, Paul Feig, Chad Hartigan, Chris Kelly, Daniel Kwan, Rebecca Miller, Reed Morano, Christopher Nolan, James Ponsoldt and Nanfu Wang also praised the film.[98][99]\n",
    "\n",
    "                La La Land's competition for awards and critical attention with the African-American film Moonlight shortly after the election of Donald Trump sharpened the attention on questions of racial sensitivity and unexamined white privilege in the characters of film. While accolades from audiences and critics grew, the film received backlash for what some considered a disproportional amount of praise.[100] Saturday Night Live lampooned the fervor over the film with a sketch about a man arrested for thinking it was \"decent... but also boring.\"[101] The film was criticized by some for its treatment of race and jazz. Kelly Lawler of USA Today noted that Gosling's character has been referred to as a \"white savior\" by some critics, for \"his quest (and eventual success) to save the traditionally black musical genre from extinction, seemingly the only person who can accomplish such a goal.\"[102] The sentiment was also expressed by Ruby Lott-Lavigna of Wired,[103] Anna Silman of New York,[104] and Ira Madison III of MTV News.[105] Rex Reed of the New York Observer also took aim at the film's intention to emulate the MGM musical classics, writing that \"the old-fashioned screenplay, by the ambitious writer-director Damien Chazelle, reeks of mothballs\", and that \"the movie sags badly in the middle, like a worn-out mattress that needs new springs\".[106] The South China Morning Post remarked that aside from its racial treatment of jazz, much of the public criticism was towards the film being \"a little dull\", the two leads' singing and dancing being considered unexceptional, and the lack of nuance in Stone's character, with Gosling's occasionally seen as insufferable.[101]\n",
    "\n",
    "                Legacy\n",
    "                Since its release, La La Land continues to receive acclaim. It is regarded as a modern classic and one of the best films of all time due to its captivating performances, attention to detail, and its assent to previous movie musicals such as Singin' in the Rain.[107] In 2019, CBC Radio included it on its list of \"the greatest romantic movies of all time.\" In 2021, Helena Trauger of The Beacon called it the best film of the 2010s, stating that it is \"one of the most creative and well-executed films that every person should attempt to watch at least once.\" In 2022, Time Out ranked it number 79 on its list of the \"100 Best Films of the 21st Century,\" writing that it \"has a signature all of its own, stopping traffic in the first glorious sequence.\"[108]\n",
    "\n",
    "                MovieWeb ranked the film number 2 on its list of the \"Best Movie Musicals of the 21st Century So Far,\" in 2022 as well. In 2023, it ranked it number 3 on its list of the \"15 Greatest Movies About Jazz\" and number 1 on its list of the \"Best Modern Movies Shot on Film.\"[109] It also ranked number 2 on Teen Vogue's list of \"The 45 Best Dance Movies of All Time.\"[110] The film ranked number 15 on Collider's list of the \"30 Best Musicals of All Time,\" with Jeremy Urquhart writing, \"It works as a modern update/homage to classic Hollywood musicals that were popular in the 1950s without ever feeling derivative or mocking, and Emma Stone and Ryan Gosling in the lead roles both give great performances that are up there with the best of their respective careers.\"\n",
    "\n",
    "                It also ranked number 8 on Parade's list of the \"67 Best Movie Musicals of All Time,\" with Samuel R. Murrian writing that the film is \"many things, thusly its own creation: deftly blending a modern showbiz melodrama, a giddy throwback, a striking love story.\" Screen Rant also ranked it at number 10 on its list \"The 35 Best Musicals of All Time\" and number 1 on its list of \"The 12 Best Movie Musicals of the 21st Century,\" while IndieWire ranked it at number 12 on its list of \"The 60 Best Movie Musicals of All Time.\" Wilson Chapman, curation editor for IndieWire, wrote that La La Land's story has just the right harmony of romance and melancholy, and that pieces such as \"Another Day of Sun\" and \"A Lovely Night\" are catchy and rememberable. He remarked that the Oscar-winning \"City of Stars,\" as well as others of Hurwitz's scores, are \"some of the finest written for any movie this century.\"[b] In 2024, Looper ranked it number 11 on its list of the \"51 Best PG-13 Movies of All Time,\" calling the film \"a deeply affecting feature thanks to a pair of great performances from Emma Stone and Ryan Gosling. Any movie like La La Land that gets toes tapping and tears flowing with such grace is worth remembering.\"[112]\n",
    "\n",
    "                In March 2025, The Washington Post ranked the film at number 13 on its list of \"The 25 best movie musicals of the 21st century,\" with Ty Burr writing \"The results are even closer to the touchstone of Jacques Demy‚Äôs beloved 1964 Umbrellas of Cherbourg than the earlier film [Guy and Madeline on a Park Bench]: love lost, found and lost again amid an evocation of a city‚Äôs hidden soul.\"[113] In June 2025, actors Simu Liu and Molly Ringwald cited the film as among their favorites of the 21st century.[114] In July 2025, it ranked number 16 on the \"Readers' Choice\" edition of The New York Times' list of \"The 100 Best Movies of the 21st Century.\"[115]\n",
    "\n",
    "                Cultural impact\n",
    "                Many elements of the film, including the visual style, use of colors, staging of the musical numbers and costume designs have been referenced numerous times in popular culture since its release. These include the entire opening segment of the 74th Golden Globe Awards, featuring parodies of \"Another Day of Sun,\" \"City of Stars\" and the planetarium sequence with host Jimmy Fallon, Nicole Kidman, Amy Adams, Sarah Paulson, Courtney B. Vance, Sterling K. Brown, Evan Rachel Wood, Rami Malek, and Kit Harington participating, an independently produced short film parody set in New York City titled NY NY Land, a skit on season 42 of Saturday Night Live where host Aziz Ansari plays a character who is interrogated over calling the film \"overrated\" because of its Oscar nominations, and a television commercial for the prescription Jardiance.[116][117][118][119] The 2018 single \"Love Scenario\" by IKon drew heavy inspiration from the film's epilogue sequence.[120] The 2021 Disney animated short film, Us Again, was also said to have been influenced by the film.[121][122] In the closing of The Simpsons episode \"Haw-Haw Land\" it is stated that the episode was supposed to be a parody of Moonlight rather than La La Land (itself parodying the mistake at the 89th Academy Awards.[123])\n",
    "\n",
    "                Accolades\n",
    "                Main article: List of accolades received by La La Land\n",
    "\n",
    "                Hurwitz, Chazelle, and Stone at the Mill Valley Film Festival in October 2016\n",
    "                Emma Stone won the Volpi Cup for Best Actress at the Venice Film Festival.\n",
    "\n",
    "                La La Land received 11 nominations at the 70th British Academy Film Awards, more than any other film of 2016.[124] The film won in the categories of Best Film, Best Director, Best Actress in a Leading Role (for Stone), Best Cinematography, and Best Film Music.[125]\n",
    "\n",
    "                At the 74th Golden Globe Awards, La La Land received a leading seven nominations.[126] The film won in all seven categories for which it was nominated, setting a record for the most Golden Globes won by a single film, namely Best Motion Picture ‚Äì Musical or Comedy, Best Director, Best Actor ‚Äì Comedy or Musical (for Gosling), Best Actress ‚Äì Comedy or Musical (for Stone), Best Screenplay, Best Original Score, and Best Original Song (\"City of Stars\") breaking the record One Flew Over the Cuckoo's Nest set for the most wins.[127]\n",
    "\n",
    "                At the 89th Academy Awards, La La Land received a leading six awards, namely Best Director, Best Actress (for Stone), Best Cinematography, Best Original Score, Best Original Song (\"City of Stars\"), and Best Production Design.[128] The film received a total of 14 nominations, tying the record for most nominations by a single film with All About Eve (1950) and Titanic (1997).[129] Its other nominations were Best Picture, Best Actor (for Gosling), Best Original Screenplay, Best Film Editing, Best Costume Design, a second nomination for Best Original Song (\"Audition (The Fools Who Dream)\"), Best Sound Editing, and Best Sound Mixing.[130]\n",
    "\n",
    "                Best Picture Oscar gaffe\n",
    "                See also: 89th Academy Awards ¬ß Best Picture announcement error\n",
    "                During the Oscars ceremony, presenter Faye Dunaway incorrectly announced that La La Land had won Best Picture, reading from the card Warren Beatty opened, which was actually a duplicate of the Best Actress card for Emma Stone.[131] After the cast and crew of La La Land took the stage, it took the show's producers more than two minutes (during which nearly three speeches were made) to fix the mistake. The actual winner was Moonlight.[132]\n",
    "\n",
    "                German television prank\n",
    "                In March 2017, La La Land was at the center of a prank involving Goldene Kamera, an annual German film and television award. German comedians Joko Winterscheidt and Klaas Heufer-Umlauf arranged for a Ryan Gosling impersonator to be awarded the \"Best International Film\" prize for La La Land.[133][134][135] Following the event, a speaker for television broadcaster ZDF asked for the trophy to be given back, stating that La La Land had won the prize and that the trophy would be given to the real Ryan Gosling.[136] The incident, which became known as \"GoslingGate\", sparked criticism of the event's concept. Media critics argued that the \"Best International Film\" award had only been created in an effort to get Ryan Gosling on the show, with no regards for the film's quality. The incident played a major role in the cancellation of the Goldene Kamera in 2019.[137][138] In 2018, Winterscheidt and Heufer-Umlauf were awarded the Grimme Award for their media criticism.[139]\n",
    "\n",
    "                Stage adaptations\n",
    "                Broadway musical\n",
    "                On February 7, 2023, it was announced that the film would be adapted into a Broadway musical by Platt and Lionsgate. Hurwitz, Pasek & Paul will return to write additional songs for the show. Bartlett Sher will direct from a book by Ayad Akhtar and Matthew Decker.[140] Alan Vaytsman, the new actor, will play Sebastian. He also contributed new songs, like \"The Greatest Showman\" when he plays Barnum.\n",
    "\n",
    "                So Long Boulder City\n",
    "                A theatrical spin-off, So Long Boulder City, was also created in 2017 by comedians Jimmy Fowlie and Jordan Black. The show was a full-length parody of Mia Dolan's one-woman show from the movie, and featured Fowlie in drag as Mia.[141] So Long Boulder City debuted in Los Angeles before enjoying a run at the SubCulture Off-Broadway theater in New York City.[142]\n",
    "                \"\"\"\n",
    "        }\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import json\n",
    "# import re\n",
    "\n",
    "# class GeminiChunkClient:\n",
    "#     \"\"\"A client to chunk text using Google's Gemini API.\"\"\"\n",
    "\n",
    "#     def __init__(self, api_key: str, model_name: str = \"gemini-2.5-flash\"):\n",
    "#         api_key = api_key.strip()\n",
    "#         self.client = genai.Client(api_key=api_key)\n",
    "#         self.model_name = model_name\n",
    "        \n",
    "#     async def chunk_text_with_llm(self, input_text: str):\n",
    "#         system_prompt = \"\"\"\n",
    "#         # Context:\n",
    "#         You are an expert text structuring assistant. Your goal is to help divide long articles into smaller, logical chunks ‚Äî but instead of chunking the content directly, you will identify where the article *should* be split.\n",
    "\n",
    "#         # Input:\n",
    "#         You will receive one long article.\n",
    "\n",
    "#         # Your Task:\n",
    "#         1. Identify the *last sentence* of each logical chunk.\n",
    "#         2. Each chunk should be between 700 and 1000 words.\n",
    "#         3. Ensure each chunk is semantically cohesive ‚Äî do not break in the middle of an idea or paragraph.\n",
    "#         4. Do NOT alter or omit any content.\n",
    "#         5. Only return the chunk boundary sentences. These should help another program know where to split the article.\n",
    "\n",
    "#         # Output Format:\n",
    "#         Return a JSON object. Each value is a sentence that should be the *last* sentence of a chunk. Do not include any explanation or extra text ‚Äî only return the JSON. The string MUST appear in the original article. Do not alter the sentences in any way.\n",
    "\n",
    "#         Example Input: \n",
    "#         Hello, this is a long article about various topics. It discusses the history of cinema. It also discusses the evolution of technology. It discuesses the impact of social media on modern communication. The article also touches upon environmental issues and the importance of sustainability in today's world.\n",
    "\n",
    "#         Example Output:\n",
    "#         {\n",
    "#             \"breakpoint_1\" : \"It discuesses the impact of social media on modern communication.\"\n",
    "#         }\n",
    "\n",
    "#         Expected Behavior: Python will chunk the text into two parts: The first ranges from the first sentence to \"It discuesses the impact of social media on modern communication.\" inclusive. The second ranges from \"The article also touches upon environmental issues and the importance of sustainability in today's world.\" to the end of the article.\n",
    "#         \"\"\"\n",
    "\n",
    "#         if not input_text:\n",
    "#             raise ValueError(\"Input text is empty or None.\")\n",
    "\n",
    "#         try:\n",
    "#             user_query = f\"<INPUT>\\n{input_text}\\n<\\INPUT>\"\n",
    "#             full_prompt = f\"SYSTEM_PROMPT\\n{system_prompt}\\n\\nUSER_QUERY\\n{user_query}\"\n",
    "#             response = await self.client.aio.models.generate_content(\n",
    "#                         model='gemini-2.5-flash',\n",
    "#                         config=types.GenerateContentConfig(\n",
    "#                                 temperature=0.1,\n",
    "#                                 top_p=0.9,\n",
    "#                                 max_output_tokens=2000,\n",
    "#                                 system_instruction=system_prompt,\n",
    "#                                 thinking_config=types.ThinkingConfig(\n",
    "#                                 thinking_budget=1024),),\n",
    "#                         contents=user_query)\n",
    "#             print(f\"repsonse.text: {response.text}\")\n",
    "#             raw_output = response.text\n",
    "#             chunk_points_json = re.sub(r\"^```json|^```|```$\", \"\", raw_output.strip(), flags=re.MULTILINE).strip()\n",
    "            \n",
    "#             try:\n",
    "#                 return json.loads(chunk_points_json)\n",
    "#             except json.JSONDecodeError:\n",
    "#                 print(\"Trying to extract JSON list from raw string...\")\n",
    "#                 match = re.search(r\"\\[.*\\]\", chunk_points_json, re.DOTALL)\n",
    "#                 if match:\n",
    "#                     return json.loads(match.group(0))\n",
    "#                 return {\"error\": \"Could not parse JSON.\"}\n",
    "                \n",
    "#         except Exception as e:\n",
    "#             print(f\"Error during chunking point detection: {e}\")\n",
    "#             return {\"error\": str(e)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import unicodedata\n",
    "from difflib import get_close_matches\n",
    "\n",
    "def normalize(text: str) -> str:\n",
    "    \"\"\"Normalize and strip text to remove invisible mismatches.\"\"\"\n",
    "    return unicodedata.normalize(\"NFKC\", text.strip())\n",
    "\n",
    "def chunk_article_by_breakpoints(article_text: str, break_sentences: list, verbose: bool = False) -> dict:\n",
    "    chunks = {}\n",
    "    current_chunk = \"\"\n",
    "    chunk_index = 1\n",
    "\n",
    "    normalized_article = normalize(article_text)\n",
    "    remaining_article = normalized_article  # Will shrink as we chunk it\n",
    "\n",
    "    for break_sentence in break_sentences:\n",
    "        normalized_break = normalize(break_sentence)\n",
    "\n",
    "        match_index = remaining_article.find(normalized_break)\n",
    "\n",
    "        if match_index == -1:\n",
    "            if verbose:\n",
    "                print(f\"Break sentence not found:\\n{repr(normalized_break)}\")\n",
    "                close_matches = get_close_matches(normalized_break, re.split(r'(?<=[.!?])\\s+', remaining_article), n=1, cutoff=0.9)\n",
    "                if close_matches:\n",
    "                    print(f\"Closest match: {repr(close_matches[0])}\")\n",
    "            continue  # Skip this break sentence if no match found\n",
    "\n",
    "        # If found, split the article at that point\n",
    "        chunk = remaining_article[:match_index + len(normalized_break)].strip()\n",
    "        chunks[f\"chunk_{chunk_index}\"] = chunk\n",
    "        chunk_index += 1\n",
    "\n",
    "        # Update remaining article\n",
    "        remaining_article = remaining_article[match_index + len(normalized_break):].strip()\n",
    "\n",
    "    # Add any leftover text\n",
    "    if remaining_article:\n",
    "        chunks[f\"chunk_{chunk_index}\"] = remaining_article\n",
    "\n",
    "    return chunks\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "async def chunking_test():\n",
    "\n",
    "    \"\"\"Main execution function.\"\"\"\n",
    "    load_dotenv()\n",
    "    api_key = os.getenv('GEMINI_API_KEY')\n",
    "    if not api_key:\n",
    "        raise ValueError(\"GEMINI_API_KEY not found in .env file.\")\n",
    "\n",
    "    # --- Configuration ---\n",
    "    FALKORDB_CONFIG = {\n",
    "        \"host\": 'localhost',\n",
    "        \"port\": 6379,\n",
    "        \"db_name\": 'aug-6-test-db-v2' # Use a descriptive name for your graph\n",
    "    }\n",
    "    GEMINI_CONFIG = {\n",
    "        \"api_key\": api_key,\n",
    "        \"model_name\": \"gemini-2.5-flash\"\n",
    "    }\n",
    "\n",
    "    # --- Initialization ---\n",
    "    db_client = FalkorDBClient(**FALKORDB_CONFIG)\n",
    "    chunk_client = GeminiChunkClient(**GEMINI_CONFIG)\n",
    "    llm_client = GeminiLLMClient(**GEMINI_CONFIG)\n",
    "    processor = KnowledgeGraphProcessor(db_client=db_client, llm_client=llm_client)\n",
    "\n",
    "    for i, text_dict in enumerate(text, start=1):\n",
    "        print(f\"--- Processing article_{i} ---\")\n",
    "        article_content = text_dict.get(f\"article_{i}\")\n",
    "        break_sentences = await chunk_client.chunk_text_with_llm(article_content)\n",
    "        print(f\"Breakpoints detected:\\n{break_sentences}\")\n",
    "        chunked_article = chunk_article_by_breakpoints(article_content, break_sentences)\n",
    "        print(f\"Chunks:\\n{chunked_article}\")\n",
    "        print(f\"--- Finish processing article_{i} ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "await chunking_test()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## -----------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "text = [\n",
    "    {\n",
    "        \"article_1\" : \"\"\"La La Land is a 2016 American musical romantic comedy-drama film written and directed by Damien Chazelle. It stars Ryan Gosling and Emma Stone as a struggling jazz pianist and an aspiring actress who meet and fall in love while pursuing their dreams in Los Angeles. The supporting cast includes John Legend, Rosemarie DeWitt, Finn Wittrock, and J. K. Simmons.\n",
    "\n",
    "        Having been fond of musicals during his time as a drummer, Chazelle first conceptualized the film alongside Justin Hurwitz while attending Harvard University together. After moving to Los Angeles in 2010, Chazelle penned the script but did not find a studio willing to finance the production without changes to his design. After the success of his film Whiplash (2014), the project was picked up by Summit Entertainment. Miles Teller and Emma Watson were originally in talks to star, but after both dropped out, Gosling and Stone were cast. Filming took place in Los Angeles between August and September 2015, with the film's score composed by Hurwitz, who also wrote the film's songs with lyricists Benj Pasek and Justin Paul and the dance choreography by Mandy Moore.\n",
    "\n",
    "        La La Land premiered at the 73rd Venice International Film Festival on August 31, 2016, and was released theatrically in the United States on December 9, by Lionsgate. The film emerged as a major commercial success, grossing $472 million worldwide on a budget of $30 million, and received widespread critical acclaim, particularly for Chazelle's direction and screenplay, the performances of Gosling and Stone, the score, musical numbers, cinematography, visual style, costumes and production design. It went on to receive numerous accolades, including winning a record seven awards at the 74th Golden Globe Awards and received eleven nominations at the 70th British Academy Film Awards, winning five, including Best Film. The film also received a record-tying fourteen nominations at the 89th Academy Awards, winning in six categories including Best Director and Best Actress (Stone). In the former category, Chazelle became the youngest winner at age 32. It has since been regarded as one of the best films of the 2010s and the 21st century, and as one of the best musical and romantic films of all time.[a] As of February 2023, a stage musical adaptation is in the works.[14]\n",
    "\n",
    "        Plot\n",
    "        While stuck in Los Angeles traffic, Sebastian \"Seb\" Wilder has a moment of road rage directed at aspiring actress Mia Dolan. After a hard day at work, Mia's next audition goes awry because the casting director takes a phone call during an emotional scene. That night, her roommates take her to a lavish party in the Hollywood Hills, promising her that someone in the crowd could jump-start her career. After her car is towed, she walks home in disappointment.\n",
    "\n",
    "        During a gig at a restaurant, Seb slips into jazz improvisation despite the owner's warning to only play traditional Christmas pieces. Mia hears him playing as she passes by. Moved, she enters the restaurant and observes Seb being fired for his disobedience. Mia attempts to compliment him as he storms out, but he brushes by her. Months later, she runs into Seb at a party where he plays in a 1980s pop cover band. Mia requests that Seb play \"I Ran\" for her. After the gig, they walk to their cars and ‚Äì despite an obvious chemistry ‚Äì lament wasting a lovely night on each other.\n",
    "\n",
    "        Seb arrives at Mia's workplace, and she shows him around the Warner Bros. backlot, where she works as a barista, while expressing her passion for acting. He takes her to a jazz club, describing his passion for jazz and his desire to open his own club. Seb invites Mia to a screening of Rebel Without a Cause and she accepts, forgetting a date with her boyfriend. Bored with the latter date, she rushes to the theater and finds Seb as the film begins. When the screening is interrupted by a projector malfunction, Seb and Mia spend the rest of the evening together with a romantic visit to the Griffith Observatory.\n",
    "\n",
    "        After more failed auditions, Mia decides, with Seb's encouragement, to write a one-woman play. Seb begins to perform regularly at a jazz club, and the two of them eventually move in together. A former bandmate of Seb invites him to be the keyboardist in a new jazz fusion band, which will give him a steady income. Although dismayed by the band's pop style, Seb signs on after hearing Mia trying to convince her mother that he is working on his career. The band finds success, but Mia knows their music is not the type of music Seb wants to perform.\n",
    "\n",
    "        During the band's first tour, Seb and Mia argue: she accuses him of abandoning his dreams, while he claims that she liked him more when he was unsuccessful because it made her feel better about herself. Two weeks later, Seb misses Mia's play because of a photoshoot he had forgotten about. The play fails, very few people attend, and Mia overhears dismissive comments about her performance. Unable to forgive him for missing her play and their previous argument, Mia returns to her hometown of Boulder City, Nevada.\n",
    "\n",
    "        Seb receives a phone call from a prominent casting director who attended Mia's play, inviting her to audition for an upcoming film. Knowing that this could be her big break, he drives in a hurry to Boulder City and finds her house since he remembered that she lived across the street from the library, where she fell in love with acting. Seb persuades her to attend, and she reluctantly agrees to go.\n",
    "\n",
    "        During the audition the next day, Mia is asked to tell a story. In response, she sings about how her aunt, a one-time stage actress who eventually died from alcoholism, inspired her to chase her dreams. Confident the audition was a success, Seb encourages Mia to devote herself to acting. The two then recognize that they will always love each other despite what may come for their relationship.\n",
    "\n",
    "        Five years later, Mia is living a happy life as a successful actress and married to a different man, with whom she has a daughter. That night, the couple stumble upon a jazz bar. Recognizing the logo she had once designed, Mia realizes that Seb has opened his own jazz club. Seb notices Mia in the crowd and begins to play their love theme on the piano. The two imagine what their happy life together would have been had their relationship thrived along with their careers, then acknowledge each other with a silent exchange of smiles and go their separate ways.\n",
    "\n",
    "        Cast\n",
    "        Ryan Gosling as Sebastian \"Seb\" Wilder, a musician who wants to own his own jazz club\n",
    "        Emma Stone as Amelia \"Mia\" Dolan, an actress whose aunt inspired her to follow her dreams\n",
    "        John Legend as Keith, Seb's friend and musician who invites him to join his band\n",
    "        J. K. Simmons as Bill, the manager of the restaurant where Seb worked at before his firing\n",
    "        Rosemarie DeWitt as Laura Wilder, Seb's sister\n",
    "        Finn Wittrock as Greg, Mia's ex-boyfriend\n",
    "        Callie Hernandez as Tracy, one of Mia's roommates\n",
    "        Sonoya Mizuno as Caitlin, one of Mia's roommates\n",
    "        Jessica Rothe as Alexis, one of Mia's roommates\n",
    "        Tom Everett Scott as David\n",
    "        Amiee Conn as The Famous Actress\n",
    "        Anna Chazelle as Sarah\n",
    "        Josh Pence as Josh\n",
    "        Meagen Fay as Mia's mother\n",
    "        Damon Gupton as Harry\n",
    "        Jason Fuchs as Carlo\n",
    "        Marius de Vries as Clyde\n",
    "        Olivia Hamilton as Bree\n",
    "        Hemky Madera as Jimmy\n",
    "        Valarie Rae Miller as Amy Brandt\n",
    "        Miles Anderson as Alistair the photographer\n",
    "        Khirye Tyler as Seb's Pianist\n",
    "        Production\n",
    "        Pre-production\n",
    "\n",
    "        Chazelle first conceived the idea for the film while attending Harvard University with Justin Hurwitz, the film's composer.\n",
    "        As a drummer, Chazelle has a predilection for musical films.[15] He wrote the screenplay for La La Land in 2010, when the film industry seemed out of reach for him.[16] His idea was \"to take the old musical but ground it in real life where things don't always exactly work out,\"[15] and to salute creative people who move to Los Angeles to chase their dreams.[17] He conceived the film when he was a student at Harvard University with his classmate Justin Hurwitz. The two explored the concept in their senior thesis through a low-budget musical about a Boston jazz musician, Guy and Madeline on a Park Bench.[18][19] Chazelle was moved by the tradition of 1920s \"city symphony\" films, such as Manhatta (1921) and Man with a Movie Camera (1929), that paid tribute to cities.[20] After graduating, both moved to Los Angeles in 2010 and continued writing the script, but made a few modifications, such as altering the location to Los Angeles instead of Boston.[18]\n",
    "\n",
    "        Rather than trying to match L.A. to the charms of Paris or San Francisco, he focused on the qualities that make the city distinctive: the traffic, the sprawl, and the skylines.[20] The style and tone of the film were inspired by Jacques Demy's The Umbrellas of Cherbourg and The Young Girls of Rochefort, especially the latter, which was more dance and jazz-oriented.[21] The film also makes visual allusions to Hollywood classics such as Broadway Melody of 1940, Singin' in the Rain, The Band Wagon, and An American in Paris.[22] About An American in Paris, Chazelle commented: \"That's a movie that we just pillaged. It's an awesome example of how daring some of those old musicals really were.\"[23] It shares some character development and themes with Chazelle's previous musical work, Whiplash; Chazelle said:\n",
    "\n",
    "        \"They're both about the struggle of being an artist and reconciling your dreams with the need to be human. La La Land is just much less angry about it.\"[24]\n",
    "        He said that both films reflect his own experiences as a filmmaker working his way up the Hollywood ladder.[17] La La Land in particular is inspired by his experience of moving from the East Coast with preconceived notions of what L.A. would be like, \"that it was all just strip malls and freeways\".[20]\n",
    "\n",
    "        Chazelle was unable to produce the film for years as no studio was willing to finance an original contemporary musical with no familiar songs. It is also a jazz musical, which The Hollywood Reporter called an \"extinct genre\". He believed that since he and Hurwitz were unknown at that time, it might have made financiers dubious about the project's potential.[25][18] Gosling's character Sebastian holds a view of the jazz of the past being superior. According to an article by Anthony Carew, Chazelle wrote this character trait as a reflection of \"[his] own relationship with the past and with jazz, too\".[26] Chazelle found producers through friends who introduced him to Fred Berger and Jordan Horowitz. With the two producers on board, the script went to Focus Features at a budget of around $1 million. The studio demanded alterations: the male lead was asked to be changed from a jazz pianist to a rock musician, the complicated opening number had to be altered, and the story's bittersweet ending needed to be dropped. Chazelle scrapped the project and moved on.[18]\n",
    "\n",
    "        Chazelle later wrote Whiplash, which was an easier concept to sell and a less risky investment.[27] After Whiplash was well received by critics upon its premiere at the 2014 Sundance Film Festival in January, Chazelle continued his efforts to bring La La Land to the big screen.[18] A year later, when Whiplash earned five Oscar nominations at the 87th Academy Awards, including Best Picture, and grossed nearly $50 million worldwide off a $3.3 million production budget, Chazelle and his project began to attract attention from studios.[25]\n",
    "\n",
    "        Five years after Chazelle wrote the script,[28] Summit Entertainment and Black Label Media, along with producer Marc Platt, agreed to invest in La La Land and distribute it. They had been impressed by the critical and commercial success of Whiplash.[17] Lionsgate's Patrick Wachsberger, who previously had worked on the Step Up franchise, pushed Chazelle to increase the film's budget since he felt high-quality musicals could not be made cheaply.[29]\n",
    "\n",
    "        Casting\n",
    "        Miles Teller and Emma Watson were originally slated to star in the leading roles. Watson dropped out to honor her commitments to Disney's live-action Beauty and the Beast remake (2017), while Teller exited via long contract negotiations.[16] Coincidentally, Gosling turned down the Beast role in Beauty and the Beast in favor of La La Land.[30] Chazelle subsequently decided to make his characters somewhat older, with experience in struggling to make their dreams, rather than younger newcomers just arriving in Los Angeles.[18]\n",
    "\n",
    "        Emma Stone plays Mia, an aspiring actress in Los Angeles.[25] Stone has loved musicals since she saw Les Mis√©rables when she was eight years old. She said \"bursting into song has always been a real dream of mine\", and her favorite film is the 1931 Charlie Chaplin romantic comedy City Lights.[25][15] She studied pom dancing as a child, with a year of ballet.[25] She moved to Hollywood with her mother at age fifteen to pursue a career, and struggled constantly to get an audition during her first year. When she did, she often was turned away after singing or saying just one line.[31] Stone drew from her own experiences for her character of Mia, and some were added into the film.[24]\n",
    "\n",
    "\n",
    "        Ryan Gosling learned tap dancing and piano for his role.\n",
    "        She met Chazelle in 2014 while she was making her Broadway debut in Cabaret. Chazelle and Hurwitz saw her perform on a night when the actress had a cold.[25][32] She met with Chazelle at Brooklyn Diner in New York City, where the director outlined his vision for the planned film.[33] Stone gained confidence from performing in Cabaret to handle the demands of the film.[33] In preparation for her role, Stone watched some of the musical movies that inspired Chazelle, including The Umbrellas of Cherbourg and Fred Astaire and Ginger Rogers collaborations.[28] Stone accepted the offer because Chazelle was so passionate about the project.[33]\n",
    "\n",
    "        Ryan Gosling plays Sebastian, a jazz pianist.[25] Like Stone, Gosling drew from his own experiences as an aspiring artist. One incident was used for Mia. Gosling was performing a crying scene in an audition and the casting director took a phone call during it, talking about her lunch plans while he was emoting.[25][31][34] Chazelle met with Gosling when he was about to begin filming for The Big Short.[18]\n",
    "\n",
    "        Chazelle cast Gosling and Stone immediately after Summit bought the film.[17] He stated that the duo \"feel like the closest thing that we have right now to an old Hollywood couple\" as akin to Spencer Tracy and Katharine Hepburn, Fred Astaire and Ginger Rogers, Humphrey Bogart and Lauren Bacall, and Myrna Loy and William Powell.[24] The film marked the third collaboration between Gosling and Stone, following Crazy, Stupid, Love (2011) and Gangster Squad (2013).[35] Chazelle asked the two about their audition disasters when they were both trying to make it.[31] Both learned to sing and dance for the film's six original tunes.[18]\n",
    "\n",
    "        The rest of the cast ‚Äì J. K. Simmons, Sonoya Mizuno, Jessica Rothe, Callie Hernandez, Finn Wittrock, Rosemarie DeWitt, John Legend, Jason Fuchs, Meagen Fay ‚Äì were announced between July and August 2015.[36][37][38][39][40][41]\n",
    "\n",
    "        The film was choreographed by Mandy Moore. Rehearsals took place at a production office in Atwater Village, Los Angeles over the span of three to four months, beginning in May 2015. Gosling practiced piano in one room, Stone worked with Moore in another, and costume designer Mary Zophres had her own corner of the complex.[25][18] Gosling, with no previous experience, had to learn how to play the piano; no hand models were used.[42] Moore emphasized working on emotion rather than technique, which Stone said was key when they filmed the \"A Lovely Night\" scene (searching for the parked car).[25] To help his cast and crew get their creative mode flowing, Chazelle held screenings on the soundstages every Friday night of classical films that had inspired him for the film, including The Umbrellas of Cherbourg, Singin' in the Rain, Top Hat, and Boogie Nights.[18]\n",
    "\n",
    "        Filming\n",
    "        From the beginning, Chazelle wanted the film's musical numbers to be filmed \"head to toe\" and performed in a single take, like those of the 1930s works of Fred Astaire and Ginger Rogers.[33] He also wanted the film to emulate the widescreen, CinemaScope look of 1950s musicals such as It's Always Fair Weather. Consequently, the movie was shot on celluloid 4-perf Super 35mm film (not digitally) with Panavision anamorphic lenses in CinemaScope's 2.55:1 aspect ratio, but not in true CinemaScope as that technology is no longer available.[43][44][45][46]\n",
    "\n",
    "        Chazelle wanted Los Angeles to be the primary setting for his film, commenting that \"there is something very poetic about the city I think, about a city that is built by people with these unrealistic dreams and people who kind of just put it all on the line for that.\"[15] Principal photography on the film officially began in the city on August 10, 2015,[47] and filming took place in more than 60 locations both in and near Los Angeles, including the Angels Flight trolley in downtown, houses in the Hollywood Hills, the Colorado Street Bridge, the Rialto Theatre in South Pasadena, the Warner Bros. studio lot, the Grand Central Market, Hermosa Beach's Lighthouse Caf√©, Griffith Observatory, Griffith Park, Chateau Marmont, the Watts Towers, and Long Beach,[48] with many scenes shot in one take. It took 40 days to complete shooting, finishing in mid-September 2015.[18][49][50]\n",
    "\n",
    "        The opening pre-credits sequence was the first to be shot,[18] and was filmed on a closed-off portion of two carpool direct connector ramps of the Judge Harry Pregerson Interchange, connecting the I-105 Carpool Lane to the I-110 Express Lanes, leading to Downtown Los Angeles. It was filmed in a span of two days, and required more than 100 dancers.[17][51] For this particular scene, Chazelle wanted to give a sense of how vast the city is.[20] The scene was originally planned for a stretch of ground-level highway, until Chazelle decided to shoot it in the 105‚Äì110 interchange, which arcs 100 feet (30 m) in the air. Production designer David Wasco said, \"I thought somebody was going to fall off and get killed.\" Not every portion of the highway was blocked.[18] Chazelle compared the scene to the yellow brick road leading to the Emerald City in The Wizard of Oz (1939).[18]\n",
    "\n",
    "\n",
    "        The Angels Flight (pictured), which was shut down for about four years, including at the time of the filming, was re-opened for a single day exclusively for the film to shoot a scene.\n",
    "        Chazelle scouted for \"old L.A.\" locations that were in ruins, or were perhaps razed. One such example was the use of the Angels Flight trolley, built in 1901. The funicular had been closed in 2013 after a derailment. Attempts were made to repair and re-open the railway, but to no avail. However, the production team was able to secure permission to use it for a day. Chazelle and his crew then arranged to have it run for shooting (it was re-opened to the public in 2017).[20] Mia works at a coffee shop on the Warner Bros. studio lot; Chazelle considered studio lots to be \"monuments\" of Hollywood. Production designer Wasco created numerous fake old film posters. Chazelle occasionally created names for them, deciding to use the title of his first feature, Guy and Madeline on a Park Bench (2009) for one poster, which reimagines it as a 1930s musical.[20]\n",
    "\n",
    "        External videos\n",
    "        video icon The full \"A Lovely Night\" scene via YouTube\n",
    "        The now-iconic[52][53][54] six-minute-long \"A Lovely Night\" scene (searching for the parked car) had to be completed during the brief \"magic hour\" moment at sunset. It took eight takes and two days to shoot it.[25] When Ryan Gosling and Emma Stone finally nailed it, \"everybody just exploded,\" Stone said.[33] Since Gosling and Stone were not primarily dancers, the two made a number of mistakes, especially during long uninterrupted single-take musical numbers. However, Chazelle was very sympathetic towards them, understanding their lack of experience and not minding their errors.[28] While shooting Sebastian and Mia's first dance together, Stone stumbled over the back of a bench, but picked right up and kept on going with the scene.[28] In 2024, Gosling reflected on the filming of this scene, wishing he could re-film it to correct the positioning of his hand in the famous still frame from the sequence that was used throughout the film's marketing, saying that \"It just killed the energy that way ... It was all leading to what? A lazy ... I call it La La Hand.\"[53]\n",
    "\n",
    "        Chazelle said that the romantic dinner that Sebastian prepared for Mia was \"one of the scenes that I think I wrote and rewrote and rewrote more than any other in the script\".[55] Gosling and Stone also helped create the dialogue of the scene to get it to be one of the more realistic scenes in a film filled with fantasy and fantastical elements.[55]\n",
    "\n",
    "        Chazelle spent nearly a year editing the film with editor Tom Cross, as the two were primarily concerned with getting the tone right.[18]\n",
    "\n",
    "        Soundtrack\n",
    "\n",
    "        Main article: La La Land (soundtrack)\n",
    "        The songs and score for La La Land were composed and orchestrated by Justin Hurwitz, Chazelle's Harvard University classmate, who also worked on his two prior films.[25] The lyrics were written by Pasek and Paul,[33] except for \"Start a Fire\", which was written by John Legend, Hurwitz, Marius de Vries and Angelique Cinelu.[56] A soundtrack album was released on December 9, 2016, by Interscope Records, featuring selections from Hurwitz's score and songs performed by the cast.[56]\n",
    "\n",
    "        The film's opening number, \"Another Day of Sun\", shot as a single tracking shot on an L.A. freeway, received praise for its choreography. The songs \"City of Stars\" and \"Audition (The Fools Who Dream)\" received numerous awards.\n",
    "\n",
    "        Release\n",
    "        La La Land had its world premiere as the Venice Film Festival's opening night film on August 31, 2016.[57][58] The film also screened at the Telluride Film Festival,[59] the Toronto International Film Festival, beginning September 12, 2016,[60] the BFI London Film Festival,[61] the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016.[62]\n",
    "\n",
    "        La La Land was originally set for a July 15, 2016, release;[63] however, in March 2016, it was announced the film would be given a limited release starting December 2, 2016, before expanding on December 16, 2016.[64] Chazelle stated that the change was because he felt that the release date was not right for the context of the film, and because he wanted to have a slow rollout beginning with the early fall film festivals.[24] The limited release was later moved back a week to December 9, 2016, with the wide release still being planned for December 16, 2016.[65] Lionsgate opened the film in five locations on December 9, 2016, and expanded it to about 200 theaters on December 16, 2016, before going nationwide on December 25, 2016. The film went fully wide on January 6, 2017,[50] with a release into select IMAX theaters a week later.[66]\n",
    "\n",
    "        La La Land was released in the United Kingdom on January 12, 2017.[67] The film was released in the Netherlands on December 22, 2016, and in Australia on December 26, with the rest of the territories planned for a release from mid-January 2017.[68]\n",
    "\n",
    "        Home media\n",
    "        Lionsgate released La La Land on Digital HD on April 11, 2017, and Blu-ray, Ultra HD Blu-ray and DVD on April 25, 2017.[69]\n",
    "\n",
    "        Reception\n",
    "        Box office\n",
    "        La La Land grossed $151.1 million in the United States and Canada, and $320.9 million in other territories, for a worldwide total of $472 million, against a production budget of $30 million.[70] Deadline Hollywood calculated the net profit of the film to be $68.25 million, when factoring together all expenses and revenues for the film, making it one of the top 20 most profitable releases of 2016.[71] This is Ryan Gosling's second highest-grossing film, as it was displaced by Barbie in 2023.[72]\n",
    "\n",
    "        La La Land began its theatrical release with a limited release in five theaters in Los Angeles and New York City on December 9. It made $881,107 in its opening weekend, giving the film a per-theater average of $176,221, the best average of the year.[73][74][75] In its second week of limited release, the film expanded to 200 theaters and grossed $4.1 million, finishing seventh at the box-office. It was an increase of 366% from the previous week and good for a per-theater of $20,510.[76] The following week, the film had its wide expansion to 734 theaters, grossing $5.8 million for the weekend (including $4 million on Christmas Day and $9.2 million over the four days), and finishing eighth at the box-office.[77] On January 6, 2017, the weekend of the Golden Globes, the film expanded to 1,515 theaters and grossed $10 million over the weekend, finishing fifth at the box-office.[78] In its sixth week of release, the film grossed $14.5 million (a total of $16.9 million over the four-day weekend for Martin Luther King Jr. Day), finishing second at the box-office behind Hidden Figures.[79] After receiving its 14 Oscar nominations, the film expanded to 3,136 theaters on January 27, 2017 (an increase of 1,271 from the week before) and grossed $12.1 million (up 43% from its previous week's $8.4 million).[80] During the weekend of February 24‚Äì26 (the weekend of the Academy Awards) the film grossed $4.6 million, exactly the same amount it grossed the previous weekend.[81] The next week, following its six Oscar wins, the film grossed $3 million.[82]\n",
    "\n",
    "        Critical response\n",
    "\n",
    "        Ryan Gosling and Emma Stone garnered widespread critical acclaim for their performances, earning them Academy Award nominations for Best Actor and Best Actress, with Stone winning.\n",
    "        La La Land received widespread critical acclaim, with high praise directed towards Chazelle's direction and screenplay, cinematography, music, the performances of Gosling and Stone and their chemistry.[83][84][85][86] The review aggregator Rotten Tomatoes gives the film an approval rating of 91% based on 470 reviews, with an average rating of 8.7/10. The website's critical consensus reads, \"La La Land breathes new life into a bygone genre with thrillingly assured direction, powerful performances, and an irresistible excess of heart.\"[87] On Metacritic, the film has a weighted average score of 94 out of 100, based on 54 critics, indicating \"universal acclaim\".[88] It was the third- and sixth-highest scoring film released in 2016 on each respective site.[89][90] Audiences polled by CinemaScore gave the film an average grade of \"A‚àí\" on an A+ to F scale,[91] while PostTrak reported audiences gave an 81% overall positive score and a 93% \"definite recommend\".[79]\n",
    "\n",
    "        Peter Travers of Rolling Stone gave La La Land four stars out of four, describing it as \"a hot miracle\" and complimenting its musical numbers, particularly the opening scene. He went on to name it his favorite movie of the year.[92] Michael Phillips of the Chicago Tribune similarly lauded the opening sequence, in addition to highlighting Stone's performance, stating \"she's reason enough to see La La Land.\" Despite being less enthusiastic about Gosling's dancing and the film's middle section, Phillips nevertheless gave the film four out of four stars, declaring it \"the year's most seriously pleasurable entertainment\".[93] A.O. Scott of The New York Times praised the film, stating that it \"succeeds both as a fizzy fantasy and a hard-headed fable, a romantic comedy and a showbiz melodrama, a work of sublime artifice and touching authenticity\".[94] Peter Bradshaw of The Guardian awarded the film five out of five stars, describing it as \"a sun-drenched musical masterpiece.\"[95] Tom Charity of Sight & Sound stated, \"Chazelle has crafted that rare thing, a genuinely romantic comedy, and as well, a rhapsody in blue, red, yellow and green.\"[96] Writing for The Boston Globe, Ty Burr summarized the effectiveness of the film to relate to audiences stating: \"...the movie traffics in the bittersweet happiness of treasuring things that are vanishing, like the unrealized future imagined in the climactic dance number, or those inky, star-filled dance floors that go on forever in old movies, or Hollywood musicals themselves. Or jazz: Sebastian has an early moment at a nightclub where he passionately sticks up for the music he loves. 'It's dying on the vine,' he says. 'And the world says 'Let it die. It had its time.' Well, not on my watch.' In that scene, he speaks for the director. By the end of La La Land, he's speaking for all of us.\"[97] Filmmakers Jonathan Demme, Jay Duplass, Paul Feig, Chad Hartigan, Chris Kelly, Daniel Kwan, Rebecca Miller, Reed Morano, Christopher Nolan, James Ponsoldt and Nanfu Wang also praised the film.[98][99]\n",
    "\n",
    "        La La Land's competition for awards and critical attention with the African-American film Moonlight shortly after the election of Donald Trump sharpened the attention on questions of racial sensitivity and unexamined white privilege in the characters of film. While accolades from audiences and critics grew, the film received backlash for what some considered a disproportional amount of praise.[100] Saturday Night Live lampooned the fervor over the film with a sketch about a man arrested for thinking it was \"decent... but also boring.\"[101] The film was criticized by some for its treatment of race and jazz. Kelly Lawler of USA Today noted that Gosling's character has been referred to as a \"white savior\" by some critics, for \"his quest (and eventual success) to save the traditionally black musical genre from extinction, seemingly the only person who can accomplish such a goal.\"[102] The sentiment was also expressed by Ruby Lott-Lavigna of Wired,[103] Anna Silman of New York,[104] and Ira Madison III of MTV News.[105] Rex Reed of the New York Observer also took aim at the film's intention to emulate the MGM musical classics, writing that \"the old-fashioned screenplay, by the ambitious writer-director Damien Chazelle, reeks of mothballs\", and that \"the movie sags badly in the middle, like a worn-out mattress that needs new springs\".[106] The South China Morning Post remarked that aside from its racial treatment of jazz, much of the public criticism was towards the film being \"a little dull\", the two leads' singing and dancing being considered unexceptional, and the lack of nuance in Stone's character, with Gosling's occasionally seen as insufferable.[101]\n",
    "\n",
    "        Legacy\n",
    "        Since its release, La La Land continues to receive acclaim. It is regarded as a modern classic and one of the best films of all time due to its captivating performances, attention to detail, and its assent to previous movie musicals such as Singin' in the Rain.[107] In 2019, CBC Radio included it on its list of \"the greatest romantic movies of all time.\" In 2021, Helena Trauger of The Beacon called it the best film of the 2010s, stating that it is \"one of the most creative and well-executed films that every person should attempt to watch at least once.\" In 2022, Time Out ranked it number 79 on its list of the \"100 Best Films of the 21st Century,\" writing that it \"has a signature all of its own, stopping traffic in the first glorious sequence.\"[108]\n",
    "\n",
    "        MovieWeb ranked the film number 2 on its list of the \"Best Movie Musicals of the 21st Century So Far,\" in 2022 as well. In 2023, it ranked it number 3 on its list of the \"15 Greatest Movies About Jazz\" and number 1 on its list of the \"Best Modern Movies Shot on Film.\"[109] It also ranked number 2 on Teen Vogue's list of \"The 45 Best Dance Movies of All Time.\"[110] The film ranked number 15 on Collider's list of the \"30 Best Musicals of All Time,\" with Jeremy Urquhart writing, \"It works as a modern update/homage to classic Hollywood musicals that were popular in the 1950s without ever feeling derivative or mocking, and Emma Stone and Ryan Gosling in the lead roles both give great performances that are up there with the best of their respective careers.\"\n",
    "\n",
    "        It also ranked number 8 on Parade's list of the \"67 Best Movie Musicals of All Time,\" with Samuel R. Murrian writing that the film is \"many things, thusly its own creation: deftly blending a modern showbiz melodrama, a giddy throwback, a striking love story.\" Screen Rant also ranked it at number 10 on its list \"The 35 Best Musicals of All Time\" and number 1 on its list of \"The 12 Best Movie Musicals of the 21st Century,\" while IndieWire ranked it at number 12 on its list of \"The 60 Best Movie Musicals of All Time.\" Wilson Chapman, curation editor for IndieWire, wrote that La La Land's story has just the right harmony of romance and melancholy, and that pieces such as \"Another Day of Sun\" and \"A Lovely Night\" are catchy and rememberable. He remarked that the Oscar-winning \"City of Stars,\" as well as others of Hurwitz's scores, are \"some of the finest written for any movie this century.\"[b] In 2024, Looper ranked it number 11 on its list of the \"51 Best PG-13 Movies of All Time,\" calling the film \"a deeply affecting feature thanks to a pair of great performances from Emma Stone and Ryan Gosling. Any movie like La La Land that gets toes tapping and tears flowing with such grace is worth remembering.\"[112]\n",
    "\n",
    "        In March 2025, The Washington Post ranked the film at number 13 on its list of \"The 25 best movie musicals of the 21st century,\" with Ty Burr writing \"The results are even closer to the touchstone of Jacques Demy‚Äôs beloved 1964 Umbrellas of Cherbourg than the earlier film [Guy and Madeline on a Park Bench]: love lost, found and lost again amid an evocation of a city‚Äôs hidden soul.\"[113] In June 2025, actors Simu Liu and Molly Ringwald cited the film as among their favorites of the 21st century.[114] In July 2025, it ranked number 16 on the \"Readers' Choice\" edition of The New York Times' list of \"The 100 Best Movies of the 21st Century.\"[115]\n",
    "\n",
    "        Cultural impact\n",
    "        Many elements of the film, including the visual style, use of colors, staging of the musical numbers and costume designs have been referenced numerous times in popular culture since its release. These include the entire opening segment of the 74th Golden Globe Awards, featuring parodies of \"Another Day of Sun,\" \"City of Stars\" and the planetarium sequence with host Jimmy Fallon, Nicole Kidman, Amy Adams, Sarah Paulson, Courtney B. Vance, Sterling K. Brown, Evan Rachel Wood, Rami Malek, and Kit Harington participating, an independently produced short film parody set in New York City titled NY NY Land, a skit on season 42 of Saturday Night Live where host Aziz Ansari plays a character who is interrogated over calling the film \"overrated\" because of its Oscar nominations, and a television commercial for the prescription Jardiance.[116][117][118][119] The 2018 single \"Love Scenario\" by IKon drew heavy inspiration from the film's epilogue sequence.[120] The 2021 Disney animated short film, Us Again, was also said to have been influenced by the film.[121][122] In the closing of The Simpsons episode \"Haw-Haw Land\" it is stated that the episode was supposed to be a parody of Moonlight rather than La La Land (itself parodying the mistake at the 89th Academy Awards.[123])\n",
    "\n",
    "        Accolades\n",
    "        Main article: List of accolades received by La La Land\n",
    "\n",
    "        Hurwitz, Chazelle, and Stone at the Mill Valley Film Festival in October 2016\n",
    "        Emma Stone won the Volpi Cup for Best Actress at the Venice Film Festival.\n",
    "\n",
    "        La La Land received 11 nominations at the 70th British Academy Film Awards, more than any other film of 2016.[124] The film won in the categories of Best Film, Best Director, Best Actress in a Leading Role (for Stone), Best Cinematography, and Best Film Music.[125]\n",
    "\n",
    "        At the 74th Golden Globe Awards, La La Land received a leading seven nominations.[126] The film won in all seven categories for which it was nominated, setting a record for the most Golden Globes won by a single film, namely Best Motion Picture ‚Äì Musical or Comedy, Best Director, Best Actor ‚Äì Comedy or Musical (for Gosling), Best Actress ‚Äì Comedy or Musical (for Stone), Best Screenplay, Best Original Score, and Best Original Song (\"City of Stars\") breaking the record One Flew Over the Cuckoo's Nest set for the most wins.[127]\n",
    "\n",
    "        At the 89th Academy Awards, La La Land received a leading six awards, namely Best Director, Best Actress (for Stone), Best Cinematography, Best Original Score, Best Original Song (\"City of Stars\"), and Best Production Design.[128] The film received a total of 14 nominations, tying the record for most nominations by a single film with All About Eve (1950) and Titanic (1997).[129] Its other nominations were Best Picture, Best Actor (for Gosling), Best Original Screenplay, Best Film Editing, Best Costume Design, a second nomination for Best Original Song (\"Audition (The Fools Who Dream)\"), Best Sound Editing, and Best Sound Mixing.[130]\n",
    "\n",
    "        Best Picture Oscar gaffe\n",
    "        See also: 89th Academy Awards ¬ß Best Picture announcement error\n",
    "        During the Oscars ceremony, presenter Faye Dunaway incorrectly announced that La La Land had won Best Picture, reading from the card Warren Beatty opened, which was actually a duplicate of the Best Actress card for Emma Stone.[131] After the cast and crew of La La Land took the stage, it took the show's producers more than two minutes (during which nearly three speeches were made) to fix the mistake. The actual winner was Moonlight.[132]\n",
    "\n",
    "        German television prank\n",
    "        In March 2017, La La Land was at the center of a prank involving Goldene Kamera, an annual German film and television award. German comedians Joko Winterscheidt and Klaas Heufer-Umlauf arranged for a Ryan Gosling impersonator to be awarded the \"Best International Film\" prize for La La Land.[133][134][135] Following the event, a speaker for television broadcaster ZDF asked for the trophy to be given back, stating that La La Land had won the prize and that the trophy would be given to the real Ryan Gosling.[136] The incident, which became known as \"GoslingGate\", sparked criticism of the event's concept. Media critics argued that the \"Best International Film\" award had only been created in an effort to get Ryan Gosling on the show, with no regards for the film's quality. The incident played a major role in the cancellation of the Goldene Kamera in 2019.[137][138] In 2018, Winterscheidt and Heufer-Umlauf were awarded the Grimme Award for their media criticism.[139]\n",
    "\n",
    "        Stage adaptations\n",
    "        Broadway musical\n",
    "        On February 7, 2023, it was announced that the film would be adapted into a Broadway musical by Platt and Lionsgate. Hurwitz, Pasek & Paul will return to write additional songs for the show. Bartlett Sher will direct from a book by Ayad Akhtar and Matthew Decker.[140] Alan Vaytsman, the new actor, will play Sebastian. He also contributed new songs, like \"The Greatest Showman\" when he plays Barnum.\n",
    "\n",
    "        So Long Boulder City\n",
    "        A theatrical spin-off, So Long Boulder City, was also created in 2017 by comedians Jimmy Fowlie and Jordan Black. The show was a full-length parody of Mia Dolan's one-woman show from the movie, and featured Fowlie in drag as Mia.[141] So Long Boulder City debuted in Los Angeles before enjoying a run at the SubCulture Off-Broadway theater in New York City.[142]\"\"\"\n",
    "    },\n",
    "    {\n",
    "        \"article_2\" : \"\"\" \n",
    "        Ryan Thomas Gosling (/Àà…°…ísl…™≈ã/ GOSS-ling;[1] born November 12, 1980) is a Canadian actor. His work includes both independent films and major studio features, and his accolades include a Golden Globe Award, in addition to nominations for three Academy Awards, a Primetime Emmy Award, and two British Academy Film Awards.\n",
    "\n",
    "        Gosling began his acting career when he was 13 on Disney Channel's The All New Mickey Mouse Club (1993‚Äì1995), and went on to appear in other family entertainment programs, including Are You Afraid of the Dark? (1995) and Goosebumps (1996). His breakthrough role was that of a Jewish neo-Nazi in The Believer (2001), and he gained stardom in the 2004 romantic drama The Notebook. He starred in the critically acclaimed independent dramas Half Nelson (2006), for which he was nominated for the Academy Award for Best Actor; Lars and the Real Girl (2007); and Blue Valentine (2010).\n",
    "\n",
    "        In 2011, Gosling had three mainstream successes in the romantic comedy Crazy, Stupid, Love, the political drama The Ides of March, and the action thriller Drive. After making his directorial debut with Lost River (2014), he starred in the financial satire The Big Short (2015), the action comedy The Nice Guys (2016), and the romantic musical La La Land (2016). The latter won him a Golden Globe and a second Academy Award nomination for Best Actor. Further acclaim followed with the science fiction film Blade Runner 2049 (2017) and the biopic First Man (2018). In 2023, he played Ken in the fantasy comedy Barbie, which emerged as his highest-grossing release and earned him a nomination for the Academy Award for Best Supporting Actor.\n",
    "\n",
    "        Gosling's band, Dead Man's Bones, released their self-titled debut album and toured North America in 2009. He is a co-owner of Tagine, a Moroccan restaurant in Beverly Hills, California. He is a supporter of PETA, Invisible Children, and the Enough Project and has traveled to Chad, Uganda and eastern Congo to raise awareness about conflicts in the regions. He has been involved in peace promotion efforts in Africa for over a decade. He is in a relationship with actress Eva Mendes, with whom he has two daughters.\n",
    "\n",
    "        Early life\n",
    "        Ryan Thomas Gosling was born on November 12, 1980, at St. Joseph's Hospital in London, Ontario;[2] he is the son of Thomas Ray Gosling, a travelling salesman for a paper mill,[3] and Donna, a secretary.[4][5] Both of his parents are of part French Canadian descent, along with some German, English, Scottish, and Irish.[6][7] He and his family were members of the Church of Jesus Christ of Latter-day Saints,[8] and Gosling has said that the religion influenced every aspect of their lives.[9] Because of his father's work, they \"moved around a lot\"[3] and Gosling lived in both Cornwall, Ontario,[10] and Burlington, Ontario.[11] His parents divorced when he was 13,[12] and he and his older sister Mandi lived with their mother,[4] an experience Gosling has credited with programming him \"to think like a girl\".[13]\n",
    "\n",
    "        Gosling was educated at Gladstone Public School,[14] Cornwall Collegiate and Vocational School and Lester B. Pearson High School.[15] As a child, he watched Dick Tracy and was inspired to become an actor.[16] He \"hated\" being a child,[9][17] was bullied in elementary school,[18] and had no friends until he was \"14 or 15\".[19][20] In school he was always picking fights to impress girls.[21] In grade one, having been heavily influenced by the action film First Blood, he took steak knives to school and threw them at other children during recess. This incident led to a suspension.[17] He was unable to read,[22] and was evaluated for attention deficit hyperactivity disorder (ADHD), but was not diagnosed with it and, contrary to false reports, never took medication.[23] His mother left her job and home-schooled him for a year.[24] He has said homeschooling gave him \"a sense of autonomy that I've never really lost\".[9] Gosling performed in front of audiences from an early age, encouraged by his sister being a performer.[25] He and his sister sang together at weddings; he performed with Elvis Perry, his uncle's Elvis Presley tribute act,[26] and was involved with a local ballet company.[27] Performing boosted his self-confidence as it was the only thing for which he received praise.[20] He developed an idiosyncratic accent because, as a child, he thought having a Canadian accent did not sound \"tough\". He began to model his accent on that of Marlon Brando.[28] Gosling dropped out of high school at age 17 to focus on his acting career.[29]\n",
    "\n",
    "        Acting career\n",
    "        See also: Ryan Gosling filmography\n",
    "        1993‚Äì1999: Career beginnings\n",
    "        In 1993, 12-year-old Gosling attended an open audition in Montreal for Disney Channel's revival of The Mickey Mouse Club.[25] After he successfully auditioned, he was given a two-year contract as a Mouseketeer and subsequently moved to Orlando, Florida to film the show.[29] He has said he appeared on-screen infrequently because other children were considered more talented.[30] Nonetheless, he has described the job as the greatest two years of his life.[29] Fellow cast members on the show included Britney Spears, Christina Aguilera, Justin Timberlake, Keri Russell, and JC Chasez. Gosling has credited the experience with instilling in him \"this great sense of focus.\"[31] He was specifically close friends with Timberlake because they lived together for six months during the second year of the show. Timberlake's mother became Gosling's legal guardian after his own mother had to return to Canada for work reasons.[32] Gosling has said that even though he and Timberlake talk infrequently, they are still supportive of each other.[31]\n",
    "\n",
    "        After the show ended in 1995, Gosling returned to Canada, where he continued to appear in family entertainment television series, including Are You Afraid of the Dark? (1995)[33] and Goosebumps (1996),[33] and starred in Breaker High (1997‚Äì98) as Sean Hanlon.[33] When he was 18, he moved to New Zealand to film the Fox Kids adventure series Young Hercules (1998‚Äì1999) as the title character.[33] He later said that he initially enjoyed working on the series, but began to care too much about the show, so it was no longer fun for him. He wanted to spend more time sitting with and devising a character as well as play a variety of roles, so he chose to transition into film and not accept any more television work.[29]\n",
    "\n",
    "        2000‚Äì2003: Independent films\n",
    "        Aged 19, Gosling decided to move into \"serious acting\". He was dropped by his agent and initially found it difficult to secure work because of the \"stigma\" attached to children's television.[34] After a supporting role in the football drama Remember the Titans, he secured a lead role as a young Jewish neo-Nazi in 2001's The Believer. Director Henry Bean said he cast Gosling because his Mormon upbringing helped him understand the isolation of Judaism.[35] Kevin Thomas of the Los Angeles Times praised an \"electrifying and terrifyingly convincing\" performance[36] while Todd McCarthy of Variety felt his \"dynamite performance\" could \"scarcely have been better\".[37] The film won the Grand Jury Prize at the Sundance Film Festival[38] and Gosling has described it as \"the film that kind of gift-wrapped for me the career that I have now.\"[26] Because of the controversial nature of the film, it was difficult to secure financial backing for a full theatrical release,[39] and the film was instead broadcast on Showtime.[39] The film was a commercial failure, grossing $416,925 worldwide from a production budget of $1.5 million.[40]\n",
    "\n",
    "        In 2002, Gosling co-starred in the psychological thriller Murder by Numbers with Sandra Bullock and Michael Pitt,[41] where Gosling and Pitt portrayed a pair of high school seniors who believe they can commit the perfect murder. Bullock played the detective tasked with investigating the crime. Lisa Schwarzbaum of Entertainment Weekly described him as \"a phenomenal talent even in junk like this\"[42] while Todd McCarthy felt that the \"strong and \"charismatic\" young actors were \"let down by the screenplay\".[43] The film was a minor commercial success, grossing $56 million worldwide from a production budget of $50 million.[44] His second screen appearance of 2002 was in The Slaughter Rule with David Morse which explores the relationship between a high school football player and his troubled coach in rural Montana. Gosling has said that the opportunity to work with Morse made him \"a better actor\".[45] Stephen Holden of The New York Times described Gosling as \"major star material\" with a \"rawness and an intensity that recall the young Matt Dillon\"[46] while Manohla Dargis of the Los Angeles Times was won over by his \"raw talent\".[47] The film was released in just three US theatres and grossed $13,411.[48]\n",
    "\n",
    "        In 2003, Gosling starred in The United States of Leland as a teenager imprisoned for the murder of a disabled boy. He was drawn to the role because it was unusual to find a character that was \"emotionally disconnected for the whole film.\"[49] Critic Roger Ebert felt that the \"gifted actor does everything that can be done with Leland, but the character comes from a writer's conceits, not from life.\"[50] A. O. Scott of The New York Times noted that he \"struggles to rescue Leland from the clutches of clich√©\"[51] while David Rooney of Variety felt that his \"one-note, blankly disturbed act has none of the magnetic edge of his breakthrough work in The Believer\".[52] The film grossed $343,847 in the United States and was not released overseas.[53]\n",
    "\n",
    "        2004‚Äì2009: The Notebook and Half Nelson\n",
    "        Gosling gained mainstream attention in 2004 after starring opposite fellow Canadian Rachel McAdams in the romantic drama film The Notebook, a film adaptation of Nicholas Sparks' novel of the same name, directed by Nick Cassavetes.[54] Gosling played Noah Calhoun and commented on the role: \"It gave me an opportunity to play a character over a period of time ‚Äì from 1940 to 1946 ‚Äì that was quite profound and formative.\"[55] He sought to imbue his character with \"quiet strength\" and was inspired by Sam Shepard's performance in Days of Heaven. Shepard co-starred in The Notebook.[56] Filming took place in Charleston, South Carolina, in late 2002 and early 2003.[57] Although Gosling and McAdams became romantically involved in 2005, they had a combative relationship on the set.[58][59] \"We inspired the worst in each other,\" Gosling has said. \"It was a strange experience, making a love story and not getting along with your co-star in any way.\"[9] At one point, Gosling asked Cassavetes to \"bring somebody else in for my off-camera shot\" because he felt McAdams was uncooperative.[59] The New York Times praised the \"spontaneous and combustible\" performances of the two leads and noted that, \"against your better judgment, you root for the pair to beat the odds against them.\"[60] Desson Thomson of The Washington Post praised Gosling's \"beguiling unaffectedness\" and noted that \"it's hard not to like these two or begrudge them a great love together\".[61] The film grossed over $115 million worldwide.[62] Gosling won four Teen Choice Awards[63] and an MTV Movie Award.[64] Entertainment Weekly has said that the movie contains the All-Time Best Movie Kiss[65] while the Los Angeles Times has included a scene from the film in a list of the 50 Classic Movie Kisses.[66] The Notebook has appeared on many Most Romantic Movies lists.[67][68][69][70]\n",
    "\n",
    "\n",
    "        Gosling at the 2007 Toronto International Film Festival\n",
    "        In 2005, Gosling appeared as a disturbed young art student in Stay, a psychological thriller film co-starring Naomi Watts and Ewan McGregor. In an uncomplimentary review of the film, Manohla Dargis of The New York Times stated that Gosling \"like his fans, deserves better.\"[71] Todd McCarthy remarked that the \"capable\" Gosling and McGregor \"deliver nothing new from what they've shown before\".[72] The film grossed $8 million worldwide.[73] Gosling was unfazed by the negative reaction: \"I had a kid come up to me on the street, 10 years old, and he says, 'Are you that guy from Stay? What the f--- was that movie about?' I think that's great. I'm just as proud if someone says, 'Hey, you made me sick in that movie,' as if they say I made them cry.\"[74]\n",
    "\n",
    "        Gosling next starred in 2006's Half Nelson as a drug-addicted junior high school teacher who forms a bond with a young student. To prepare for the role, Gosling moved to New York for one month before shooting began. He lived in a small apartment in Brooklyn and spent time shadowing an eighth grade teacher.[75] Kenneth Turan of the Los Angeles Times described it as \"a mesmerizing performance ... that shows the kind of deep understanding of character few actors manage.\"[76] Ruthe Stein of the San Francisco Chronicle drew comparisons with Marlon Brando and asserted that \"nobody who cares about great acting will want to miss his performance\".[77] Roger Ebert believed that his performance \"proves he's one of the finest actors working in contemporary movies.\"[78] Gosling garnered a nomination for the Academy Award for Best Actor.[22] The film grossed $4 million at the worldwide box office.[79] In 2007, he was invited to join the Academy of Motion Picture Arts and Sciences.[80]\n",
    "\n",
    "        Gosling played an introvert who falls for a sex doll in the 2007 film Lars and the Real Girl. He drew inspiration from James Stewart's performance in Harvey.[81] Roger Ebert felt \"a film about a life-sized love doll\" had been turned into \"a life-affirming statement of hope\" because of \"a performance by Ryan Gosling that says things that cannot be said\".[82] Ann Hornaday of The Washington Post described his performance as \"a small miracle ... because he changes and grows so imperceptibly before our eyes.\"[83] However, Manohla Dargis of The New York Times felt \"the performance is a rare miscalculation in a mostly brilliant career.\"[84] He was nominated for a Golden Globe Award for Best Actor ‚Äì Motion Picture Musical or Comedy and a Screen Actors Guild Award for Outstanding Performance by a Male Actor in a Leading Role.[85][86] The film was a box office failure, failing to recoup its $12 million production budget.[87]\n",
    "\n",
    "        Gosling starred opposite Anthony Hopkins in the 2007 courtroom thriller Fracture. He originally turned down the role, but changed his mind when Hopkins signed on.[21] Gosling noted that he was drawn to his character, Willie, because he had flaws and seemed like a real person.[88] He spent time shadowing lawyers and observing courtroom proceedings in preparation for the role.[89] Claudia Puig of USA Today declared that \"watching a veteran like Hopkins verbally joust with one of the best young actors in Hollywood is worth the price of admission\".[90] Manohla Dargis of The New York Times felt it was a treat to watch \"the spectacle of that crafty scene stealer Anthony Hopkins mixing it up with that equally cunning screen nibbler Ryan Gosling ... Each actor is playing a pulp type rather than a fully formed individual, but both fill in the blanks with an alchemical mix of professional and personal charisma.\"[91] The film grossed over $91 million worldwide.[92]\n",
    "\n",
    "        Gosling was scheduled to begin filming The Lovely Bones in 2007. However, he left the production two days before filming began because of \"creative differences\" and was replaced by Mark Wahlberg.[93] Gosling was cast as the father of the murdered teenage girl and initially felt he was too young for the role. The director Peter Jackson and the producer Fran Walsh persuaded him that he could be aged with hair and make-up changes.[94] Before shooting began, Gosling gained 60 pounds (27 kilograms) in weight and grew a beard to appear older.[94] Walsh then \"began to feel he was not right. It was our blindness, the desire to make it work no matter what.\"[94] Gosling later said, \"We didn't talk very much during the preproduction process, which was the problem ... I just showed up on set, and I had gotten it wrong. Then I was fat and unemployed.\"[94] He has said the experience was \"an important realisation for me: not to let your ego get involved. It's OK to be too young for a role.\"[95]\n",
    "\n",
    "        2010‚Äì2012: Widespread recognition\n",
    "        Following a three-year absence from the screen, Gosling starred in five films in 2010 and 2011. \"I've never had more energy,\" Gosling said. \"I'm more excited to make films than I used to be. I used to kind of dread it. It was so emotional and taxing. But I've found a way to have fun while doing it. And I think that translates into the films.\"[34] He has also spoken of feeling depressed when not working.[20] In 2010, he starred opposite Michelle Williams in Derek Cianfrance's directorial debut, the marital drama Blue Valentine. The low-budget film was mainly improvised and Gosling has said \"you had to remind yourself you were making a film\".[96] Mick LaSalle of the San Francisco Chronicle felt he \"brings a preternatural understanding of people to his performance\"[97] while A.O. Scott of The New York Times found him to be \"convincing as the run-down, desperate, older Dean, and maybe a bit less so as the younger version\".[98] Owen Gleiberman of Entertainment Weekly wrote that he \"plays Dean as a snarky working-class hipster, but when his anger is unleashed, the performance turns powerful.\"[99] However, Wesley Morris of The Boston Globe felt the performance was an example of \"hipsterism misdirected\".[100] He was nominated for a Golden Globe Award for Best Actor ‚Äì Motion Picture Drama.[101] The film was a box office success, grossing over $12 million worldwide from a production budget of $1 million.[102]\n",
    "\n",
    "        Gosling's second on-screen appearance of 2010 was in the mystery film All Good Things with Kirsten Dunst, based on a true story. He played the role of New York real-estate heir David Marks, who was investigated for the disappearance of his wife (played by Dunst).[103] Gosling found the filming process to be a \"dark experience\" and did not undertake any promotional duties for the film.[104] When asked if he was proud of the film, he said, \"I'm proud of what Kirsten does in the movie.\"[104] Peter Travers of Rolling Stone wrote that he \"gets so deep into character you can feel his nerve endings.\"[105] Mick LaSalle of the San Francisco Chronicle found the \"chameleonic Gosling is completely convincing as this empty shell of a man\".[106] Betsy Sharkey of the Los Angeles Times felt that the film belonged to Dunst, but praised Gosling's performance.[107] The film grossed $644,535 worldwide.[108] Also in 2010, Gosling narrated and produced ReGeneration, a documentary that explores the cynicism in today's youth towards social and political causes.[109][110]\n",
    "\n",
    "        Gosling in 2011\n",
    "        2011 saw Gosling expand his horizons by appearing in three diverse, high-profile roles. He co-starred in his first comedic role in the romantic comedy-drama Crazy, Stupid, Love, with Steve Carell and Emma Stone.[111] Gosling took cocktail-making classes at a Los Angeles bar in preparation for his role as a smooth-talking ladies' man.[112] Ann Hornaday of The Washington Post said his \"seductive command presence suggests we may have found our next George Clooney\".[113] Peter Travers declared him \"a comic knockout\"[114] while Claudia Puig of USA Today felt he reveals a \"surprising\" \"knack for comedy.\"[115] He was nominated for a Golden Globe Award for Best Actor ‚Äì Motion Picture Musical or Comedy.[116] The film was a box office success, grossing over $142 million worldwide.[117] With adjustments for inflation, it is the fourth most successful of Gosling's career.[118]\n",
    "\n",
    "        Gosling's first action role was in Drive, based on a novel by James Sallis.[119] Gosling played a Hollywood stunt performer who moonlights as a getaway driver, and he has described the film as a \"violent John Hughes movie\": \"I always thought if Pretty in Pink had head-smashing it would be perfect\".[120] Roger Ebert compared Gosling to Steve McQueen and stated that he \"embodies presence and sincerity ... he has shown a gift for finding arresting, powerful characters [and] can achieve just about anything.[121] Joe Morgenstern of The Wall Street Journal pondered \"the ongoing mystery of how he manages to have so much impact with so little apparent effort. It's irresistible to liken his economical style to that of Marlon Brando.\"[122] The film was a box office success, grossing $81 million worldwide from a production budget of $15 million.[123]\n",
    "\n",
    "        In his final appearance of 2011, Gosling co-starred with Philip Seymour Hoffman in the political drama The Ides of March directed by George Clooney, in which he played an ambitious press secretary.[124] Gosling partly decided to do the film to become more politically aware: \"I'm Canadian and so American politics aren't really in my wheelhouse.\"[125] Joe Morganstern stated that Gosling and Hoffman \"are eminently well equipped to play variations on their characters' main themes. Yet neither actor has great material to conjure with in the script.\"[126] In a generally tepid review, Kenneth Turan of the Los Angeles Times asserted that it was \"certainly involving to see the charismatic Gosling verbally spar with superb character actors like Hoffman and [Paul] Giamatti.\"[127] Mick LaSalle of the San Francisco Chronicle felt there was \"one aspect to the character that Gosling can't quite nail down, that might simply be outside his sphere, which is idealism.\"[128] He was nominated for a Golden Globe Award for Best Actor ‚Äì Motion Picture Drama.[116] The film grossed $66 million worldwide.[129]\n",
    "\n",
    "        In 2012, Gosling filmed Terrence Malick's Song to Song, but the film would not be released until 2017.[130][131]\n",
    "\n",
    "        2013‚Äì2014: Mixed critical reception and directorial debut\n",
    "\n",
    "        Gosling at the 2014 Cannes Film Festival\n",
    "        In 2013's crime thriller Gangster Squad, Gosling portrayed Sgt. Jerry Wooters, a 1940s LAPD officer who attempts to outsmart mob boss Mickey Cohen (played by Sean Penn). He was reunited with Emma Stone as his love interest, after their earlier pairing in Crazy, Stupid, Love. Stone has said she hopes they will find more projects to work together on.[132] A.O. Scott of The New York Times described the film as an excuse for the cast \"to earn some money trying out funny voices and suppressing whatever sense of nuance they might possess.\"[133] Christy Lemire of The Boston Globe criticized Gosling's \"weird, whispery voice\" and his \"barely developed, one-note\" character.[134] However, Betsy Sharkey of the Los Angeles Times felt that there was \"a seductive power\" in the scenes shared by Gosling and Stone: \"But like too much else in the film, it's a scenario that is only half played out.\"[135]\n",
    "\n",
    "        In The Place Beyond the Pines, a generational drama directed by Blue Valentine's Derek Cianfrance,[136] Gosling played Luke, a motorcycle stunt rider who robs banks to provide for his family.[137] The shoot was described by Gosling as \"the best experience I have ever had making a film.\"[27] A. O. Scott of The New York Times praised his performance, writing: \"Mr. Gosling's cool self-possession ‚Äî the only thing he was allowed to display in \"Drive\" ‚Äî is complicated, made interesting, by hints of childlike innocence and vulnerability.\"[138] Scott Foundas of The Village Voice was unimpressed: \"Gosling's character verges on parody ... Gosling uses a soft, wounded half-whisper that tells us this is all some kind of put-on ... It's a close variation on the role Gosling played to stronger effect in Nicolas Winding Refn's existential Hollywood thriller, Drive, where it was clear the character was meant to be an abstraction.\"[139] David Denby of The New Yorker remarked that he \"reprises his inexorable-loner routine\".[140] The film grossed $35 million worldwide from a production budget of $15 million.[141]\n",
    "\n",
    "        Later in 2013, Gosling starred in the violent revenge drama Only God Forgives,[142] directed by Drive's Nicolas Winding Refn. Gosling undertook Muay Thai training in preparation for the role,[143] and has described the script as \"the strangest thing I've ever read\".[143] Both the film and his performance drew negative reviews.[144][145][146] David Edelstein of New York magazine stated, \"Gosling looked like a major actor as a skinhead in The Believer and a star in Half Nelson. Then he stopped acting and started posing. His performance in Only God Forgives (would God forgive that title?) is one long, moist stare\".[147] Stephen Holden of the New York Times criticized Gosling's inability \"to give his automaton any suggestion of an inner life\".[148] Peter Travers of Rolling Stone commented that Gosling, while \"meant to be a blank page for us to write on, often looks merely blank\".[149]\n",
    "\n",
    "        In early 2013, Gosling announced that he was taking a break from acting, stating, \"I've lost perspective on what I'm doing. I think it's good for me to take a break and reassess why I'm doing it and how I'm doing it. And I think this is probably a good way to learn about that.\"[150] Gosling's directorial debut Lost River competed in the Un Certain Regard section at the 2014 Cannes Film Festival.[151] The \"fantasy noir\", written by Gosling, stars Christina Hendricks, Ben Mendelsohn, and Matt Smith.[152][153] The film received largely unfavorable reviews.[154] Peter Bradshaw of The Guardian found it \"insufferably conceited\" and remarked that Gosling had lost \"any sense of proportion or humility.\"[155] Robbie Collin of The Daily Telegraph described Lost River as \"mind-bogglingly pleased with itself\",[156] while Variety's Justin Chang dismissed the \"derivative\" film as a \"train-wreck.\"[157]\n",
    "\n",
    "        2015‚Äìpresent: Established actor\n",
    "\n",
    "        Gosling at the 2017 San Diego Comic-Con\n",
    "        In 2015, Gosling played a bond salesman in the ensemble financial satire The Big Short, a Best Picture nominee at the 2016 Academy Awards. David Sims of The Atlantic felt that he was \"smarmily funny, somehow simultaneously magnetic and repulsive; after years wandering the halls of mediocre art cinema, it's wonderful to see him cut loose again.\"[158] Peter Travers of Rolling Stone said: \"Gosling, a virtuoso of verbal sleaze, talks directly to the camera, and he's volcanically fierce and funny.\"[159] The following year, Gosling starred in the black comedy The Nice Guys, opposite Russell Crowe,[160] and in Damien Chazelle's musical La La Land, for which he won the Golden Globe Award for Best Actor ‚Äì Motion Picture Musical or Comedy and received his second Academy Award for Best Actor nomination.[161] Robbie Collin praised his chemistry with co-star Emma Stone, writing: \"Both stars are so attuned to each other's pace and flow that their repartee just seems to tumble out, perfectly formed.\"[162] It emerged as one of his most commercially successful films, with earnings of over $440 million against its $30 million budget.[163]\n",
    "\n",
    "        Gosling was signed on to work with Terrence Malick in 2004 on the biographical film Che, but later dropped out.[164][165] He later starred in Malick's Song to Song (2017), which had been filmed in 2012, and co-starred Rooney Mara, Michael Fassbender, and Natalie Portman.[166][167] Also in 2017, he starred in Blade Runner 2049, a sequel to the 1982 science fiction film Blade Runner, directed by Denis Villeneuve and co-starring Harrison Ford, who reprised his role as Rick Deckard. Gosling's role was as Officer K, a \"blade runner\" working for the LAPD whose job it is to kill rogue bioengineered humans known as replicants.[168] A. O. Scott found him to be perfectly cast, adding that his \"ability to elicit sympathy while seeming too distracted to want it ‚Äì his knack for making boredom look like passion and vice versa ‚Äì makes him a perfect warm-blooded robot for our time\".[169] Despite being Gosling's largest box office opening, grossing $31.5 million domestically, the film generally underperformed at the box office.[170]\n",
    "\n",
    "        In 2018, Gosling portrayed Neil Armstrong, the astronaut who became the first man to walk on the Moon in 1969, in Chazelle's biopic First Man, based on the book First Man: The Life of Neil A. Armstrong.[171] Writing for IndieWire, Michael Nordine commended him for bringing \"quiet charisma\" and \"grace\" to his role, while Nicholas Barber of the BBC hailed him as the \"best deadpan actor in the business\".[172][173] He received a nomination for the Critics' Choice Movie Award for Best Actor.[174]\n",
    "\n",
    "        After a four-year break from film, Gosling returned starring in the 2022 spy-action thriller The Gray Man, opposite Chris Evans and Ana de Armas.[175] The film had a limited theatrical release and was distributed by Netflix. Despite negative reviews from critics, who described the film as \"mediocre\" and full of cliches, a sequel has been announced and is in development.[176][177] In the following year, Gosling starred as Ken in Greta Gerwig's fantasy comedy Barbie, opposite Margot Robbie in the title role.[178] He also sang the song \"I'm Just Ken\" for the film's accompanying soundtrack as well as a cover of \"Push\" by Matchbox Twenty.[179][180] His performance was acclaimed, with Anthony Lane of The New Yorker lauding his comedic performance as \"peak Gosling\",[181] and Vulture's Alison Willmore wrote that he \"comes close to stealing the movie\".[182] He received Golden Globe, Critics' Choice, SAG, BAFTA, and Academy Award nominations for his performance.[183][184][185][186][187] He performed \"I'm Just Ken\" live at the 96th Academy Awards, where it was nominated for Best Original Song.[188]\n",
    "\n",
    "        Gosling next starred in the action comedy film The Fall Guy alongside Emily Blunt.[189][190] It received positive reviews from critics but did not perform well commercially.[191] Gosling will next produce and star in Project Hail Mary, based on Andy Weir's science fiction novel of the same name.[192]\n",
    "\n",
    "        Music career\n",
    "        Main article: Dead Man's Bones\n",
    "\n",
    "        Gosling at a Dead Man's Bones concert in 2009\n",
    "        In 2000, Gosling published a solo album with the misspelled title \"Angel With Tatooed Wings\".[193] The track \"Put Me in the Car\" from this album was made available for download on the Internet in 2007.[194] Also that year, Gosling and his friend Zach Shields formed the indie rock band Dead Man's Bones. The two first met in 2005 when Gosling was dating Rachel McAdams and Shields was dating her sister, Kayleen.[195][196] They initially conceived of the project as a monster-themed musical but settled on forming a band when they realized putting on a stage production would be too expensive.[195] They recorded their eponymous debut album with the Silverlake Conservatory's Children's Choir and learned to play all the instruments themselves.[195] Gosling contributed vocals, piano, guitar, bass guitar and cello to the record.[196] The album was released through ANTI- Records on October 6, 2009.[197] Pitchfork Media was won over by the \"unique, catchy and lovably weird record\"[198] while Prefix felt the album was \"rarely kitschy and never inappropriate\".[199] However, Spin felt the album \"doesn't reverse the rule that actors make dubious pop musicians\"[200] and Entertainment Weekly criticized its \"cloying, gothic preciousness\".[201]\n",
    "\n",
    "        In September 2009, Gosling and Shields had a three-night residency at LA's Bob Baker Marionette Theater where they performed alongside dancing neon skeletons and glowing ghosts.[196][202] They then conducted a thirteen-date tour of North America in October 2009, using a local children's choir at every show.[203][204] Instead of an opening act, a talent show was held each night.[205] In September 2010, they performed at Los Angeles' FYF Festival. In 2011, the actor spoke of his intentions to record a second Dead Man's Bones album. No children's choir will be featured on the follow-up album because \"it's not very rock 'n' roll\".[206]\n",
    "\n",
    "        Personal life\n",
    "\n",
    "        Gosling at the 2011 Cannes Film Festival\n",
    "        Gosling previously resided in New York City.[16][207] He co-owns Tagine, a Moroccan restaurant in Beverly Hills, California.[208] He bought the restaurant on an impulse; he said he spent \"all [his] money\" on it,[209] spent a year doing the renovation work himself, and now oversees the restaurant's menus.[209][210]\n",
    "\n",
    "        Gosling dated his Murder by Numbers co-star Sandra Bullock from 2002 to 2003.[211] He then had a relationship with his The Notebook co-star Rachel McAdams from 2005 to 2007;[212] they briefly reunited in 2008.[213][214]\n",
    "\n",
    "        Gosling has been in a relationship with his The Place Beyond the Pines co-star Eva Mendes since September 2011.[215] They have two daughters, born in 2014 and 2016.[216][217] When asked in a 2022 interview if she and Gosling had married, Mendes said that \"I like to keep it all mysterious\".[218]\n",
    "\n",
    "        Charity work\n",
    "        Gosling supports various social causes. He has worked with PETA to encourage KFC and McDonald's to use improved methods of chicken slaughter, and on a campaign encouraging dairy farmers to stop de-horning cows.[219][220][221]\n",
    "\n",
    "        In 2005, Gosling volunteered in Biloxi, Mississippi, in the clean-up effort following Hurricane Katrina.[222] He is a supporter of Invisible Children, Inc., a group that raises awareness about the Lord's Resistance Army (LRA) in Central Africa.[223] In 2005, he traveled to Darfur refugee camps in Chad.[22][224] He was a speaker at Campus Progress' National Conference in 2008, where he discussed Darfur.[225] As part of his work with the Enough Project, he visited Uganda in 2007[226] and eastern Congo in 2010.[227]\n",
    "\n",
    "        Accolades\n",
    "        Main article: List of awards and nominations received by Ryan Gosling\n",
    "        Among his many accolades, Gosling has received three Academy Award nominations, two British Academy Film Award nominations, one Golden Globe Award from six nominations, and six Screen Actors Guild Award nominations.\n",
    "\n",
    "        In 2006, his role as a troubled history teacher in the drama film Half Nelson gained him nominations for an Academy Award[228] and Screen Actors Guild Award[229] for Best Actor. He received nominations for an Academy Award,[230] British Academy Film Award,[231] Golden Globe Award and Screen Actors Guild Award[232] for La La Land (2016) and Barbie (2023) in the Best Actor and Best Supporting Actor categories respectively, winning a Golden Globe Award for the former. His performances in Lars and the Real Girl (2007),[233] Blue Valentine (2010),[234] The Ides of March, and Crazy, Stupid, Love (both 2011);[235] also earned him Golden Globe nominations.\n",
    "        \"\"\"\n",
    "    },\n",
    "    {\n",
    "        \"article_3\" : \"\"\"Emily Jean \"Emma\" Stone (born November 6, 1988) is an American actress and film producer. Her accolades include two Academy Awards, two British Academy Film Awards, and two Golden Globe Awards. In 2017, she was the world's highest-paid actress and named by Time magazine as one of the 100 most influential people in the world.\n",
    "\n",
    "        Stone began acting as a child in a theater production of The Wind in the Willows in 2000. As a teenager, she relocated to Los Angeles and made her television debut in In Search of the New Partridge Family (2004), a reality show that produced only an unsold pilot. After small television roles, she appeared in a series of well-received comedy films, such as Superbad (2007), Zombieland (2009), and Easy A (2010), which was Stone's first leading role. Following this breakthrough, she starred in the romantic comedy Crazy, Stupid, Love (2011) and the period drama The Help (2011), and gained wider recognition as Gwen Stacy in the 2012 superhero film The Amazing Spider-Man and its 2014 sequel.\n",
    "\n",
    "        Stone received nominations for the Academy Award for Best Supporting Actress for playing a recovering drug addict in Birdman (2014) and Abigail Masham in The Favourite (2018). The latter marked her first of many collaborations with director Yorgos Lanthimos. She won two Academy Awards for Best Actress for her roles as an aspiring actress in the romantic musical La La Land (2016) and a resurrected suicide victim in Lanthimos' comic fantasy Poor Things (2023). She also portrayed tennis player Billie Jean King in Battle of the Sexes (2017) and the title role in Cruella (2021). On television, she starred in the dark comedy miniseries Maniac (2018) and The Curse (2023).\n",
    "\n",
    "        On Broadway, Stone starred as Sally Bowles in a revival of the musical Cabaret (2014‚Äì2015). She and her husband, Dave McCary, founded the production company Fruit Tree in 2020.\n",
    "\n",
    "        Early life\n",
    "        Emily Jean Stone was born on November 6, 1988, in Scottsdale, Arizona, to Jeffrey Charles Stone, the founder and CEO of a general-contracting company, and Krista Jean Stone (n√©e Yeager), a homemaker.[1][2] She lived on the grounds of the Camelback Inn resort from ages 12 to 15.[3][4] She has a younger brother, Spencer.[5] Her paternal grandfather, Conrad Ostberg Sten, was from a Swedish family that anglicized their surname to \"Stone\". She also has German, English, Scottish, and Irish ancestry.[6]\n",
    "\n",
    "        Valley Youth Theatre in Phoenix, Arizona, where Stone appeared in sixteen productions\n",
    "        As an infant, Stone had baby colic and cried frequently. She consequently developed nodules and calluses on her vocal cords while she was a child.[7] Stone has described herself as \"loud\" and \"bossy\" while growing up.[8] She was educated at Sequoya Elementary School and attended Cocopah Middle School for sixth grade. Stone did not like school, though once said that her controlling nature meant that \"I made sure I got all A's\".[9] She suffered panic attacks and anxiety as a child,[10] and said they caused a decline in her social skills.[11] Stone underwent therapy but said it was her participation in local theater plays that helped cure the attacks, recalling:\n",
    "\n",
    "        The first time I had a panic attack I was sitting in my friend's house, and I thought the house was burning down. I called my mom and she brought me home, and for the next three years it just would not stop. I would go to the nurse at lunch most days and just wring my hands. I would ask my mom to tell me exactly how the day was going to be, then ask again 30 seconds later. I just needed to know that no one was going to die and nothing was going to change.[10]\n",
    "\n",
    "        Stone wanted to act since age four;[4] she wanted a career in sketch comedy initially, but shifted her focus to musical theater, and took vocal lessons for several years.[12] Her acting debut, at age 11, came in a stage production of The Wind in the Willows, playing Otter.[13] Stone was homeschooled for two years, during which time she appeared in 16 productions at Phoenix's Valley Youth Theatre‚Äîincluding The Princess and the Pea, Alice's Adventures in Wonderland, and Joseph and the Amazing Technicolor Dreamcoat[1]‚Äîand performed with the theater's improvisational comedy troupe.[14] Around this time, she traveled to Los Angeles and auditioned unsuccessfully for a role on Nickelodeon's All That.[15] Her parents later sent her for private acting lessons with a local acting coach, who had worked at the William Morris Agency in the 1970s.[2]\n",
    "\n",
    "        Stone attended Xavier College Preparatory‚Äîan all-girl Catholic high school‚Äîas a freshman, but dropped out after one semester to become an actress.[1] She prepared a PowerPoint presentation for her parents titled \"Project Hollywood\" (featuring Madonna's 2003 song \"Hollywood\") to convince them to let her move to California to pursue an acting career.[12] In January 2004, she moved with her mother to an apartment in Los Angeles. She recalled, \"I went up for every single show on the Disney Channel and auditioned to play the daughter on every single sitcom\", adding, \"I ended up getting none.\"[4] Between auditions for roles, she enrolled in online high-school classes and worked part-time at a dog-treat bakery.[2][10]\n",
    "\n",
    "        Career\n",
    "        Career beginnings (2004‚Äì2009)\n",
    "        When Stone registered for the Screen Actors Guild at age 16, the name \"Emily Stone\" was already taken, and she briefly went by \"Riley Stone\".[16] She made her television debut as Laurie Partridge on the VH1 talent competition reality show In Search of the New Partridge Family (2004). The resulting show, retitled The New Partridge Family (2004), remained an unsold pilot.[17] After guest-starring in the television shows Medium (2005) and Malcolm in the Middle (2006), she decided to change her stage name to \"Emma\"‚Äîchosen in honor of Emma Bunton of the Spice Girls‚Äîas she struggled to adapt to the name Riley.[a][16][20] She next appeared in Louis C.K.'s HBO series Lucky Louie (2006),[10] and unsuccessfully auditioned to star as Claire Bennet in the NBC science fiction drama Heroes (2007), later calling this her \"rock bottom\" experience.[2] In April 2007, she played Violet Trimble in the Fox action drama Drive, but the show was canceled after seven episodes.[1]\n",
    "\n",
    "        Stone made her feature film debut in Greg Mottola's comedy Superbad (2007), co-starring Michael Cera and Jonah Hill. The film tells the story of two high school students who go through a series of comic misadventures after they plan to buy alcohol for a party. To play Hill's romantic interest, she dyed her hair red.[21] Stone has described the experience of acting in her first film as \"amazing ... [but] very different than other experiences I've had since then\".[22] The film was a commercial success, and earned her the Young Hollywood Award for Exciting New Face.[23][24]\n",
    "\n",
    "        Stone in 2009\n",
    "        The next year, Stone starred in the comedy The Rocker (2008) as Amelia Stone, the \"straight face\" bass guitarist in a band; she learned to play the bass for the role.[25] The actress, who has called herself \"a big smiler and laugher\", said she found it difficult to play a character whose personality was so different from her own. The film and her performance received negative reviews from critics and was a commercial failure.[26][27] Her next release, the romantic comedy The House Bunny, performed better at the box office, becoming a moderate commercial success.[28] The film saw her play the president of a sorority, and perform a cover version of the Waitresses' 1982 song \"I Know What Boys Like\".[29] Reviews were generally negative,[30] but Stone was praised,[31] with TV Guide's Ken Fox writing that she \"is well on her way to becoming a star\".[32]\n",
    "\n",
    "        Stone appeared in three films released in 2009. The first of these was opposite Matthew McConaughey, Jennifer Garner and Michael Douglas in Mark Waters's Ghosts of Girlfriends Past. Loosely based on Charles Dickens's 1843 novella A Christmas Carol, the romantic comedy has her playing a ghost who haunts her former boyfriend. Critical reaction to the film was negative, but it was a modest commercial success.[33][34] Her most financially profitable venture that year was Ruben Fleischer's $102.3 million-grossing horror comedy film Zombieland,[35] in which she featured alongside Jesse Eisenberg, Woody Harrelson and Abigail Breslin. In the film, she appeared as a con artist and survivor of a zombie apocalypse, in a role which Chris Hewitt of Empire magazine thought was \"somewhat underwritten\".[36] In a more positive review, Tim Robey of The Daily Telegraph called \"the hugely promising Stone [‚Ä¶] a tough cookie who projects the aura of being wiser than her years\".[37] Stone's third release in 2009 was Kieran and Michelle Mulroney's Paper Man, a comedy-drama which disappointed critics.[38]\n",
    "\n",
    "        Rise to prominence (2010‚Äì2013)\n",
    "        Stone voiced an Australian Shepherd in Marmaduke (2010), a comedy from director Tom Dey based on Brad Anderson's long-running comic strip of the same name.[39] Her breakthrough came the same year with a starring role in Easy A, a teen comedy directed by Will Gluck.[40][41] Partially based on Nathaniel Hawthorne's 1850 novel The Scarlet Letter, the film tells the story of Olive Penderghast (Stone), a high school student who becomes embroiled in a comic sex scandal after a false rumor circulates that she is sexually promiscuous. Stone read the script before the project was optioned for production, and pursued it with her manager while production details were being finalized. She found the script \"so different and unique from anything I'd read before\", calling it \"funny and sweet\".[42] When Stone discovered that the film had begun production, she met with Gluck, expressing her enthusiasm for the project. A few months later, the audition process started and she met again with Gluck, becoming one of the first actresses to audition.[43] The film received positive critical reviews, and Stone's performance was considered its prime asset.[44] Anna Smith of Time Out wrote, \"Stone gives a terrific performance, her knowing drawl implying intellect and indifference with underlying warmth.\"[45] The film was a commercial success, grossing $75 million against its $8 million budget.[46] Stone was nominated for a BAFTA Rising Star Award and a Golden Globe Award for Best Actress in a Musical or Comedy, and won the MTV Movie Award for Best Comedic Performance.[47]\n",
    "\n",
    "        Stone promoting The Amazing Spider-Man in 2012\n",
    "        In October 2010, Stone hosted an episode of NBC's sketch comedy Saturday Night Live; her appearances included a sketch playing off her resemblance to Lindsay Lohan.[48] Stone called it \"the greatest week of my life\".[4][49] She hosted again in 2011, appeared in an episode in 2014, and in its 40th anniversary special in 2015.[50] A brief appearance in the sex comedy Friends with Benefits (2011) reunited her with Gluck.[51] She followed this with a supporting role in Glenn Ficarra and John Requa's romantic comedy Crazy, Stupid, Love (2011) alongside Steve Carell, Ryan Gosling and Julianne Moore. The film featured her as a law school graduate, and the love interest of Gosling's character. Despite finding \"some inevitable collapses into convention\" in the film, Drew McWeeny of HitFix wrote that Stone \"ties the whole film together\".[52] At the 2012 Teen Choice Awards, she won the Choice Movie Actress ‚Äì Comedy award for her performance in the film.[53] Crazy, Stupid, Love was a box office success, grossing $142.9 million worldwide against a production budget of $50 million.[54]\n",
    "\n",
    "        Dismayed at being typecast as \"the sarcastic interest of the guy\", Stone co-starred with Viola Davis in Tate Taylor's period drama The Help (2011), a film she found challenging.[55] The film is based on Kathryn Stockett's 2009 novel of the same name and is set in 1960s Jackson, Mississippi. She met with Taylor to express a desire to work on the film. The director said, \"[Stone] was completely awkward and dorky, with her raspy voice, and she sat down and we got a little intoxicated and had a blast, and I just thought, 'God! God! This is Skeeter.\"[56] She was cast as Eugenia \"Skeeter\" Phelan, an aspiring writer learning about the lives of the African-American maids. In preparation for the part, she learned to speak in a Southern accent and educated herself on the Civil Rights Movement through literature and film.[57] With a worldwide gross of $216 million against a $25 million budget, The Help became Stone's highest-grossing film to that point.[58] The film, and her performance, received positive reviews from critics. Writing for Empire, Anna Smith thought Stone was \"well-meaning and hugely likable\" despite finding flaws in the character.[59] The film was nominated for an Academy Award for Best Picture,[60] and won Best Ensemble Cast from the Women Film Critics Circle and the Broadcast Film Critics Association.[61][62]\n",
    "\n",
    "        Stone turned down a role in the action comedy 21 Jump Street after signing on to Marc Webb's 2012 film The Amazing Spider-Man, a reboot of Sam Raimi's Spider-Man series.[63][64] She portrayed Gwen Stacy, the love interest of the titular superhero (played by Andrew Garfield).[65] Stone returned to her natural blonde hair color for the role, having dyed it red previously.[66][67] She admitted to having never read the comics, and therefore felt responsible to educate herself about Spider-Man: \"My experience was with the Sam Raimi movies ... I always assumed that Mary Jane was his first love\",[68] adding that she was only familiar with Stacy's character as portrayed by Bryce Dallas Howard in Spider-Man 3.[69][70] The Amazing Spider-Man was a commercial success and was the seventh highest-grossing film of the year with global revenues of $757.9 million.[71] Entertainment Weekly's Lisa Schwarzbaum found Stone to be \"irresistible\",[72] and Ian Freer of Empire was particularly impressed with Stone's and Garfield's performances.[73] At the annual People's Choice Awards ceremony, she was nominated for three awards, including Favorite Movie Actress.[74] Later that year, Stone voiced a role in the crime-based video game Sleeping Dogs, which earned her a Spike Video Game Award.[75]\n",
    "\n",
    "        Stone began 2013 with a voice role in the DreamWorks Animation film The Croods, which was nominated for the Academy Award for Best Animated Feature.[76] This followed with an appearance in Movie 43, an anthology film which consists of 16 short stories‚Äîshe played the title role in the segment entitled \"Veronica\".[77] She next starred alongside Ryan Gosling and Sean Penn in Ruben Fleischer's Gangster Squad (2013), a crime thriller set in Los Angeles during the 1940s.[78] A. O. Scott of The New York Times dismissed the film as \"a hectic jumble of fedoras and zoot suits\", but praised Stone's pairing with Gosling.[79]\n",
    "\n",
    "        Established actress (2014‚Äì2017)\n",
    "        In 2014, Stone reprised the role of Gwen Stacy in The Amazing Spider-Man 2. She believed that her character did not depend on the film's protagonist, asserting: \"She saves him more than he saves her. She's incredibly helpful to Spider-Man ... He's the muscle, she's the brains.\"[80] Her performance was well received by critics;[81] an Empire reviewer commended her for standing out in the film, writing, \"Stone is the Heath Ledger of this series, doing something unexpected with an easily dismissed supporting character.\"[82] The role won her the Favorite Movie Actress award at the 2015 Kids' Choice Awards.[83] Later that year, Stone took on a role in Woody Allen's romantic comedy Magic in the Moonlight, a modest commercial success.[84] A. O. Scott criticized her role, and pairing with Colin Firth, describing it as \"the kind of pedantic nonsense that is meant to signify superior intellect\".[85]\n",
    "\n",
    "        The black comedy Birdman, directed by Alejandro Gonz√°lez I√±√°rritu, was Stone's final film release of 2014. Co-starring Michael Keaton and Edward Norton, it featured her as Sam Thomson, the recovering-addict daughter of actor Riggan Thomson (Keaton), who becomes his assistant. I√±√°rritu created the character based on his experience with his daughter.[86] Birdman was critically acclaimed,[87] and was the most successful film at the 87th Academy Awards; it was nominated for nine awards, winning four, including Best Picture.[88] The Movie Network deemed it one of Stone's best performances to date, and Robbie Collin of The Daily Telegraph found her to be \"superb\" and \"tremendous\" in her role, while also highlighting her monologue in the film which he believed to have been \"delivered like a knitting needle to the gut\".[89][90] She received Academy, BAFTA, Golden Globe, and SAG Award nominations.[91]\n",
    "\n",
    "        Stone at a screening of La La Land (2016); her performance in the film won her the Academy Award for Best Actress\n",
    "        From November 2014 to February 2015, Stone starred in a revival of the Broadway musical Cabaret as Sally Bowles, taking over the role from Michelle Williams.[92] Deeming it \"the most nerve-racking thing ever\", Stone listened to a French radio station to mentally prepare herself for the role.[93][94] Marilyn Stasio of Variety was critical of her singing abilities and found her performance to be \"a bit narrow as an emotional platform, but a smart choice for her acting skills, the perfect fit for her sharp intelligence and kinetic energy.\"[95] Stone's 2015 film, the romantic comedy Aloha by Cameron Crowe, was a critical and commercial failure. Her portrayal of an air force pilot, alongside Bradley Cooper, was panned by critics for its controversial whitewashing of the cast, as Stone's character was meant to be of Asian, Hawaiian, and Swedish descent. She later regretted taking part in the project, acknowledging whitewashing as a widespread problem in Hollywood.[96][97][98] Despite the backlash, Stone was nominated for Choice Movie Actress ‚Äì Comedy at the 2015 Teen Choice Awards.[99] Also in 2015, Stone starred opposite Joaquin Phoenix as his character's love interest in Woody Allen's Irrational Man, which received mixed reviews.[84][100] She also appeared in the music video for Will Butler's single \"Anna\".[101]\n",
    "\n",
    "        During her run on Cabaret, Stone met filmmaker Damien Chazelle, who, impressed with her performance, cast her in his musical comedy-drama La La Land.[102] The project, which marked her third collaboration with Gosling, starred Stone as Mia Dolan, an aspiring actress living in Los Angeles.[103] Stone borrowed several real-life experiences for her character, and in preparation, watched The Umbrellas of Cherbourg and films of Fred Astaire and Ginger Rogers.[104][105] For the film's soundtrack, she recorded six songs.[b] La La Land served as the opening film at the 2016 Venice Film Festival, where it generated critical acclaim and earned Stone the Volpi Cup for Best Actress.[107] It emerged as a commercial success, with a worldwide gross of over $440 million against a production budget of $30 million.[108] Peter Bradshaw of The Guardian wrote that \"Stone has never been better: superbly smart, witty, vulnerable, her huge doe eyes radiating intelligence even, or especially, when they are filling with tears.\"[109] For her performance, Stone won the Academy, Golden Globe, SAG, and BAFTA Award for Best Actress.[110]\n",
    "\n",
    "        Stone's sole release of 2017 was Battle of the Sexes, based on the 1973 eponymous match between tennis players Billie Jean King (Stone) and Bobby Riggs (Steve Carell). In preparation, Stone met with King, watched old footage and interviews of her, worked with a dialect coach to speak in King's accent, and drank high-calorie protein shakes to gain 15 pounds (6.8 kg).[111][112] The film premiered to positive reviews at the 2017 Toronto International Film Festival, and certain critics considered Stone's performance to be the finest of her career.[113] Benjamin Lee of The Guardian praised her for playing against type, and for being \"strong\" and \"convincing\" in the part.[114] Even so, the film earned less than its $25 million budget.[115] Stone received her fourth Golden Globe nomination for it, and attended the ceremony with King.[116]\n",
    "\n",
    "        Films with Yorgos Lanthimos and professional expansion (2018‚Äìpresent)\n",
    "\n",
    "        Stone collaborated with director Yorgos Lanthimos on several projects, such as The Favourite (2018) and Poor Things (2023)\n",
    "        In 2018, Stone and Rachel Weisz played Abigail Masham and Sarah Churchill, respectively; two cousins fighting for the affection of Queen Anne (Olivia Colman), in Yorgos Lanthimos's historical comedy-drama The Favourite. She found it challenging to be an American among an all-British cast, and struggled with mastering her character's accent.[117] The film premiered at the 75th Venice International Film Festival to critical acclaim.[118] Michael Nordine of IndieWire praised Stone for taking on such a bold role following the success of La La Land, and termed the three lead actresses \"a majestic triumvirate in a period piece that's as tragic as it is hilarious.\"[119] Stone then executive-produced and starred in the Netflix dark comedy miniseries Maniac (2018), directed by Cary Joji Fukunaga. It featured Stone and Jonah Hill as two strangers whose lives are transformed due to a mysterious pharmaceutical trial. An admirer of Fukunaga's work, she agreed to the project without reading the script.[120] Judy Berman of Time magazine was impressed with Stone and Hill for their growth as actors since Superbad and noted the complexity in their performances.[121] Stone received her fifth Golden Globe nomination and third Oscar nomination for The Favourite, and additionally earned SAG nominations for both Maniac and The Favourite.[122][123][124] That same year, Stone appeared in Paul McCartney's music video for his song \"Who Cares\".[125]\n",
    "\n",
    "        Stone reprised her role as Wichita in Zombieland: Double Tap (2019), the sequel to 2009's Zombieland, which received mixed reviews and grossed $125 million worldwide.[126][127] She narrated the Netflix documentary series The Mind, Explained (2019) and reprised the voice role of Eep in The Croods: A New Age (2020), the sequel to 2013's The Croods.[128][129][130] In 2021, Stone played Cruella de Vil (originated by Glenn Close in the previous live-action adaptations) in Craig Gillespie's crime comedy Cruella, a Disney live-action based on the 1961 animation One Hundred and One Dalmatians. Starring opposite Emma Thompson, Stone also served as an executive producer of the film alongside Close.[131][132] The film was released in US theaters and on Disney+ Premier Access to positive reviews and grossed $233 million worldwide against its $100 million budget.[133][134] Justin Chang of Los Angeles Times wrote that despite the film's flawed screenplay, Stone was \"wholly committed, glammed-to-the-nines\"; Chang favorably compared it with her performance in The Favourite, adding that she \"nailed every nuance as another lowly young woman turned ambitious schemer\".[135] For Cruella, Stone garnered another Golden Globe nomination.[136]\n",
    "\n",
    "        In 2020, Stone and her husband, Dave McCary, launched the production company Fruit Tree.[137] Their first project was the independent film When You Finish Saving the World, which marked Jesse Eisenberg's feature directorial debut.[138] The film premiered at the 2022 Sundance Film Festival, and had modest reviews.[139][140] The company's next release was the comedy Problemista, directed by Julio Torres.[141] It premiered at the 2023 South by Southwest, and was initially scheduled to be released that year, but was delayed due to the 2023 SAG-AFTRA strike.[142][143] Both films were produced in collaboration with A24.[144]\n",
    "\n",
    "        Stone at the 2024 New York Film Festival premiere of A Real Pain\n",
    "        Continuing her collaboration with Lanthimos, Stone starred in his short film Bleat (2022) and feature film Poor Things (2023).[145] The latter, a fantasy coming-of-age film, is based on the novel of the same name by Alasdair Gray.[146] Stone also produced the film, in which she starred as Bella, a young Victorian woman who is crudely resurrected after her suicide. She found the experience of playing a character liberated of societal pressures to be \"extremely freeing\",[147] and she performed nudity and several sex scenes in it.[148] David Rooney of The Hollywood Reporter wrote that Stone \"gorges on it in a fearless performance that traces an expansive arc most actors could only dream about\", and particularly praised her ability to perform physical comedy.[149] Stephanie Zacharek of Time termed her performance \"wonderful‚Äîvital, exploratory, almost lunar in its perfect oddness\".[150] Stone next executive produced and starred in the Showtime satirical comedy series The Curse.[151] She played Whitney, an influencer who hosts an HGTV show with her husband.[152] Commenting on her achievements of the year, BBC Culture's Caryn James opined that \"Stone has quickly moved past Hollywood stardom to claim serious artistic credentials\".[153] She received two more Golden Globe nominations for Best Actress for her performances in Poor Things and The Curse, winning for the former.[154][155] Also for Poor Things, she won her second Academy Award and BAFTA for Best Actress in addition to a Best Picture nomination.[156][157]\n",
    "\n",
    "        The 2024 Sundance Film Festival marked the release of two films produced by Stone for Fruit Tree ‚Äî the horror film I Saw the TV Glow and Eisenberg's second directorial, A Real Pain.[158] The latter, a comedy-drama about two mismatched Jewish American cousins, received critical acclaim and several accolades.[159] In her fourth collaboration with Lanthimos, Stone played three characters in his absurdist anthology film Kinds of Kindness, which premiered at the 2024 Cannes Film Festival.[160] Mashable's Robert Daniels considered it to be the weakest among their collaborations, and labeled her as \"miscast\".[161]\n",
    "\n",
    "        In 2025, Stone first appeared in Ari Aster's contemporary Western film Eddington, which premiered at the Cannes Film Festival, and also starred Joaquin Phoenix, Pedro Pascal, and Austin Butler.[162][163] Ben Croll of The Wrap felt that while Stone and Pascal were \"no doubt game and ready to let loose\", their characters \"aren‚Äôt given an awful lot to actually do ‚Äì with both set up less as fully fledged characters than as images for [Phoenix] to pine-for or run against.\"[164] Stone will next reunite with Lanthimos in Bugonia, a remake of the South Korean film Save the Green Planet!.[165]\n",
    "\n",
    "        Reception and acting style\n",
    "\n",
    "        Stone at the 2011 San Diego Comic-Con. Her hair, eyes, and husky voice have been described by the media as her trademarks.[166][167]\n",
    "        Commenting on her performance in The Help, Kirk Honeycutt of The Hollywood Reporter called her \"one of our very best young actresses\".[168] Time's Daniel D'Addario stated in 2015 that Stone \"appears to have fairly limited options\" and choosing roles in independent films by \"less established directors would represent a substantive risk\".[169] Analyzing her on-screen persona, Jessica Kiang of IndieWire noted that Stone \"usually [plays] the approachable, down-to-earth, girl-next-door type, [and] in person she demonstrates many of those qualities too, along with an absolute refusal to take herself too seriously.\"[170] Biographer Karen Hollinger wrote that at the beginning of her career, Stone was often labeled a \"star ing√©nue\", a perceived limitation she escaped despite not being a classically trained actress as she \"crafted a brilliant career based on performative skills, careful choice of roles and distinctive personality\".[171] In a 2024 analysis of Stone's career trajectory, IndieWire suggested that from breakout roles to acclaimed performances in indie films, Stone is positioned as a potential new movie star in Hollywood's evolving landscape.[172]\n",
    "\n",
    "        In 2008, Stone topped Saturday Night Magazine's Top 20 Rising Stars Under 30 and was included in a similar list compiled by Moviefone.[173][174] LoveFilm placed her on their list of 2010 Top 20 Actresses Under 30, and her performance in Easy A was included in Time's Top 10 Everything of 2010.[175][176] She appeared in the 2013 Celebrity 100 list, a compilation of the 100 most powerful people in the world, as selected annually by Forbes. The magazine reported that she had earned $16 million from June 2012 to June 2013.[177] That same year, she was ranked first in the magazine's Top 10 Best Value Stars.[178] In 2015, Forbes published that she had become one of the world's highest-paid actresses with earnings of $6.5 million.[179] The magazine ranked her the world's highest-paid actress two years later with annual earnings of $26 million.[180] In 2017, she was included on Time's annual list of the 100 most influential people in the world.[181]\n",
    "\n",
    "        Stone has been described as a style icon, with her hair, eyes, and husky voice listed as her trademark features.[166][167] Vogue credits the actress for her \"sophisticated, perfectly put-together looks\", writing that \"her charisma, both on-screen and off-, has charmed many\" and for her embrace of \"Old Hollywood Glamour\".[182][183] Bee Shapiro of The New York Times called Stone a \"likable ... spunky, talented, self-deprecating and slightly goofy\" actress who is diverse in her fashion choices.[184] In 2009, she was featured on FHM's 100 Sexiest Women in the World and Maxim's Hot 100;[185][186] the latter also placed her on the list on three other occasions‚Äî2010, 2011, and 2014.[187] In 2011, she featured on Victoria's Secret's list of \"What is Sexy?\" as the Sexiest Actress.[188] She was mentioned in other media outlet listings that year, including People's 100 Most Beautiful Women, each of FHM's and FHM Australia's 100 Sexiest Women in the World, and Men's Health's 100 Hottest Women.[189] She was ranked sixth on Empire's list of the 100 Sexiest Movie Stars in 2013.[190] Stone was named the best-dressed woman of 2012 by Vogue and was included on similar listings by Glamour in 2013 and 2015, and People in 2014.[191][192]\n",
    "\n",
    "        Personal life\n",
    "\n",
    "        Stone and Andrew Garfield in 2014\n",
    "        Stone moved from Los Angeles to Greenwich Village, New York, in 2009.[12] In 2016, she moved back to Los Angeles.[10] Despite significant media attention, she refuses to publicly discuss her personal life. Concerned with living a normal life, Stone has said she dislikes receiving paparazzi attention outside her home.[193] She has expressed her fondness for her profession,[10] and has cited Diane Keaton as an acting influence, calling her \"one of the most covered-up actresses of all time\". Stone has a close relationship with her family.[2] She says, \"I am blessed with a great family and great people around me that would be able to kick me in the shins if I ever for one minute got lost up in the clouds. I've been really lucky in that sense.\"[185]\n",
    "\n",
    "        Stone dated her Paper Man co-star Kieran Culkin for two years. In 2011, she started dating her Amazing Spider-Man co-star Andrew Garfield for four years.[194][195] Their relationship was reported in the media with various speculations; the pair refused to speak publicly about it, though they made several appearances together. In 2014, on an occasion in New York City, Stone and Garfield encouraged paparazzi to visit websites that spread awareness of causes such as autism.[196] In 2015, they were reported to have broken up.[197][198]\n",
    "\n",
    "        Stone met Saturday Night Live segment director Dave McCary on December 3, 2016, while hosting the show. They began dating the following year. On December 4, 2019, they announced their engagement. They married in a private ceremony in September 2020.[199] In March 2021, Stone gave birth to their daughter named Louise Jean.[200][201][202] As of 2021, the family lives in Austin, Texas.[203] In 2022, Stone sold her house in Malibu, California for $4.425 million,[204] and in 2024, she sold her Los Angeles home for $4 million.[205]\n",
    "\n",
    "        Stone has said she suffers from asthma, which she discovered after having difficulty breathing while filming Easy A.[206] Her mother was diagnosed with triple-negative breast cancer and cured in 2008.[207] Stone and her mother celebrated by getting tattoos of birds' feet, designed by Paul McCartney, a reference to the Beatles song \"Blackbird\", which she and her mother love.[208] Stone is a supporter of Planned Parenthood, and attended the 2017 Academy Awards wearing a Planned Parenthood pin on her dress.[209][210]\n",
    "\n",
    "        Philanthropy\n",
    "        Stone appeared in a Revlon campaign that promoted breast cancer awareness.[211] In 2011, she appeared in a collaborative video between Star Wars and Stand Up to Cancer to raise funds for cancer research.[212] From 2012 to 2014, she hosted the Entertainment Industry Foundation's Revlon Run/Walk, which helps fight women's cancer.[213]\n",
    "\n",
    "        Stone and three other celebrities were present at the 2012 Nickelodeon HALO Awards, a TV special that profiled four teenagers who are \"Helping And Leading Others\" (HALO).[214] She attended the 2014 Earth Hour, a worldwide movement for the planet organized by the World Wide Fund for Nature.[215] In 2015, she was part of a fundraising event in support of the Motion Picture & Television Fund, which helps people in the film and television industries with limited or no resources.[216] A feminist,[217] she collaborated with 300 women in Hollywood to set up the Time's Up initiative to protect women from sexual harassment and discrimination in 2018.[218]\n",
    "\n",
    "        Acting credits and awards\n",
    "        Main articles: List of Emma Stone performances and List of awards and nominations received by Emma Stone\n",
    "        According to the review aggregator site Rotten Tomatoes and the box-office site Box Office Mojo, Stone's most critically acclaimed and commercially successful films are Superbad (2007), Zombieland (2009), Easy A (2010), Crazy, Stupid, Love (2011), The Help (2011), The Amazing Spider-Man (2012), The Amazing Spider-Man 2 (2014), Birdman (2014), La La Land (2016), Battle of the Sexes (2017), The Favourite (2018), Cruella (2021), and Poor Things (2023).[219][220]\n",
    "\n",
    "        Stone has been recognized by the Academy of Motion Picture Arts and Sciences for the following:\n",
    "\n",
    "        87th Academy Awards: Best Supporting Actress, nomination, for Birdman (2014)\n",
    "        89th Academy Awards: Best Actress, win, for La La Land (2016)\n",
    "        91st Academy Awards: Best Supporting Actress, nomination, for The Favourite (2018)\n",
    "        96th Academy Awards: Best Actress, win, for Poor Things (2023)\n",
    "        96th Academy Awards: Best Picture, nomination, for Poor Things (2023)\n",
    "        She has also been nominated for five British Academy Film Awards: BAFTA Rising Star Award, Best Supporting Actress for Birdman and The Favourite, and Best Actress in a Leading Role for La La Land and Poor Things, winning for the last two.[47][91][110] Her other awards include two Golden Globe Awards for Best Actress in a Comedy or Musical for La La Land and Poor Things,[110][155] the Screen Actors Guild Award for Outstanding Performance by a Female Actor in a Leading Role and the Volpi Cup for Best Actress at Venice Film Festival, both for La La Land.[221][222]\n",
    "        \"\"\"\n",
    "    },\n",
    "    {\n",
    "        \"article_4\" : \"\"\"Whiplash is a 2014 American psychological drama film written and directed by Damien Chazelle, starring Miles Teller, J. K. Simmons, Paul Reiser, and Melissa Benoist. It focuses on an ambitious music student and aspiring jazz drummer (Teller), who is pushed to his limit by his abusive instructor (Simmons) at the fictional Shaffer Conservatory in New York City.\n",
    "\n",
    "        The film was produced by Bold Films, Blumhouse Productions, and Right of Way Films. Sony Pictures acquired distribution rights for most of the world, releasing the film under Sony Pictures Classics in North America, Germany, and Australia, and Stage 6 Films in the UK, Scandinavia, Benelux, Eastern Europe (excluding the CIS), Greece, South Africa, Spain, Italy, Portugal and Latin America.[3][4]\n",
    "\n",
    "        Chazelle completed the script in 2013, drawing upon his experiences in a \"very competitive\" jazz band in high school. Soon after, Right of Way and Blumhouse helped Chazelle turn fifteen pages of the script into an eighteen-minute short film, also titled Whiplash. The short film received acclaim after debuting at the 2013 Sundance Film Festival, which attracted investors to produce the complete version of the script. Filming took place in September 2013 throughout Los Angeles over twenty days. The film explores concepts of perfectionism, dedication, and success and deconstructs the concept of ambition.\n",
    "\n",
    "        Whiplash premiered in competition at the 2014 Sundance Film Festival on January 16, as the festival's opening film, where it won the Audience Award Dramatic and the Grand Jury Prize Dramatic.[5] The film opened in limited release domestically in the United States and Canada on October 10, 2014, gradually expanding to over 500 screens and finally closing on March 26, 2015. The film received acclaim for its screenplay, direction, editing, sound mixing, and performances. It grossed $50 million on a $3.3 million budget during its original theatrical run. The film received multiple accolades, winning Academy Awards for Best Film Editing and Best Sound Mixing, and was nominated for Best Picture and Best Adapted Screenplay. Simmons's performance won the Academy, Golden Globe, BAFTA, Critics' Choice, and Screen Actors Guild awards for Best Supporting Actor. It has since been assessed as one of the best films of the 2010s, the 21st century, and of all time.[6][7][8][9][10][11]\n",
    "\n",
    "        Plot\n",
    "        Jazz drummer Andrew Neiman attends the prestigious Shaffer Conservatory in New York City, hoping to leave a legacy like that of his idol Buddy Rich. Terence Fletcher, the conductor of the Shaffer Conservatory Studio Band, recruits him to play in the Studio ensemble as an alternate for core drummer Carl Tanner.\n",
    "\n",
    "        Andrew discovers that Fletcher, although encouraging at first, is relentlessly strict and verbally and physically abusive towards his students. When he apparently fails to keep tempo on Hank Levy's \"Whiplash\" during his first ensemble rehearsal, Fletcher throws a chair at him, repeatedly slaps his face, and berates him. Determined to impress Fletcher, Andrew excessively practices, often until his hands blister and bleed. In the meantime, Andrew goes on a date and becomes romantically involved with a woman named Nicole.\n",
    "\n",
    "        After their first set at a jazz competition, Tanner gives Andrew his music folder; Andrew puts it on a chair. When Tanner asks for his folder back, it is gone. Tanner berates Andrew for losing the folder, but Fletcher blames Tanner, telling him it was his responsibility to keep the folder. After Tanner states he cannot play without the sheets, Fletcher assigns Andrew to perform \"Whiplash\" from memory, resulting in Shaffer winning the competition. Fletcher promotes Andrew to core drummer. However, Andrew is taken aback when Fletcher abruptly reassigns the position to Ryan Connolly, a drummer from a lower-level ensemble within Shaffer.\n",
    "\n",
    "        Because of his single-mindedness toward music, Andrew clashes with his family and breaks up with Nicole to focus on his ambitions. Fletcher begins rehearsal by announcing that Sean Casey, a former member of the Studio Band, died in a car crash. He then pushes the three drummers to play at a faster tempo on \"Caravan\", keeping them for a grueling five-hour practice. Andrew is the only one able to perform on-tempo, and earns the core position back.\n",
    "\n",
    "        On the way to the next competition, Andrew's bus gets a flat tire. He rents a car but arrives late and forgets his drumsticks at the rental office, irritating Fletcher. Andrew races back and retrieves them, but his car is hit by a truck on the way back. Heavily injured, Andrew crawls from the wreckage and runs to the theater, arriving bloodied and weak just as the ensemble enters the stage. He struggles to keep tempo and Fletcher halts the performance to dismiss him from the band. Enraged, Andrew attacks Fletcher onstage and is subsequently expelled from Shaffer.\n",
    "\n",
    "        At his father Jim's request, Andrew meets Rachel Bornholdt, a lawyer representing the parents of the late Sean Casey, who had actually hanged himself after suffering from depression and anxiety resulting from Fletcher's abuse. Casey's parents want Fletcher held accountable, so Andrew reluctantly agrees to testify anonymously, leading Shaffer to terminate Fletcher.\n",
    "\n",
    "        Andrew abandons drumming but encounters Fletcher months later playing piano at a jazz club. Over a drink, Fletcher admits his teaching methods were harsh but insists they were necessary to motivate his students. Citing a story where Jo Jones allegedly threw a cymbal at Charlie Parker as an example, Fletcher says that the next jazz musician to live up to Parker's legacy would never let discouragement stop them. Fletcher invites Andrew to perform with his professional band at a New York JVC Jazz Festival, playing the same pieces from the Shaffer Studio Band; Andrew accepts. Andrew calls Nicole to invite her to the performance but learns she has a new boyfriend.\n",
    "\n",
    "        At the festival, Fletcher tells Andrew he knows Andrew testified against him. As revenge, Fletcher leads the band into a new song Andrew does not know. After a disastrous performance, Andrew walks offstage humiliated. Jim embraces Andrew backstage, but Andrew decides to return to the stage, reclaiming the drum kit and cutting off Fletcher's introduction to the next tune by cueing the band into \"Caravan\". Initially angered, Fletcher resumes conducting. As the piece finishes, Andrew continues into an unexpected improvised solo. Impressed, Fletcher nods in approval before cueing the final chord.\n",
    "\n",
    "        Cast\n",
    "        The film stars Miles Teller, J. K. Simmons, and Paul Reiser.\n",
    "        Miles Teller as Andrew Neiman, an ambitious 19-year-old jazz drummer\n",
    "        Sam Campisi as an 8-year-old Andrew Neiman\n",
    "        J. K. Simmons as Terence Fletcher, Andrew's jazz instructor\n",
    "        Paul Reiser as Jim Neiman, Andrew's father\n",
    "        Melissa Benoist as Nicole, who dates Andrew\n",
    "        Austin Stowell as Ryan Connolly, Andrew's classmate and fellow drummer\n",
    "        Nate Lang as Carl Tanner, Andrew's classmate and fellow drummer\n",
    "        Chris Mulkey as Frank Neiman, Andrew's uncle and Jim's brother\n",
    "        Damon Gupton as Mr. Kramer, Andrew's first instructor\n",
    "        April Grace as Rachel Bornholdt, Andrew's and Jim's lawyer\n",
    "        Production\n",
    "        Development\n",
    "\n",
    "        Writer-director Damien Chazelle and producer Jason Blum\n",
    "        While attending Princeton High School, writer-director Damien Chazelle was in a \"very competitive\" studio band and drew on the dread he felt in those years.[12] He based the conductor, Terence Fletcher, on his former band instructor (who died in 2003) but \"pushed it further\", adding elements of Buddy Rich and other band leaders known for their harsh treatment.[12] Chazelle wrote the film \"initially in frustration\" while trying to get his musical La La Land off the ground.[13]\n",
    "\n",
    "        Right of Way Films and Blumhouse Productions helped Chazelle turn fifteen pages of his original screenplay into a short film starring Johnny Simmons as Neiman and J. K. Simmons (no relation)[14] as Fletcher.[15] The eighteen-minute short film received acclaim after debuting at the 2013 Sundance Film Festival, winning the short film Jury Award for fiction,[16][17] which attracted investors to produce the complete version of the script.[18] The feature-length film was financed for $3.3 million by Bold Films.[3]\n",
    "\n",
    "        In August 2013, Miles Teller signed on to star in the role originated by Johnny Simmons; J. K. Simmons remained attached to his original role.[19] Early on, Chazelle gave J. K. Simmons direction that \"I want you to take it past what you think the normal limit would be,\" telling him: \"I don't want to see a human being on-screen any more. I want to see a monster, a gargoyle, an animal.\" Many of the band members were real musicians or music students, and Chazelle tried to capture their expressions of fear and anxiety when Simmons pressed them. Chazelle said that, between takes, Simmons was \"as sweet as can be\", which he credits for keeping \"the shoot from being nightmarish\".[12]\n",
    "\n",
    "        Filming\n",
    "        Principal photography began in September 2013, with filming taking place throughout Los Angeles, including the Hotel Barclay, Palace Theater, and the Orpheum Theatre.[20][21] The film was shot in nineteen days, with a schedule of fourteen hours of filming per day.[22] Chazelle was involved in a serious car accident in the third week of filming and was hospitalized with possible concussion, but he returned to set the following day to wrap the shoot on time.[22]\n",
    "\n",
    "        Having taught himself to play drums at age fifteen, Teller performed much of the drumming seen in the film. Supporting actor and jazz drummer Nate Lang, who plays Neiman's rival Carl in the film, trained Teller in the specifics of jazz drumming; this included changing his grip from matched to traditional.[23][24] For certain scenes, professional drummer Kyle Crane served as Teller's drum double.[25][26]\n",
    "\n",
    "        Music\n",
    "        Main article: Whiplash (soundtrack)\n",
    "\n",
    "        Composer Justin Hurwitz\n",
    "        The soundtrack album was released on October 7, 2014, via the Var√®se Sarabande label.[27] The soundtrack consists of 24 tracks divided in three different parts: original jazz pieces written for the film, original underscore parts written for the film, and classic jazz standards written by Stan Getz, Duke Ellington, and other musicians. The actual drummer was Bernie Dresel.[28]\n",
    "\n",
    "        On March 27, 2020, an expanded deluxe edition was released on double CD and 2-LP gatefold sleeve vinyl with new cover art, and featured original music by Justin Hurwitz, plus bonus track and remixes by Timo Garcia, Opiuo, Murray A. Lightburn, and more.[29]\n",
    "\n",
    "        Reception\n",
    "        Box office\n",
    "        In North America, the film opened in a limited release on October 10, 2014, in six theaters, grossing $135,388 ($22,565 per theater) and finishing 34th at the box office.[2] It expanded to 88 locations, then 419 locations.[30] After three months on release, it had earned $7 million, and finally expanded nationwide to 1000 locations to capitalize on receiving five Academy Awards nominations.[31] As of October 3, 2024, Whiplash grossed $14 million in the U.S. and Canada and $36.3 million in other territories, for a worldwide total of $50.4 million against a budget of $3.3 million.[2]\n",
    "\n",
    "        Critical response\n",
    "\n",
    "        Director Damien Chazelle at the 2014 Sundance Film Festival.\n",
    "        On the review aggregation website Rotten Tomatoes, the film scored 94% based on 307 reviews, with an average rating of 8.6/10. The site's critical consensus states, \"Intense, inspiring, and well-acted, Whiplash is a brilliant sophomore effort from director Damien Chazelle and a riveting vehicle for stars J. K. Simmons and Miles Teller.\"[32] On Metacritic the film has a score of 89 out of 100, based on reviews from 49 critics, indicating \"universal acclaim\".[33] Simmons received wide praise for his performance and won the 2015 Academy Award for Best Supporting Actor.[34][35]\n",
    "\n",
    "        Peter Debruge, in his review for Variety, said that the film \"demolishes the cliches of the musical-prodigy genre, investing the traditionally polite stages and rehearsal studios of a topnotch conservatory with all the psychological intensity of a battlefield or sports arena.\"[36] Todd McCarthy of The Hollywood Reporter praised the performances of Teller and Simmons, writing: \"Teller, who greatly impressed in last year's Sundance entry The Spectacular Now, does so again in a performance that is more often simmering than volatile ... Simmons has the great good fortune for a character actor to have here found a co-lead part he can really run with, which is what he excitingly does with a man who is profane, way out of bounds and, like many a good villain, utterly compelling.\"[37] Whiplash also won the 87th Academy Award for Best Sound Mixing and the 87th Academy Award for Best Film Editing.[38]\n",
    "\n",
    "        Amber Wilkinson of The Daily Telegraph praised the direction and editing, writing: \"Chazelle's film has a sharp and gripping rhythm, with shots beautifully edited by Tom Cross... often cutting to the crash of Andrew's drums.\"[39] James Rocchi of Indiewire gave a positive review and said, \"Whiplash is ... full of bravado and swagger, uncompromising where it needs to be, informed by great performances and patient with both its characters and the things that matter to them.\"[40] Henry Barnes of The Guardian gave the film a positive review, calling it a rare film \"about music that professes its love for the music and its characters equally.\"[38]\n",
    "\n",
    "        Forrest Wickman of Slate said the film distorted jazz history and promoted a misleading idea of genius, adding, \"In all likelihood, Fletcher isn't making a Charlie Parker. He's making the kind of musician that would throw a cymbal at him.\"[41] In The New Yorker, Richard Brody said, \"Whiplash honors neither jazz nor cinema.\"[42]\n",
    "\n",
    "        Top ten lists\n",
    "        The film appeared on many critics' end-of-year lists. Metacritic collected lists published by major film critics and publications and in their analysis, recorded that Whiplash appeared on 57 lists and in 1st place on 5 of those lists. Overall the film was ranked in 5th place for the year by Metacritic.[43]\n",
    "\n",
    "        1st ‚Äì William Bibbiani, CraveOnline\n",
    "        1st ‚Äì Chris Nashawaty, Entertainment Weekly[44]\n",
    "        1st ‚Äì Erik Davis, Movies.com\n",
    "        2nd ‚Äì A. A. Dowd, The A.V. Club[45]\n",
    "        2nd ‚Äì Scott Feinberg, The Hollywood Reporter\n",
    "        2nd ‚Äì Mara Reinstein, Us Weekly\n",
    "        3rd ‚Äì Tasha Robinson, The Dissolve\n",
    "        3rd ‚Äì Amy Taubin, Artforum\n",
    "        3rd ‚Äì Steve Persall, Tampa Bay Times\n",
    "        3rd ‚Äì Matt Singer, ScreenCrush\n",
    "        3rd ‚Äì Rob Hunter, Film School Rejects\n",
    "        4th ‚Äì Ignatiy Vishnevetsky, The A.V. Club[45]\n",
    "        4th ‚Äì Kyle Smith, New York Post\n",
    "        4th ‚Äì Peter Hartlaub, San Francisco Chronicle\n",
    "        4th ‚Äì Brian Miller, Seattle Weekly\n",
    "        4th ‚Äì Michael Phillips, Chicago Tribune\n",
    "        4th ‚Äì David Edelstein, Vulture\n",
    "        5th ‚Äì Ty Burr, The Boston Globe\n",
    "        5th ‚Äì Genevieve Koski, The Dissolve\n",
    "        5th ‚Äì James Berardinelli, Reelviews\n",
    "        5th ‚Äì David Ansen, The Village Voice[46]\n",
    "        5th ‚Äì Betsy Sharkey, Los Angeles Times (tied with Foxcatcher)\n",
    "        6th ‚Äì Peter Travers, Rolling Stone\n",
    "        6th ‚Äì Richard Roeper, Chicago Sun-Times\n",
    "        6th ‚Äì Joe Neumaier, New York Daily News\n",
    "        7th ‚Äì Jesse Hassenger, The A.V. Club[45]\n",
    "        7th ‚Äì Rex Reed, New York Observer\n",
    "        7th ‚Äì Noel Murray, The Dissolve\n",
    "        7th ‚Äì Jocelyn Noveck, Associated Press\n",
    "        7th ‚Äì Wesley Morris, Grantland\n",
    "        7th ‚Äì Alison Willmore, BuzzFeed\n",
    "        8th ‚Äì Keith Phipps, The Dissolve\n",
    "        8th ‚Äì Mike Scott, The Times-Picayune\n",
    "        8th ‚Äì Rafer Guzman, Newsday\n",
    "        8th ‚Äì Seth Malv√≠n Romero, A.V. Wire\n",
    "        8th ‚Äì Ben Kenigsberg, The A.V. Club[45]\n",
    "        8th ‚Äì Barbara Vancheri, Pittsburgh Post-Gazette\n",
    "        8th ‚Äì Kristopher Tapley, Hitfix\n",
    "        8th ‚Äì Matthew Jacobs and Christopher Rosen, Huffington Post\n",
    "        9th ‚Äì Nathan Rabin, The Dissolve\n",
    "        10th ‚Äì Clayton Davis, Awards Circuit\n",
    "        10th ‚Äì Owen Gleiberman, BBC\n",
    "        Top 10 (listed alphabetically, not ranked) ‚Äì Claudia Puig, USA Today\n",
    "        Top 10 (listed alphabetically, not ranked) ‚Äì Stephen Whitty, The Star-Ledger\n",
    "        \n",
    "        Accolades\n",
    "        Main article: List of accolades received by Whiplash\n",
    "        The film received the top audience and grand jury awards in the U.S. dramatic competition at the 2014 Sundance Film Festival;[47] Chazelle's short film of the same name took home the jury award in the U.S. fiction category one year prior.[16] The film also took the grand prize and the audience award for its favorite film at the 40th Deauville American Film Festival.[48]\n",
    "\n",
    "        Whiplash was originally planned to compete for the Academy Award for Best Original Screenplay, but on January 6, 2015, the Academy of Motion Picture Arts and Sciences (AMPAS) announced that the film would instead be competing in the Adapted Screenplay category[49] to the surprise of many including Chazelle,[50] due to the short film premiering at the 2013 Sundance Film Festival (one year before the feature film's release), even though the feature film's script was written first and the short was made to attract investors into producing the feature-length film.[15] Although the Writers Guild of America categorized the screenplay as original, AMPAS classed it as an adaptation of the 2013 short version.[50]\n",
    "\n",
    "        At the 87th Academy Awards, J. K. Simmons received the Academy Award for Best Supporting Actor for his performance, Tom Cross won the Academy Award for Best Film Editing while Craig Mann, Ben Wilkins, and Thomas Curley won the Academy Award for Best Sound Mixing. In December 2015, the score received a Grammy nomination, and the film was nominated for the NME Award for Best Film.[51]\n",
    "\n",
    "        Legacy\n",
    "        In 2020, it ranked 13 on Empire's list of \"The 100 Greatest Movies Of The 21st Century\" and number 51 on its 2024 list.[52][53] In 2024, it topped the list of the Sundance Film Festival's Top 10 Films of All Time as the result of a survey conducted with 500 filmmakers and critics in honor of the festival's 40th anniversary.[54][55]\n",
    "\n",
    "        Actors Danielle Brooks, Katie McGrath, and Tramell Tillman have voiced their admiration for the film, with McGrath saying \"There isn't one needless second in this film...every frame is perfect.\"[56][57]\n",
    "\n",
    "        To celebrate the film's 10th anniversary, a new 4K remaster of the film was released theatrically on September 20, 2024, following a special anniversary screening at the 2024 Toronto International Film Festival on September 9.[58]\n",
    "\n",
    "        In June 2025, Tom Bernard, co-President of Sony Pictures Classics, cited Whiplash as among the best films to come from the studio in the 21st century. It also ranked number 60 on The New York Times' list of \"The 100 Best Movies of the 21st Century\" and number 19 on the \"Readers' Choice\" edition of the list.[57][59][60]\n",
    "        \"\"\"\n",
    "    }\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import re\n",
    "\n",
    "class GeminiChunkClient:\n",
    "    \"\"\"A client to chunk text using Google's Gemini API.\"\"\"\n",
    "\n",
    "    def __init__(self, api_key: str, model_name: str = \"gemini-2.5-flash\"):\n",
    "        api_key = api_key.strip()\n",
    "        self.client = genai.Client(api_key=api_key)\n",
    "        self.model_name = model_name\n",
    "\n",
    "    async def chunk_text_with_llm(self, input_text: str):\n",
    "        system_prompt = \"\"\"\n",
    "        # Context: You are an expert text processing assistant. Your primary goal is to break down long articles into smaller, cohesive, and easily digestible chunks.\n",
    "        # Input: You will receive a list of dictionary. Each dictionary represents a single, lengthy article.\n",
    "        # Instruction: \n",
    "        1. Divide the article into distinct sections (chunks), each chunk must have a length that is at least 700 words and at most 1000 words.\n",
    "        2. Each chunk must be a self-contained, meaningful unit of information. It should make sense on its own without requiring the reader to jump back and forth excessively between chunks.\n",
    "        3. Do not ommit or alter any information from the original article. Your only job is to cut it into chunks - the total length and content must be exactly the same as the original article.\n",
    "        4. Output Format: Provide the chunked content as a JSON object, where each value represents one coherent chunk. Do not include any introductory or concluding remarks outside of the JSON object. The one and only thing you should return is the JSON object.\n",
    "        Example Output:\n",
    "        {\n",
    "            \"chunk_1\": \"...\",\n",
    "            \"chunk_2\": \"...\",\n",
    "            \"chunk_3\": \"...\"\n",
    "        }\n",
    "        \"\"\"\n",
    "\n",
    "        words = input_text.split()\n",
    "        if len(words) <= 3000:\n",
    "            print(\"Input is within the word limit. No chunking needed.\")\n",
    "            return {\"chunk_1\": input_text}  # Return as a single chunk\n",
    "\n",
    "        try:\n",
    "            print(\"Input is longer than 800 words. Chunking...\")\n",
    "            user_query = f\"<INPUT>Article to be processed:\\n{input_text}<\\INPUT>\"\n",
    "            full_prompt = f\"{system_prompt}\\n\\n{user_query}\"\n",
    "\n",
    "            response = await self.client.aio.models.generate_content(\n",
    "                                model='gemini-2.5-flash',\n",
    "                                config=types.GenerateContentConfig(\n",
    "                                        temperature=0.1,\n",
    "                                        top_p=0.9,\n",
    "                                        max_output_tokens=55000,\n",
    "                                        system_instruction=system_prompt,\n",
    "                                        thinking_config=types.ThinkingConfig(\n",
    "                                        thinking_budget=1024),),\n",
    "                                contents=user_query)\n",
    "            print(f\"repsonse.text: {response.text}\")\n",
    "            print(f\"response: {response}\")\n",
    "            raw_output = response.text\n",
    "            \n",
    "            # Clean up code block formatting\n",
    "            chunked_content = re.sub(r\"^```json|^```|```$\", \"\", raw_output.strip(), flags=re.MULTILINE).strip()\n",
    "\n",
    "            try:\n",
    "                return json.loads(chunked_content)\n",
    "            except json.JSONDecodeError:\n",
    "                print(\"Warning: Initial JSON parse failed, attempting to salvage object from string.\")\n",
    "                match = re.search(r\"\\{.*\\}\", chunked_content, re.DOTALL)\n",
    "                if match:\n",
    "                    try:\n",
    "                        return json.loads(match.group(0))\n",
    "                    except json.JSONDecodeError:\n",
    "                        print(\"Error: Could not parse JSON even after salvage attempt.\")\n",
    "                return {\"error\": \"Invalid JSON format returned by the model.\"}\n",
    "        except Exception as e:\n",
    "            print(f\"An error occurred during the chunking process: {e}\")\n",
    "            return {\"error\": str(e)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "async def main():\n",
    "    \"\"\"Main execution function.\"\"\"\n",
    "    load_dotenv()\n",
    "    api_key = os.getenv('GEMINI_API_KEY')\n",
    "    if not api_key:\n",
    "        raise ValueError(\"GEMINI_API_KEY not found in .env file.\")\n",
    "\n",
    "    # --- Configuration ---\n",
    "    FALKORDB_CONFIG = {\n",
    "        \"host\": 'localhost',\n",
    "        \"port\": 6379,\n",
    "        \"db_name\": 'aug-6-test-db-v2' # Use a descriptive name for your graph\n",
    "    }\n",
    "    GEMINI_CONFIG = {\n",
    "        \"api_key\": api_key,\n",
    "        \"model_name\": \"gemini-2.5-flash\"\n",
    "    }\n",
    "\n",
    "    # --- Initialization ---\n",
    "    db_client = FalkorDBClient(**FALKORDB_CONFIG)\n",
    "    chunk_client = GeminiChunkClient(**GEMINI_CONFIG)\n",
    "    llm_client = GeminiLLMClient(**GEMINI_CONFIG)\n",
    "    processor = KnowledgeGraphProcessor(db_client=db_client, llm_client=llm_client)\n",
    "\n",
    "    # --- Processing Loop ---\n",
    "    for i in range (3, len(text)): # Change starting index to decide which article to start processing by\n",
    "        \n",
    "        article_dict = text[i]\n",
    "        key = i + 1 # Key is always index + 1\n",
    "        article_key = f\"article_{key}\"\n",
    "        article_content = article_dict.get(article_key)\n",
    "\n",
    "        print(f\"\\n\\n--- Start parsing {article_key} ---\")\n",
    "        \n",
    "        chunked_article = await chunk_client.chunk_text_with_llm(article_content)\n",
    "        print(f\"Finished processing chunks for {article_key}.\")\n",
    "\n",
    "        if isinstance(chunked_article, dict):\n",
    "            for chunk_id, chunk_text in chunked_article.items():\n",
    "                await processor.add_episode(chunk_text)\n",
    "        else:\n",
    "            print(f\"Error: Unexpected chunked article format for {article_key}\")\n",
    "\n",
    "        print(f\"--- Finish parsing {article_key} ---\")\n",
    "        print(\"Waiting 1 second to respect rate limits...\\n\")\n",
    "\n",
    "        await asyncio.sleep(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FalkorDBClient connected to graph 'aug-6-test-db-v2' at localhost:6379.\n",
      "KnowledgeGraphProcessor initialized.\n",
      "\n",
      "\n",
      "--- Start parsing article_4 ---\n",
      "Input is within the word limit. No chunking needed.\n",
      "Finished processing chunks for article_4.\n",
      "\n",
      "===== Processing new episode... =====\n",
      "Text: 'Whiplash is a 2014 American psychological drama film written and directed by Damien Chazelle, starring Miles Teller, J. K. Simmons, Paul Reiser, and Melissa Benoist. It focuses on an ambitious music student and aspiring jazz drummer (Teller), who is pushed to his limit by his abusive instructor (Simmons) at the fictional Shaffer Conservatory in New York City.\n",
      "\n",
      "        The film was produced by Bold Films, Blumhouse Productions, and Right of Way Films. Sony Pictures acquired distribution rights for most of the world, releasing the film under Sony Pictures Classics in North America, Germany, and Australia, and Stage 6 Films in the UK, Scandinavia, Benelux, Eastern Europe (excluding the CIS), Greece, South Africa, Spain, Italy, Portugal and Latin America.[3][4]\n",
      "\n",
      "        Chazelle completed the script in 2013, drawing upon his experiences in a \"very competitive\" jazz band in high school. Soon after, Right of Way and Blumhouse helped Chazelle turn fifteen pages of the script into an eighteen-minute short film, also titled Whiplash. The short film received acclaim after debuting at the 2013 Sundance Film Festival, which attracted investors to produce the complete version of the script. Filming took place in September 2013 throughout Los Angeles over twenty days. The film explores concepts of perfectionism, dedication, and success and deconstructs the concept of ambition.\n",
      "\n",
      "        Whiplash premiered in competition at the 2014 Sundance Film Festival on January 16, as the festival's opening film, where it won the Audience Award Dramatic and the Grand Jury Prize Dramatic.[5] The film opened in limited release domestically in the United States and Canada on October 10, 2014, gradually expanding to over 500 screens and finally closing on March 26, 2015. The film received acclaim for its screenplay, direction, editing, sound mixing, and performances. It grossed $50 million on a $3.3 million budget during its original theatrical run. The film received multiple accolades, winning Academy Awards for Best Film Editing and Best Sound Mixing, and was nominated for Best Picture and Best Adapted Screenplay. Simmons's performance won the Academy, Golden Globe, BAFTA, Critics' Choice, and Screen Actors Guild awards for Best Supporting Actor. It has since been assessed as one of the best films of the 2010s, the 21st century, and of all time.[6][7][8][9][10][11]\n",
      "\n",
      "        Plot\n",
      "        Jazz drummer Andrew Neiman attends the prestigious Shaffer Conservatory in New York City, hoping to leave a legacy like that of his idol Buddy Rich. Terence Fletcher, the conductor of the Shaffer Conservatory Studio Band, recruits him to play in the Studio ensemble as an alternate for core drummer Carl Tanner.\n",
      "\n",
      "        Andrew discovers that Fletcher, although encouraging at first, is relentlessly strict and verbally and physically abusive towards his students. When he apparently fails to keep tempo on Hank Levy's \"Whiplash\" during his first ensemble rehearsal, Fletcher throws a chair at him, repeatedly slaps his face, and berates him. Determined to impress Fletcher, Andrew excessively practices, often until his hands blister and bleed. In the meantime, Andrew goes on a date and becomes romantically involved with a woman named Nicole.\n",
      "\n",
      "        After their first set at a jazz competition, Tanner gives Andrew his music folder; Andrew puts it on a chair. When Tanner asks for his folder back, it is gone. Tanner berates Andrew for losing the folder, but Fletcher blames Tanner, telling him it was his responsibility to keep the folder. After Tanner states he cannot play without the sheets, Fletcher assigns Andrew to perform \"Whiplash\" from memory, resulting in Shaffer winning the competition. Fletcher promotes Andrew to core drummer. However, Andrew is taken aback when Fletcher abruptly reassigns the position to Ryan Connolly, a drummer from a lower-level ensemble within Shaffer.\n",
      "\n",
      "        Because of his single-mindedness toward music, Andrew clashes with his family and breaks up with Nicole to focus on his ambitions. Fletcher begins rehearsal by announcing that Sean Casey, a former member of the Studio Band, died in a car crash. He then pushes the three drummers to play at a faster tempo on \"Caravan\", keeping them for a grueling five-hour practice. Andrew is the only one able to perform on-tempo, and earns the core position back.\n",
      "\n",
      "        On the way to the next competition, Andrew's bus gets a flat tire. He rents a car but arrives late and forgets his drumsticks at the rental office, irritating Fletcher. Andrew races back and retrieves them, but his car is hit by a truck on the way back. Heavily injured, Andrew crawls from the wreckage and runs to the theater, arriving bloodied and weak just as the ensemble enters the stage. He struggles to keep tempo and Fletcher halts the performance to dismiss him from the band. Enraged, Andrew attacks Fletcher onstage and is subsequently expelled from Shaffer.\n",
      "\n",
      "        At his father Jim's request, Andrew meets Rachel Bornholdt, a lawyer representing the parents of the late Sean Casey, who had actually hanged himself after suffering from depression and anxiety resulting from Fletcher's abuse. Casey's parents want Fletcher held accountable, so Andrew reluctantly agrees to testify anonymously, leading Shaffer to terminate Fletcher.\n",
      "\n",
      "        Andrew abandons drumming but encounters Fletcher months later playing piano at a jazz club. Over a drink, Fletcher admits his teaching methods were harsh but insists they were necessary to motivate his students. Citing a story where Jo Jones allegedly threw a cymbal at Charlie Parker as an example, Fletcher says that the next jazz musician to live up to Parker's legacy would never let discouragement stop them. Fletcher invites Andrew to perform with his professional band at a New York JVC Jazz Festival, playing the same pieces from the Shaffer Studio Band; Andrew accepts. Andrew calls Nicole to invite her to the performance but learns she has a new boyfriend.\n",
      "\n",
      "        At the festival, Fletcher tells Andrew he knows Andrew testified against him. As revenge, Fletcher leads the band into a new song Andrew does not know. After a disastrous performance, Andrew walks offstage humiliated. Jim embraces Andrew backstage, but Andrew decides to return to the stage, reclaiming the drum kit and cutting off Fletcher's introduction to the next tune by cueing the band into \"Caravan\". Initially angered, Fletcher resumes conducting. As the piece finishes, Andrew continues into an unexpected improvised solo. Impressed, Fletcher nods in approval before cueing the final chord.\n",
      "\n",
      "        Cast\n",
      "        The film stars Miles Teller, J. K. Simmons, and Paul Reiser.\n",
      "        Miles Teller as Andrew Neiman, an ambitious 19-year-old jazz drummer\n",
      "        Sam Campisi as an 8-year-old Andrew Neiman\n",
      "        J. K. Simmons as Terence Fletcher, Andrew's jazz instructor\n",
      "        Paul Reiser as Jim Neiman, Andrew's father\n",
      "        Melissa Benoist as Nicole, who dates Andrew\n",
      "        Austin Stowell as Ryan Connolly, Andrew's classmate and fellow drummer\n",
      "        Nate Lang as Carl Tanner, Andrew's classmate and fellow drummer\n",
      "        Chris Mulkey as Frank Neiman, Andrew's uncle and Jim's brother\n",
      "        Damon Gupton as Mr. Kramer, Andrew's first instructor\n",
      "        April Grace as Rachel Bornholdt, Andrew's and Jim's lawyer\n",
      "        Production\n",
      "        Development\n",
      "\n",
      "        Writer-director Damien Chazelle and producer Jason Blum\n",
      "        While attending Princeton High School, writer-director Damien Chazelle was in a \"very competitive\" studio band and drew on the dread he felt in those years.[12] He based the conductor, Terence Fletcher, on his former band instructor (who died in 2003) but \"pushed it further\", adding elements of Buddy Rich and other band leaders known for their harsh treatment.[12] Chazelle wrote the film \"initially in frustration\" while trying to get his musical La La Land off the ground.[13]\n",
      "\n",
      "        Right of Way Films and Blumhouse Productions helped Chazelle turn fifteen pages of his original screenplay into a short film starring Johnny Simmons as Neiman and J. K. Simmons (no relation)[14] as Fletcher.[15] The eighteen-minute short film received acclaim after debuting at the 2013 Sundance Film Festival, winning the short film Jury Award for fiction,[16][17] which attracted investors to produce the complete version of the script.[18] The feature-length film was financed for $3.3 million by Bold Films.[3]\n",
      "\n",
      "        In August 2013, Miles Teller signed on to star in the role originated by Johnny Simmons; J. K. Simmons remained attached to his original role.[19] Early on, Chazelle gave J. K. Simmons direction that \"I want you to take it past what you think the normal limit would be,\" telling him: \"I don't want to see a human being on-screen any more. I want to see a monster, a gargoyle, an animal.\" Many of the band members were real musicians or music students, and Chazelle tried to capture their expressions of fear and anxiety when Simmons pressed them. Chazelle said that, between takes, Simmons was \"as sweet as can be\", which he credits for keeping \"the shoot from being nightmarish\".[12]\n",
      "\n",
      "        Filming\n",
      "        Principal photography began in September 2013, with filming taking place throughout Los Angeles, including the Hotel Barclay, Palace Theater, and the Orpheum Theatre.[20][21] The film was shot in nineteen days, with a schedule of fourteen hours of filming per day.[22] Chazelle was involved in a serious car accident in the third week of filming and was hospitalized with possible concussion, but he returned to set the following day to wrap the shoot on time.[22]\n",
      "\n",
      "        Having taught himself to play drums at age fifteen, Teller performed much of the drumming seen in the film. Supporting actor and jazz drummer Nate Lang, who plays Neiman's rival Carl in the film, trained Teller in the specifics of jazz drumming; this included changing his grip from matched to traditional.[23][24] For certain scenes, professional drummer Kyle Crane served as Teller's drum double.[25][26]\n",
      "\n",
      "        Music\n",
      "        Main article: Whiplash (soundtrack)\n",
      "\n",
      "        Composer Justin Hurwitz\n",
      "        The soundtrack album was released on October 7, 2014, via the Var√®se Sarabande label.[27] The soundtrack consists of 24 tracks divided in three different parts: original jazz pieces written for the film, original underscore parts written for the film, and classic jazz standards written by Stan Getz, Duke Ellington, and other musicians. The actual drummer was Bernie Dresel.[28]\n",
      "\n",
      "        On March 27, 2020, an expanded deluxe edition was released on double CD and 2-LP gatefold sleeve vinyl with new cover art, and featured original music by Justin Hurwitz, plus bonus track and remixes by Timo Garcia, Opiuo, Murray A. Lightburn, and more.[29]\n",
      "\n",
      "        Reception\n",
      "        Box office\n",
      "        In North America, the film opened in a limited release on October 10, 2014, in six theaters, grossing $135,388 ($22,565 per theater) and finishing 34th at the box office.[2] It expanded to 88 locations, then 419 locations.[30] After three months on release, it had earned $7 million, and finally expanded nationwide to 1000 locations to capitalize on receiving five Academy Awards nominations.[31] As of October 3, 2024, Whiplash grossed $14 million in the U.S. and Canada and $36.3 million in other territories, for a worldwide total of $50.4 million against a budget of $3.3 million.[2]\n",
      "\n",
      "        Critical response\n",
      "\n",
      "        Director Damien Chazelle at the 2014 Sundance Film Festival.\n",
      "        On the review aggregation website Rotten Tomatoes, the film scored 94% based on 307 reviews, with an average rating of 8.6/10. The site's critical consensus states, \"Intense, inspiring, and well-acted, Whiplash is a brilliant sophomore effort from director Damien Chazelle and a riveting vehicle for stars J. K. Simmons and Miles Teller.\"[32] On Metacritic the film has a score of 89 out of 100, based on reviews from 49 critics, indicating \"universal acclaim\".[33] Simmons received wide praise for his performance and won the 2015 Academy Award for Best Supporting Actor.[34][35]\n",
      "\n",
      "        Peter Debruge, in his review for Variety, said that the film \"demolishes the cliches of the musical-prodigy genre, investing the traditionally polite stages and rehearsal studios of a topnotch conservatory with all the psychological intensity of a battlefield or sports arena.\"[36] Todd McCarthy of The Hollywood Reporter praised the performances of Teller and Simmons, writing: \"Teller, who greatly impressed in last year's Sundance entry The Spectacular Now, does so again in a performance that is more often simmering than volatile ... Simmons has the great good fortune for a character actor to have here found a co-lead part he can really run with, which is what he excitingly does with a man who is profane, way out of bounds and, like many a good villain, utterly compelling.\"[37] Whiplash also won the 87th Academy Award for Best Sound Mixing and the 87th Academy Award for Best Film Editing.[38]\n",
      "\n",
      "        Amber Wilkinson of The Daily Telegraph praised the direction and editing, writing: \"Chazelle's film has a sharp and gripping rhythm, with shots beautifully edited by Tom Cross... often cutting to the crash of Andrew's drums.\"[39] James Rocchi of Indiewire gave a positive review and said, \"Whiplash is ... full of bravado and swagger, uncompromising where it needs to be, informed by great performances and patient with both its characters and the things that matter to them.\"[40] Henry Barnes of The Guardian gave the film a positive review, calling it a rare film \"about music that professes its love for the music and its characters equally.\"[38]\n",
      "\n",
      "        Forrest Wickman of Slate said the film distorted jazz history and promoted a misleading idea of genius, adding, \"In all likelihood, Fletcher isn't making a Charlie Parker. He's making the kind of musician that would throw a cymbal at him.\"[41] In The New Yorker, Richard Brody said, \"Whiplash honors neither jazz nor cinema.\"[42]\n",
      "\n",
      "        Top ten lists\n",
      "        The film appeared on many critics' end-of-year lists. Metacritic collected lists published by major film critics and publications and in their analysis, recorded that Whiplash appeared on 57 lists and in 1st place on 5 of those lists. Overall the film was ranked in 5th place for the year by Metacritic.[43]\n",
      "\n",
      "        1st ‚Äì William Bibbiani, CraveOnline\n",
      "        1st ‚Äì Chris Nashawaty, Entertainment Weekly[44]\n",
      "        1st ‚Äì Erik Davis, Movies.com\n",
      "        2nd ‚Äì A. A. Dowd, The A.V. Club[45]\n",
      "        2nd ‚Äì Scott Feinberg, The Hollywood Reporter\n",
      "        2nd ‚Äì Mara Reinstein, Us Weekly\n",
      "        3rd ‚Äì Tasha Robinson, The Dissolve\n",
      "        3rd ‚Äì Amy Taubin, Artforum\n",
      "        3rd ‚Äì Steve Persall, Tampa Bay Times\n",
      "        3rd ‚Äì Matt Singer, ScreenCrush\n",
      "        3rd ‚Äì Rob Hunter, Film School Rejects\n",
      "        4th ‚Äì Ignatiy Vishnevetsky, The A.V. Club[45]\n",
      "        4th ‚Äì Kyle Smith, New York Post\n",
      "        4th ‚Äì Peter Hartlaub, San Francisco Chronicle\n",
      "        4th ‚Äì Brian Miller, Seattle Weekly\n",
      "        4th ‚Äì Michael Phillips, Chicago Tribune\n",
      "        4th ‚Äì David Edelstein, Vulture\n",
      "        5th ‚Äì Ty Burr, The Boston Globe\n",
      "        5th ‚Äì Genevieve Koski, The Dissolve\n",
      "        5th ‚Äì James Berardinelli, Reelviews\n",
      "        5th ‚Äì David Ansen, The Village Voice[46]\n",
      "        5th ‚Äì Betsy Sharkey, Los Angeles Times (tied with Foxcatcher)\n",
      "        6th ‚Äì Peter Travers, Rolling Stone\n",
      "        6th ‚Äì Richard Roeper, Chicago Sun-Times\n",
      "        6th ‚Äì Joe Neumaier, New York Daily News\n",
      "        7th ‚Äì Jesse Hassenger, The A.V. Club[45]\n",
      "        7th ‚Äì Rex Reed, New York Observer\n",
      "        7th ‚Äì Noel Murray, The Dissolve\n",
      "        7th ‚Äì Jocelyn Noveck, Associated Press\n",
      "        7th ‚Äì Wesley Morris, Grantland\n",
      "        7th ‚Äì Alison Willmore, BuzzFeed\n",
      "        8th ‚Äì Keith Phipps, The Dissolve\n",
      "        8th ‚Äì Mike Scott, The Times-Picayune\n",
      "        8th ‚Äì Rafer Guzman, Newsday\n",
      "        8th ‚Äì Seth Malv√≠n Romero, A.V. Wire\n",
      "        8th ‚Äì Ben Kenigsberg, The A.V. Club[45]\n",
      "        8th ‚Äì Barbara Vancheri, Pittsburgh Post-Gazette\n",
      "        8th ‚Äì Kristopher Tapley, Hitfix\n",
      "        8th ‚Äì Matthew Jacobs and Christopher Rosen, Huffington Post\n",
      "        9th ‚Äì Nathan Rabin, The Dissolve\n",
      "        10th ‚Äì Clayton Davis, Awards Circuit\n",
      "        10th ‚Äì Owen Gleiberman, BBC\n",
      "        Top 10 (listed alphabetically, not ranked) ‚Äì Claudia Puig, USA Today\n",
      "        Top 10 (listed alphabetically, not ranked) ‚Äì Stephen Whitty, The Star-Ledger\n",
      "        \n",
      "        Accolades\n",
      "        Main article: List of accolades received by Whiplash\n",
      "        The film received the top audience and grand jury awards in the U.S. dramatic competition at the 2014 Sundance Film Festival;[47] Chazelle's short film of the same name took home the jury award in the U.S. fiction category one year prior.[16] The film also took the grand prize and the audience award for its favorite film at the 40th Deauville American Film Festival.[48]\n",
      "\n",
      "        Whiplash was originally planned to compete for the Academy Award for Best Original Screenplay, but on January 6, 2015, the Academy of Motion Picture Arts and Sciences (AMPAS) announced that the film would instead be competing in the Adapted Screenplay category[49] to the surprise of many including Chazelle,[50] due to the short film premiering at the 2013 Sundance Film Festival (one year before the feature film's release), even though the feature film's script was written first and the short was made to attract investors into producing the feature-length film.[15] Although the Writers Guild of America categorized the screenplay as original, AMPAS classed it as an adaptation of the 2013 short version.[50]\n",
      "\n",
      "        At the 87th Academy Awards, J. K. Simmons received the Academy Award for Best Supporting Actor for his performance, Tom Cross won the Academy Award for Best Film Editing while Craig Mann, Ben Wilkins, and Thomas Curley won the Academy Award for Best Sound Mixing. In December 2015, the score received a Grammy nomination, and the film was nominated for the NME Award for Best Film.[51]\n",
      "\n",
      "        Legacy\n",
      "        In 2020, it ranked 13 on Empire's list of \"The 100 Greatest Movies Of The 21st Century\" and number 51 on its 2024 list.[52][53] In 2024, it topped the list of the Sundance Film Festival's Top 10 Films of All Time as the result of a survey conducted with 500 filmmakers and critics in honor of the festival's 40th anniversary.[54][55]\n",
      "\n",
      "        Actors Danielle Brooks, Katie McGrath, and Tramell Tillman have voiced their admiration for the film, with McGrath saying \"There isn't one needless second in this film...every frame is perfect.\"[56][57]\n",
      "\n",
      "        To celebrate the film's 10th anniversary, a new 4K remaster of the film was released theatrically on September 20, 2024, following a special anniversary screening at the 2024 Toronto International Film Festival on September 9.[58]\n",
      "\n",
      "        In June 2025, Tom Bernard, co-President of Sony Pictures Classics, cited Whiplash as among the best films to come from the studio in the 21st century. It also ranked number 60 on The New York Times' list of \"The 100 Best Movies of the 21st Century\" and number 19 on the \"Readers' Choice\" edition of the list.[57][59][60]\n",
      "        ...'\n",
      "\n",
      "--- Step 1: Kicking off Extraction Call ---\n",
      "LLM Response (Extraction) received and parsed.\n",
      "DB: Found 176 potential duplicate nodes.\n",
      "DB: Found 606 potentially related edges.\n",
      "\n",
      "--- Step 2: Kicking off Resolution Call ---\n",
      "LLM Response (Resolution) received and parsed.\n",
      "\n",
      "--- Step 3: Integrating results into DB ---\n",
      "DB: UPLOADED new node 'UK'.\n",
      "DB: UPLOADED new node 'Scandinavia'.\n",
      "DB: UPLOADED new node 'Benelux'.\n",
      "DB: UPLOADED new node 'Eastern Europe'.\n",
      "DB: UPLOADED new node 'CIS'.\n",
      "DB: UPLOADED new node 'Greece'.\n",
      "DB: UPLOADED new node 'South Africa'.\n",
      "DB: UPLOADED new node 'Spain'.\n",
      "DB: UPLOADED new node 'Italy'.\n",
      "DB: UPLOADED new node 'Portugal'.\n",
      "DB: UPLOADED new node 'Latin America'.\n",
      "DB: UPLOADED new node 'Perfectionism'.\n",
      "DB: UPLOADED new node 'Dedication'.\n",
      "DB: UPLOADED new node 'Success'.\n",
      "DB: UPLOADED new node 'Ambition'.\n",
      "DB: UPLOADED new node 'Ryan Connolly'.\n",
      "DB: UPLOADED new node 'Whiplash (soundtrack)'.\n",
      "Edge Data: {'source_temp_id': 13, 'target_temp_id': 14, 'relation_type': 'related_to', 'fact_text': 'Sony Pictures acquired distribution rights for most of the world, releasing the film under Sony Pictures Classics in North America, Germany, and Australia, and Stage 6 Films in the UK, Scandinavia, Benelux, Eastern Europe (excluding the CIS), Greece, South Africa, Spain, Italy, Portugal and Latin America.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 13, 'target_temp_id': 15, 'relation_type': 'related_to', 'fact_text': 'Sony Pictures acquired distribution rights for most of the world, releasing the film under Sony Pictures Classics in North America, Germany, and Australia, and Stage 6 Films in the UK, Scandinavia, Benelux, Eastern Europe (excluding the CIS), Greece, South Africa, Spain, Italy, Portugal and Latin America.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 13, 'target_temp_id': 16, 'relation_type': 'related_to', 'fact_text': 'Sony Pictures acquired distribution rights for most of the world, releasing the film under Sony Pictures Classics in North America, Germany, and Australia, and Stage 6 Films in the UK, Scandinavia, Benelux, Eastern Europe (excluding the CIS), Greece, South Africa, Spain, Italy, Portugal and Latin America.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 13, 'target_temp_id': 17, 'relation_type': 'related_to', 'fact_text': 'Sony Pictures acquired distribution rights for most of the world, releasing the film under Sony Pictures Classics in North America, Germany, and Australia, and Stage 6 Films in the UK, Scandinavia, Benelux, Eastern Europe (excluding the CIS), Greece, South Africa, Spain, Italy, Portugal and Latin America.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 17, 'target_temp_id': 18, 'relation_type': 'related_to', 'fact_text': 'Sony Pictures acquired distribution rights for most of the world, releasing the film under Sony Pictures Classics in North America, Germany, and Australia, and Stage 6 Films in the UK, Scandinavia, Benelux, Eastern Europe (excluding the CIS), Greece, South Africa, Spain, Italy, Portugal and Latin America.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 13, 'target_temp_id': 19, 'relation_type': 'related_to', 'fact_text': 'Sony Pictures acquired distribution rights for most of the world, releasing the film under Sony Pictures Classics in North America, Germany, and Australia, and Stage 6 Films in the UK, Scandinavia, Benelux, Eastern Europe (excluding the CIS), Greece, South Africa, Spain, Italy, Portugal and Latin America.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 13, 'target_temp_id': 20, 'relation_type': 'related_to', 'fact_text': 'Sony Pictures acquired distribution rights for most of the world, releasing the film under Sony Pictures Classics in North America, Germany, and Australia, and Stage 6 Films in the UK, Scandinavia, Benelux, Eastern Europe (excluding the CIS), Greece, South Africa, Spain, Italy, Portugal and Latin America.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 13, 'target_temp_id': 21, 'relation_type': 'related_to', 'fact_text': 'Sony Pictures acquired distribution rights for most of the world, releasing the film under Sony Pictures Classics in North America, Germany, and Australia, and Stage 6 Films in the UK, Scandinavia, Benelux, Eastern Europe (excluding the CIS), Greece, South Africa, Spain, Italy, Portugal and Latin America.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 13, 'target_temp_id': 22, 'relation_type': 'related_to', 'fact_text': 'Sony Pictures acquired distribution rights for most of the world, releasing the film under Sony Pictures Classics in North America, Germany, and Australia, and Stage 6 Films in the UK, Scandinavia, Benelux, Eastern Europe (excluding the CIS), Greece, South Africa, Spain, Italy, Portugal and Latin America.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 13, 'target_temp_id': 23, 'relation_type': 'related_to', 'fact_text': 'Sony Pictures acquired distribution rights for most of the world, releasing the film under Sony Pictures Classics in North America, Germany, and Australia, and Stage 6 Films in the UK, Scandinavia, Benelux, Eastern Europe (excluding the CIS), Greece, South Africa, Spain, Italy, Portugal and Latin America.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 13, 'target_temp_id': 24, 'relation_type': 'related_to', 'fact_text': 'Sony Pictures acquired distribution rights for most of the world, releasing the film under Sony Pictures Classics in North America, Germany, and Australia, and Stage 6 Films in the UK, Scandinavia, Benelux, Eastern Europe (excluding the CIS), Greece, South Africa, Spain, Italy, Portugal and Latin America.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 28, 'relation_type': 'related_to', 'fact_text': 'The film explores concepts of perfectionism, dedication, and success and deconstructs the concept of ambition.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 29, 'relation_type': 'related_to', 'fact_text': 'The film explores concepts of perfectionism, dedication, and success and deconstructs the concept of ambition.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 30, 'relation_type': 'related_to', 'fact_text': 'The film explores concepts of perfectionism, dedication, and success and deconstructs the concept of ambition.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 31, 'relation_type': 'related_to', 'fact_text': 'The film explores concepts of perfectionism, dedication, and success and deconstructs the concept of ambition.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 34, 'target_temp_id': 38, 'relation_type': 'related_to', 'fact_text': 'However, Andrew is taken aback when Fletcher abruptly reassigns the position to Ryan Connolly, a drummer from a lower-level ensemble within Shaffer.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 3, 'target_temp_id': 47, 'relation_type': 'related_to', 'fact_text': 'In August 2013, Miles Teller signed on to star in the role originated by Johnny Simmons; J. K. Simmons remained attached to his original role.', 'valid_at': '2013-08-01T00:00:00Z', 'invalid_at': '2013-08-31T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 27, 'relation_type': 'related_to', 'fact_text': 'Principal photography began in September 2013, with filming taking place throughout Los Angeles, including the Hotel Barclay, Palace Theater, and the Orpheum Theatre.', 'valid_at': '2013-09-01T00:00:00Z', 'invalid_at': '2013-09-30T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 48, 'relation_type': 'related_to', 'fact_text': 'Principal photography began in September 2013, with filming taking place throughout Los Angeles, including the Hotel Barclay, Palace Theater, and the Orpheum Theatre.', 'valid_at': '2013-09-01T00:00:00Z', 'invalid_at': '2013-09-30T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 49, 'relation_type': 'related_to', 'fact_text': 'Principal photography began in September 2013, with filming taking place throughout Los Angeles, including the Hotel Barclay, Palace Theater, and the Orpheum Theatre.', 'valid_at': '2013-09-01T00:00:00Z', 'invalid_at': '2013-09-30T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 50, 'relation_type': 'related_to', 'fact_text': 'Principal photography began in September 2013, with filming taking place throughout Los Angeles, including the Hotel Barclay, Palace Theater, and the Orpheum Theatre.', 'valid_at': '2013-09-01T00:00:00Z', 'invalid_at': '2013-09-30T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 51, 'target_temp_id': 2, 'relation_type': 'related_to', 'fact_text': \"Supporting actor and jazz drummer Nate Lang, who plays Neiman's rival Carl in the film, trained Teller in the specifics of jazz drumming; this included changing his grip from matched to traditional.\", 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 52, 'target_temp_id': 2, 'relation_type': 'related_to', 'fact_text': \"For certain scenes, professional drummer Kyle Crane served as Teller's drum double.\", 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 53, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': 'The soundtrack album was released on October 7, 2014, via the Var√®se Sarabande label.', 'valid_at': '2014-10-07T00:00:00Z', 'invalid_at': '2014-10-07T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 53, 'target_temp_id': 55, 'relation_type': 'related_to', 'fact_text': 'The soundtrack album was released on October 7, 2014, via the Var√®se Sarabande label.', 'valid_at': '2014-10-07T00:00:00Z', 'invalid_at': '2014-10-07T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 53, 'target_temp_id': 56, 'relation_type': 'related_to', 'fact_text': 'The soundtrack consists of 24 tracks divided in three different parts: original jazz pieces written for the film, original underscore parts written for the film, and classic jazz standards written by Stan Getz, Duke Ellington, and other musicians.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 53, 'target_temp_id': 57, 'relation_type': 'related_to', 'fact_text': 'The soundtrack consists of 24 tracks divided in three different parts: original jazz pieces written for the film, original underscore parts written for the film, and classic jazz standards written by Stan Getz, Duke Ellington, and other musicians.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 53, 'target_temp_id': 58, 'relation_type': 'related_to', 'fact_text': 'The actual drummer was Bernie Dresel.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 53, 'target_temp_id': 54, 'relation_type': 'related_to', 'fact_text': 'On March 27, 2020, an expanded deluxe edition was released on double CD and 2-LP gatefold sleeve vinyl with new cover art, and featured original music by Justin Hurwitz, plus bonus track and remixes by Timo Garcia, Opiuo, Murray A. Lightburn, and more.', 'valid_at': '2020-03-27T00:00:00Z', 'invalid_at': '2020-03-27T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 53, 'target_temp_id': 59, 'relation_type': 'related_to', 'fact_text': 'On March 27, 2020, an expanded deluxe edition was released on double CD and 2-LP gatefold sleeve vinyl with new cover art, and featured original music by Justin Hurwitz, plus bonus track and remixes by Timo Garcia, Opiuo, Murray A. Lightburn, and more.', 'valid_at': '2020-03-27T00:00:00Z', 'invalid_at': '2020-03-27T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 53, 'target_temp_id': 60, 'relation_type': 'related_to', 'fact_text': 'On March 27, 2020, an expanded deluxe edition was released on double CD and 2-LP gatefold sleeve vinyl with new cover art, and featured original music by Justin Hurwitz, plus bonus track and remixes by Timo Garcia, Opiuo, Murray A. Lightburn, and more.', 'valid_at': '2020-03-27T00:00:00Z', 'invalid_at': '2020-03-27T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 53, 'target_temp_id': 61, 'relation_type': 'related_to', 'fact_text': 'On March 27, 2020, an expanded deluxe edition was released on double CD and 2-LP gatefold sleeve vinyl with new cover art, and featured original music by Justin Hurwitz, plus bonus track and remixes by Timo Garcia, Opiuo, Murray A. Lightburn, and more.', 'valid_at': '2020-03-27T00:00:00Z', 'invalid_at': '2020-03-27T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 62, 'relation_type': 'related_to', 'fact_text': 'On the review aggregation website Rotten Tomatoes, the film scored 94% based on 307 reviews, with an average rating of 8.6/10.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 63, 'relation_type': 'related_to', 'fact_text': 'On Metacritic the film has a score of 89 out of 100, based on reviews from 49 critics, indicating \"universal acclaim.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 64, 'target_temp_id': 65, 'relation_type': 'related_to', 'fact_text': 'Peter Debruge, in his review for Variety, said that the film \"demolishes the cliches of the musical-prodigy genre, investing the traditionally polite stages and rehearsal studios of a topnotch conservatory with all the psychological intensity of a battlefield or sports arena.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 64, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': 'Peter Debruge, in his review for Variety, said that the film \"demolishes the cliches of the musical-prodigy genre, investing the traditionally polite stages and rehearsal studios of a topnotch conservatory with all the psychological intensity of a battlefield or sports arena.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 66, 'target_temp_id': 67, 'relation_type': 'related_to', 'fact_text': 'Todd McCarthy of The Hollywood Reporter praised the performances of Teller and Simmons, writing: \"Teller, who greatly impressed in last year\\'s Sundance entry The Spectacular Now, does so again in a performance that is more often simmering than volatile ... Simmons has the great good fortune for a character actor to have here found a co-lead part he can really run with, which is what he excitingly does with a man who is profane, way out of bounds and, like many a good villain, utterly compelling.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 66, 'target_temp_id': 2, 'relation_type': 'related_to', 'fact_text': 'Todd McCarthy of The Hollywood Reporter praised the performances of Teller and Simmons, writing: \"Teller, who greatly impressed in last year\\'s Sundance entry The Spectacular Now, does so again in a performance that is more often simmering than volatile ... Simmons has the great good fortune for a character actor to have here found a co-lead part he can really run with, which is what he excitingly does with a man who is profane, way out of bounds and, like many a good villain, utterly compelling.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 66, 'target_temp_id': 3, 'relation_type': 'related_to', 'fact_text': 'Todd McCarthy of The Hollywood Reporter praised the performances of Teller and Simmons, writing: \"Teller, who greatly impressed in last year\\'s Sundance entry The Spectacular Now, does so again in a performance that is more often simmering than volatile ... Simmons has the great good fortune for a character actor to have here found a co-lead part he can really run with, which is what he excitingly does with a man who is profane, way out of bounds and, like many a good villain, utterly compelling.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 68, 'relation_type': 'related_to', 'fact_text': 'Whiplash also won the 87th Academy Award for Best Sound Mixing and the 87th Academy Award for Best Film Editing.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 69, 'target_temp_id': 70, 'relation_type': 'related_to', 'fact_text': 'Amber Wilkinson of The Daily Telegraph praised the direction and editing, writing: \"Chazelle\\'s film has a sharp and gripping rhythm, with shots beautifully edited by Tom Cross... often cutting to the crash of Andrew\\'s drums.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 69, 'target_temp_id': 1, 'relation_type': 'related_to', 'fact_text': 'Amber Wilkinson of The Daily Telegraph praised the direction and editing, writing: \"Chazelle\\'s film has a sharp and gripping rhythm, with shots beautifully edited by Tom Cross... often cutting to the crash of Andrew\\'s drums.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 69, 'target_temp_id': 68, 'relation_type': 'related_to', 'fact_text': 'Amber Wilkinson of The Daily Telegraph praised the direction and editing, writing: \"Chazelle\\'s film has a sharp and gripping rhythm, with shots beautifully edited by Tom Cross... often cutting to the crash of Andrew\\'s drums.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 71, 'target_temp_id': 72, 'relation_type': 'related_to', 'fact_text': 'James Rocchi of Indiewire gave a positive review and said, \"Whiplash is ... full of bravado and swagger, uncompromising where it needs to be, informed by great performances and patient with both its characters and the things that matter to them.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 71, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': 'James Rocchi of Indiewire gave a positive review and said, \"Whiplash is ... full of bravado and swagger, uncompromising where it needs to be, informed by great performances and patient with both its characters and the things that matter to them.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 73, 'target_temp_id': 74, 'relation_type': 'related_to', 'fact_text': 'Henry Barnes of The Guardian gave the film a positive review, calling it a rare film \"about music that professes its love for the music and its characters equally.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 73, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': 'Henry Barnes of The Guardian gave the film a positive review, calling it a rare film \"about music that professes its love for the music and its characters equally.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 75, 'target_temp_id': 76, 'relation_type': 'related_to', 'fact_text': 'Forrest Wickman of Slate said the film distorted jazz history and promoted a misleading idea of genius, adding, \"In all likelihood, Fletcher isn\\'t making a Charlie Parker.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 75, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': 'Forrest Wickman of Slate said the film distorted jazz history and promoted a misleading idea of genius, adding, \"In all likelihood, Fletcher isn\\'t making a Charlie Parker.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 77, 'target_temp_id': 78, 'relation_type': 'related_to', 'fact_text': 'In The New Yorker, Richard Brody said, \"Whiplash honors neither jazz nor cinema.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 77, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': 'In The New Yorker, Richard Brody said, \"Whiplash honors neither jazz nor cinema.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 63, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': 'Metacritic collected lists published by major film critics and publications and in their analysis, recorded that Whiplash appeared on 57 lists and in 1st place on 5 of those lists.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 79, 'target_temp_id': 80, 'relation_type': 'related_to', 'fact_text': '1st ‚Äì William Bibbiani, CraveOnline', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 79, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '1st ‚Äì William Bibbiani, CraveOnline', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 81, 'target_temp_id': 82, 'relation_type': 'related_to', 'fact_text': '1st ‚Äì Chris Nashawaty, Entertainment Weekly', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 81, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '1st ‚Äì Chris Nashawaty, Entertainment Weekly', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 83, 'target_temp_id': 84, 'relation_type': 'related_to', 'fact_text': '1st ‚Äì Erik Davis, Movies.com', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 83, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '1st ‚Äì Erik Davis, Movies.com', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 85, 'target_temp_id': 86, 'relation_type': 'related_to', 'fact_text': '2nd ‚Äì A. A. Dowd, The A.V. Club', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 85, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '2nd ‚Äì A. A. Dowd, The A.V. Club', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 87, 'target_temp_id': 67, 'relation_type': 'related_to', 'fact_text': '2nd ‚Äì Scott Feinberg, The Hollywood Reporter', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 87, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '2nd ‚Äì Scott Feinberg, The Hollywood Reporter', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 88, 'target_temp_id': 89, 'relation_type': 'related_to', 'fact_text': '2nd ‚Äì Mara Reinstein, Us Weekly', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 88, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '2nd ‚Äì Mara Reinstein, Us Weekly', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 90, 'target_temp_id': 91, 'relation_type': 'related_to', 'fact_text': '3rd ‚Äì Tasha Robinson, The Dissolve', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 90, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '3rd ‚Äì Tasha Robinson, The Dissolve', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 92, 'target_temp_id': 93, 'relation_type': 'related_to', 'fact_text': '3rd ‚Äì Amy Taubin, Artforum', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 92, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '3rd ‚Äì Amy Taubin, Artforum', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 94, 'target_temp_id': 95, 'relation_type': 'related_to', 'fact_text': '3rd ‚Äì Steve Persall, Tampa Bay Times', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 94, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '3rd ‚Äì Steve Persall, Tampa Bay Times', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 96, 'target_temp_id': 97, 'relation_type': 'related_to', 'fact_text': '3rd ‚Äì Matt Singer, ScreenCrush', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 96, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '3rd ‚Äì Matt Singer, ScreenCrush', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 98, 'target_temp_id': 99, 'relation_type': 'related_to', 'fact_text': '3rd ‚Äì Rob Hunter, Film School Rejects', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 98, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '3rd ‚Äì Rob Hunter, Film School Rejects', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 100, 'target_temp_id': 86, 'relation_type': 'related_to', 'fact_text': '4th ‚Äì Ignatiy Vishnevetsky, The A.V. Club', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 100, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '4th ‚Äì Ignatiy Vishnevetsky, The A.V. Club', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 101, 'target_temp_id': 102, 'relation_type': 'related_to', 'fact_text': '4th ‚Äì Kyle Smith, New York Post', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 101, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '4th ‚Äì Kyle Smith, New York Post', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 103, 'target_temp_id': 104, 'relation_type': 'related_to', 'fact_text': '4th ‚Äì Peter Hartlaub, San Francisco Chronicle', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 103, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '4th ‚Äì Peter Hartlaub, San Francisco Chronicle', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 105, 'target_temp_id': 106, 'relation_type': 'related_to', 'fact_text': '4th ‚Äì Brian Miller, Seattle Weekly', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 105, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '4th ‚Äì Brian Miller, Seattle Weekly', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 107, 'target_temp_id': 108, 'relation_type': 'related_to', 'fact_text': '4th ‚Äì Michael Phillips, Chicago Tribune', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 107, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '4th ‚Äì Michael Phillips, Chicago Tribune', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 109, 'target_temp_id': 110, 'relation_type': 'related_to', 'fact_text': '4th ‚Äì David Edelstein, Vulture', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 109, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '4th ‚Äì David Edelstein, Vulture', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 111, 'target_temp_id': 112, 'relation_type': 'related_to', 'fact_text': '5th ‚Äì Ty Burr, The Boston Globe', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 111, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '5th ‚Äì Ty Burr, The Boston Globe', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 113, 'target_temp_id': 91, 'relation_type': 'related_to', 'fact_text': '5th ‚Äì Genevieve Koski, The Dissolve', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 113, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '5th ‚Äì Genevieve Koski, The Dissolve', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 114, 'target_temp_id': 115, 'relation_type': 'related_to', 'fact_text': '5th ‚Äì James Berardinelli, Reelviews', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 114, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '5th ‚Äì James Berardinelli, Reelviews', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 116, 'target_temp_id': 117, 'relation_type': 'related_to', 'fact_text': '5th ‚Äì David Ansen, The Village Voice', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 116, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '5th ‚Äì David Ansen, The Village Voice', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 118, 'target_temp_id': 119, 'relation_type': 'related_to', 'fact_text': '5th ‚Äì Betsy Sharkey, Los Angeles Times (tied with Foxcatcher)', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 118, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '5th ‚Äì Betsy Sharkey, Los Angeles Times (tied with Foxcatcher)', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 118, 'target_temp_id': 120, 'relation_type': 'related_to', 'fact_text': '5th ‚Äì Betsy Sharkey, Los Angeles Times (tied with Foxcatcher)', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 121, 'target_temp_id': 122, 'relation_type': 'related_to', 'fact_text': '6th ‚Äì Peter Travers, Rolling Stone', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 121, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '6th ‚Äì Peter Travers, Rolling Stone', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 123, 'target_temp_id': 124, 'relation_type': 'related_to', 'fact_text': '6th ‚Äì Richard Roeper, Chicago Sun-Times', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 123, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '6th ‚Äì Richard Roeper, Chicago Sun-Times', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 125, 'target_temp_id': 126, 'relation_type': 'related_to', 'fact_text': '6th ‚Äì Joe Neumaier, New York Daily News', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 125, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '6th ‚Äì Joe Neumaier, New York Daily News', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 127, 'target_temp_id': 86, 'relation_type': 'related_to', 'fact_text': '7th ‚Äì Jesse Hassenger, The A.V. Club', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 127, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '7th ‚Äì Jesse Hassenger, The A.V. Club', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 128, 'target_temp_id': 129, 'relation_type': 'related_to', 'fact_text': '7th ‚Äì Rex Reed, New York Observer', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 128, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '7th ‚Äì Rex Reed, New York Observer', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 130, 'target_temp_id': 91, 'relation_type': 'related_to', 'fact_text': '7th ‚Äì Noel Murray, The Dissolve', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 130, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '7th ‚Äì Noel Murray, The Dissolve', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 131, 'target_temp_id': 132, 'relation_type': 'related_to', 'fact_text': '7th ‚Äì Jocelyn Noveck, Associated Press', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 131, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '7th ‚Äì Jocelyn Noveck, Associated Press', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 133, 'target_temp_id': 134, 'relation_type': 'related_to', 'fact_text': '7th ‚Äì Wesley Morris, Grantland', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 133, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '7th ‚Äì Wesley Morris, Grantland', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 135, 'target_temp_id': 136, 'relation_type': 'related_to', 'fact_text': '7th ‚Äì Alison Willmore, BuzzFeed', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 135, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '7th ‚Äì Alison Willmore, BuzzFeed', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 137, 'target_temp_id': 91, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Keith Phipps, The Dissolve', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 137, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Keith Phipps, The Dissolve', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 138, 'target_temp_id': 139, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Mike Scott, The Times-Picayune', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 138, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Mike Scott, The Times-Picayune', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 140, 'target_temp_id': 141, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Rafer Guzman, Newsday', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 140, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Rafer Guzman, Newsday', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 142, 'target_temp_id': 143, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Seth Malv√≠n Romero, A.V. Wire', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 142, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Seth Malv√≠n Romero, A.V. Wire', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 144, 'target_temp_id': 86, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Ben Kenigsberg, The A.V. Club', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 144, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Ben Kenigsberg, The A.V. Club', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 145, 'target_temp_id': 146, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Barbara Vancheri, Pittsburgh Post-Gazette', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 145, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Barbara Vancheri, Pittsburgh Post-Gazette', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 147, 'target_temp_id': 148, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Kristopher Tapley, Hitfix', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 147, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Kristopher Tapley, Hitfix', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 149, 'target_temp_id': 151, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Matthew Jacobs and Christopher Rosen, Huffington Post', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 150, 'target_temp_id': 151, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Matthew Jacobs and Christopher Rosen, Huffington Post', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 149, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Matthew Jacobs and Christopher Rosen, Huffington Post', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 150, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '8th ‚Äì Matthew Jacobs and Christopher Rosen, Huffington Post', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 152, 'target_temp_id': 91, 'relation_type': 'related_to', 'fact_text': '9th ‚Äì Nathan Rabin, The Dissolve', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 152, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '9th ‚Äì Nathan Rabin, The Dissolve', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 153, 'target_temp_id': 154, 'relation_type': 'related_to', 'fact_text': '10th ‚Äì Clayton Davis, Awards Circuit', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 153, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '10th ‚Äì Clayton Davis, Awards Circuit', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 155, 'target_temp_id': 156, 'relation_type': 'related_to', 'fact_text': '10th ‚Äì Owen Gleiberman, BBC', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 155, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': '10th ‚Äì Owen Gleiberman, BBC', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 157, 'target_temp_id': 158, 'relation_type': 'related_to', 'fact_text': 'Top 10 (listed alphabetically, not ranked) ‚Äì Claudia Puig, USA Today', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 157, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': 'Top 10 (listed alphabetically, not ranked) ‚Äì Claudia Puig, USA Today', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 159, 'target_temp_id': 160, 'relation_type': 'related_to', 'fact_text': 'Top 10 (listed alphabetically, not ranked) ‚Äì Stephen Whitty, The Star-Ledger', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 159, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': 'Top 10 (listed alphabetically, not ranked) ‚Äì Stephen Whitty, The Star-Ledger', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 26, 'relation_type': 'related_to', 'fact_text': 'The film received the top audience and grand jury awards in the U.S. dramatic competition at the 2014 Sundance Film Festival;', 'valid_at': '2014-01-01T00:00:00Z', 'invalid_at': '2014-12-31T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 1, 'target_temp_id': 25, 'relation_type': 'related_to', 'fact_text': \"Chazelle's short film of the same name took home the jury award in the U.S. fiction category one year prior.\", 'valid_at': '2013-01-01T00:00:00Z', 'invalid_at': '2013-12-31T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 161, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': \"on January 6, 2015, the Academy of Motion Picture Arts and Sciences (AMPAS) announced that the film would instead be competing in the Adapted Screenplay category to the surprise of many including Chazelle, due to the short film premiering at the 2013 Sundance Film Festival (one year before the feature film's release), even though the feature film's script was written first and the short was made to attract investors into producing the feature-length film.\", 'valid_at': '2015-01-06T00:00:00Z', 'invalid_at': '2015-01-06T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 162, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': 'Although the Writers Guild of America categorized the screenplay as original, AMPAS classed it as an adaptation of the 2013 short version.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 161, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': 'Although the Writers Guild of America categorized the screenplay as original, AMPAS classed it as an adaptation of the 2013 short version.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 3, 'target_temp_id': 161, 'relation_type': 'related_to', 'fact_text': 'At the 87th Academy Awards, J. K. Simmons received the Academy Award for Best Supporting Actor for his performance, Tom Cross won the Academy Award for Best Film Editing while Craig Mann, Ben Wilkins, and Thomas Curley won the Academy Award for Best Sound Mixing.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 68, 'target_temp_id': 161, 'relation_type': 'related_to', 'fact_text': 'At the 87th Academy Awards, J. K. Simmons received the Academy Award for Best Supporting Actor for his performance, Tom Cross won the Academy Award for Best Film Editing while Craig Mann, Ben Wilkins, and Thomas Curley won the Academy Award for Best Sound Mixing.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 163, 'target_temp_id': 161, 'relation_type': 'related_to', 'fact_text': 'At the 87th Academy Awards, J. K. Simmons received the Academy Award for Best Supporting Actor for his performance, Tom Cross won the Academy Award for Best Film Editing while Craig Mann, Ben Wilkins, and Thomas Curley won the Academy Award for Best Sound Mixing.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 164, 'target_temp_id': 161, 'relation_type': 'related_to', 'fact_text': 'At the 87th Academy Awards, J. K. Simmons received the Academy Award for Best Supporting Actor for his performance, Tom Cross won the Academy Award for Best Film Editing while Craig Mann, Ben Wilkins, and Thomas Curley won the Academy Award for Best Sound Mixing.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 165, 'target_temp_id': 161, 'relation_type': 'related_to', 'fact_text': 'At the 87th Academy Awards, J. K. Simmons received the Academy Award for Best Supporting Actor for his performance, Tom Cross won the Academy Award for Best Film Editing while Craig Mann, Ben Wilkins, and Thomas Curley won the Academy Award for Best Sound Mixing.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 53, 'target_temp_id': 166, 'relation_type': 'related_to', 'fact_text': 'In December 2015, the score received a Grammy nomination, and the film was nominated for the NME Award for Best Film.', 'valid_at': '2015-12-01T00:00:00Z', 'invalid_at': '2015-12-31T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 167, 'relation_type': 'related_to', 'fact_text': 'In December 2015, the score received a Grammy nomination, and the film was nominated for the NME Award for Best Film.', 'valid_at': '2015-12-01T00:00:00Z', 'invalid_at': '2015-12-31T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 168, 'relation_type': 'related_to', 'fact_text': 'In 2020, it ranked 13 on Empire\\'s list of \"The 100 Greatest Movies Of the 21st Century\" and number 51 on its 2024 list.', 'valid_at': '2020-01-01T00:00:00Z', 'invalid_at': '2020-12-31T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 168, 'relation_type': 'related_to', 'fact_text': 'In 2020, it ranked 13 on Empire\\'s list of \"The 100 Greatest Movies Of the 21st Century\" and number 51 on its 2024 list.', 'valid_at': '2024-01-01T00:00:00Z', 'invalid_at': '2024-12-31T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 26, 'relation_type': 'related_to', 'fact_text': \"In 2024, it topped the list of the Sundance Film Festival's Top 10 Films of All Time as the result of a survey conducted with 500 filmmakers and critics in honor of the festival's 40th anniversary.\", 'valid_at': '2024-01-01T00:00:00Z', 'invalid_at': '2024-12-31T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 169, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': 'Actors Danielle Brooks, Katie McGrath, and Tramell Tillman have voiced their admiration for the film, with McGrath saying \"There isn\\'t one needless second in this film...every frame is perfect.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 170, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': 'Actors Danielle Brooks, Katie McGrath, and Tramell Tillman have voiced their admiration for the film, with McGrath saying \"There isn\\'t one needless second in this film...every frame is perfect.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 171, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': 'Actors Danielle Brooks, Katie McGrath, and Tramell Tillman have voiced their admiration for the film, with McGrath saying \"There isn\\'t one needless second in this film...every frame is perfect.\"', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 172, 'relation_type': 'related_to', 'fact_text': \"To celebrate the film's 10th anniversary, a new 4K remaster of the film was released theatrically on September 20, 2024, following a special anniversary screening at the 2024 Toronto International Film Festival on September 9.\", 'valid_at': '2024-09-09T00:00:00Z', 'invalid_at': '2024-09-09T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 173, 'target_temp_id': 12, 'relation_type': 'related_to', 'fact_text': 'In June 2025, Tom Bernard, co-President of Sony Pictures Classics, cited Whiplash as among the best films to come from the studio in the 21st century.', 'valid_at': '2025-06-01T00:00:00Z', 'invalid_at': '2025-06-30T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 173, 'target_temp_id': 0, 'relation_type': 'related_to', 'fact_text': 'In June 2025, Tom Bernard, co-President of Sony Pictures Classics, cited Whiplash as among the best films to come from the studio in the 21st century.', 'valid_at': '2025-06-01T00:00:00Z', 'invalid_at': '2025-06-30T23:59:59Z'}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "Edge Data: {'source_temp_id': 0, 'target_temp_id': 174, 'relation_type': 'related_to', 'fact_text': 'It also ranked number 60 on The New York Times\\' list of \"The 100 Best Movies of the 21st Century\" and number 19 on the \"Readers\\' Choice\" edition of the list.', 'valid_at': None, 'invalid_at': None}\n",
      "DB: UPLOADED new edge 'related_to'.\n",
      "===== Episode processing complete. =====\n",
      "--- Finish parsing article_4 ---\n",
      "Waiting 1 second to respect rate limits...\n",
      "\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    await main()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# QUERY"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/thubpham/miniconda3/envs/graphiti-env/lib/python3.10/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "# --- Query Bot ---\n",
    "from google.generativeai.types import GenerationConfig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- GRAPH SEARCH FUNCTION ---\n",
    "async def search_graph_and_format_results(db_client: FalkorDBClient, user_query: str) -> str:\n",
    "    \"\"\"\n",
    "    Searches the graph for entities related to the user query and formats the results\n",
    "    into a string context for the RAG model.\n",
    "    \"\"\"\n",
    "    print(f\"\\n--- Searching Graph for query: '{user_query}' ---\")\n",
    "    \n",
    "    entities_in_query = [word for word in user_query.replace(\"?\", \"\").split() if word[0].isupper()]\n",
    "    if not entities_in_query:\n",
    "        print(\"No entities identified in the query.\")\n",
    "        return \"No relevant information found in the knowledge graph.\"\n",
    "\n",
    "    print(f\"Identified entities: {entities_in_query}\")\n",
    "\n",
    "    # Find nodes matching the identified entities\n",
    "    query = \"\"\"\n",
    "    UNWIND $names AS entityName\n",
    "    MATCH (n:Node)\n",
    "    WHERE toLower(n.entity_name) CONTAINS toLower(entityName)\n",
    "    RETURN n.uuid AS uuid, n.entity_name AS name, n.summary AS summary\n",
    "    \"\"\"\n",
    "    results = await db_client._execute_query(query, {\"names\": entities_in_query})\n",
    "    \n",
    "    found_nodes = results.result_set\n",
    "    if not found_nodes:\n",
    "        print(\"No matching nodes found in the database.\")\n",
    "        return \"No relevant information found in the knowledge graph.\"\n",
    "\n",
    "    node_uuids = [record[0] for record in found_nodes]\n",
    "    context_parts = [\"Found the following information in the knowledge graph:\"]\n",
    "\n",
    "    for record in found_nodes:\n",
    "        context_parts.append(f\"\\n- Entity: {record[1]}\\n  Summary: {record[2]}\")\n",
    "\n",
    "    # Find relationships connected to these nodes\n",
    "    edge_query = \"\"\"\n",
    "    UNWIND $uuids AS node_uuid\n",
    "    MATCH (a:Node {uuid: node_uuid})-[r]->(b:Node)\n",
    "    WHERE r.is_active = true\n",
    "    RETURN a.entity_name, type(r), b.entity_name, r.fact_text\n",
    "    \"\"\"\n",
    "    edge_results = await db_client._execute_query(edge_query, {\"uuids\": node_uuids})\n",
    "\n",
    "    found_edges = edge_results.result_set\n",
    "    if found_edges:\n",
    "        context_parts.append(\"\\n- Relationships:\")\n",
    "        for record in found_edges:\n",
    "            source, rel_type, target, fact = record\n",
    "            context_parts.append(f\"  - Fact: {fact} (Connects {source} -> {target})\")\n",
    "    \n",
    "    formatted_context = \"\\n\".join(context_parts)\n",
    "    print(\"\\n--- Search Complete. Formatted Context ---\")\n",
    "    print(formatted_context)\n",
    "    return formatted_context"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- CHATBOT CLIENT ---\n",
    "from google.genai import types\n",
    "class GeminiRAGClient:\n",
    "    \"\"\"A client to generate answers using Gemini and retrieved context.\"\"\"\n",
    "    def __init__(self, api_key: str, model_name: str = \"gemini-2.5-flash\"):\n",
    "        print(1)\n",
    "        api_key = api_key.strip()\n",
    "        self.client = genai.Client(api_key=api_key)\n",
    "\n",
    "    async def answer_question(self, user_query: str, context: str) -> str:\n",
    "        system_prompt = \"\"\"\n",
    "        You are a helpful and friendly chatbot assistant. Your task is to answer the user's question based *only* on the provided context.\n",
    "        If the context does not contain the answer, state that you couldn't find the information.\n",
    "        Answer in the same language as the user's question.\n",
    "        \"\"\"\n",
    "        full_prompt = f\"{system_prompt}\\n\\n# Context from Knowledge Graph:\\n{context}\\n\\n# User's Question:\\n{user_query}\"\n",
    "        \n",
    "        print(\"\\n--- Sending Prompt to Gemini for Final Answer ---\")\n",
    "        try:\n",
    "            response = await self.client.aio.models.generate_content(\n",
    "                model='gemini-2.5-flash',\n",
    "                config=types.GenerateContentConfig(temperature=0.6, max_output_tokens=1500),\n",
    "                contents=full_prompt)\n",
    "            return response.text\n",
    "        except Exception as e:\n",
    "            print(f\"An error occurred during the Gemini RAG API call: {e}\")\n",
    "            return f\"I'm sorry, I encountered an error. {e}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- MAIN QUERY APPLICATION ---\n",
    "async def main_query(user_question: str):\n",
    "    \"\"\"The main application loop for asking a question and getting an answer.\"\"\"\n",
    "    load_dotenv()\n",
    "    api_key = os.getenv('GEMINI_API_KEY')\n",
    "    if not api_key:\n",
    "        raise ValueError(\"GEMINI_API_KEY not found in .env file.\")\n",
    "\n",
    "    FALKORDB_CONFIG = {\n",
    "        \"host\": 'localhost',\n",
    "        \"port\": 6379,\n",
    "        \"db_name\": 'aug-5-ryan-gosling-wiki'\n",
    "    }\n",
    "    \n",
    "    db_client = FalkorDBClient(**FALKORDB_CONFIG)\n",
    "    rag_client = GeminiRAGClient(api_key=api_key)\n",
    "\n",
    "    # 1. Retrieve context from the database\n",
    "    context = await search_graph_and_format_results(db_client, user_question)\n",
    "\n",
    "    # 2. Generate a human-friendly answer\n",
    "    final_answer = await rag_client.answer_question(user_question, context)\n",
    "\n",
    "    print(\"\\n\\n========================================\")\n",
    "    print(f\"User Question: {user_question}\")\n",
    "    print(\"\\nChatbot Answer:\")\n",
    "    print(final_answer)\n",
    "    print(\"========================================\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FalkorDBClient connected to graph 'aug-5-ryan-gosling-wiki' at localhost:6379.\n",
      "1\n",
      "\n",
      "--- Searching Graph for query: 'How is Emma Watson related to the movie La La Land?' ---\n",
      "Identified entities: ['How', 'Emma', 'Watson', 'La', 'La', 'Land']\n",
      "\n",
      "--- Search Complete. Formatted Context ---\n",
      "Found the following information in the knowledge graph:\n",
      "\n",
      "- Entity: Emma Stone\n",
      "  Summary: An actress who stars as Amelia \"Mia\" Dolan in La La Land. She drew from her own experiences as an aspiring actress for the role and won Best Actress at the 89th Academy Awards and 74th Golden Globe Awards.\n",
      "\n",
      "- Entity: Emma Watson\n",
      "  Summary: An actress originally slated to star in the leading role in La La Land, but dropped out due to commitments to Disney's Beauty and the Beast remake.\n",
      "\n",
      "- Entity: Emma Watson\n",
      "  Summary: An actress originally slated to star in the leading role in La La Land, but dropped out due to commitments to Disney's Beauty and the Beast remake.\n",
      "\n",
      "- Entity: Lars and the Real Girl\n",
      "  Summary: A critically acclaimed independent drama from 2007 starring Ryan Gosling.\n",
      "\n",
      "- Entity: La La Land\n",
      "  Summary: A romantic musical from 2016 starring Ryan Gosling, for which he won a Golden Globe and received a second Academy Award nomination for Best Actor.\n",
      "\n",
      "- Entity: Blade Runner 2049\n",
      "  Summary: A science fiction film from 2017 starring Ryan Gosling, which brought him further acclaim.\n",
      "\n",
      "- Entity: Whiplash (2014)\n",
      "  Summary: A film directed by Damien Chazelle. Its critical and commercial success in 2014 and 2015 helped La La Land attract studio attention and financing.\n",
      "\n",
      "- Entity: Amelia \"Mia\" Dolan\n",
      "  Summary: A character in La La Land, played by Emma Stone. She is an aspiring actress whose aunt inspired her to follow her dreams, eventually becoming a successful actress.\n",
      "\n",
      "- Entity: Laura Wilder\n",
      "  Summary: A character in La La Land, played by Rosemarie DeWitt. She is Seb's sister.\n",
      "\n",
      "- Entity: Black Label Media\n",
      "  Summary: An organization that, along with Summit Entertainment and Marc Platt, agreed to invest in and distribute La La Land.\n",
      "\n",
      "- Entity: Marc Platt\n",
      "  Summary: A producer who, along with Summit Entertainment and Black Label Media, agreed to invest in and distribute La La Land. He is also adapting the film into a Broadway musical.\n",
      "\n",
      "- Entity: NY NY Land\n",
      "  Summary: An independently produced short film parody set in New York City, titled NY NY Land, which parodied elements of La La Land.\n",
      "\n",
      "- Entity: The Simpsons episode \"Haw-Haw Land\"\n",
      "  Summary: An episode of The Simpsons that was stated to be a parody of Moonlight rather than La La Land, parodying the 89th Academy Awards mistake.\n",
      "\n",
      "- Entity: Klaas Heufer-Umlauf\n",
      "  Summary: A German comedian who, with Joko Winterscheidt, arranged a prank involving a Ryan Gosling impersonator at the Goldene Kamera awards in 2017. They were awarded the Grimme Award for their media criticism in 2018.\n",
      "\n",
      "- Entity: Broadway musical adaptation of La La Land\n",
      "  Summary: A stage musical adaptation of the film La La Land, announced on February 7, 2023, to be directed by Bartlett Sher with additional songs by Hurwitz, Pasek & Paul.\n",
      "\n",
      "- Entity: Alan Vaytsman\n",
      "  Summary: A new actor who will play Sebastian in the Broadway musical adaptation of La La Land and contributed new songs.\n",
      "\n",
      "- Entity: Jordan Black\n",
      "  Summary: A comedian who, with Jimmy Fowlie, created the theatrical spin-off So Long Boulder City in 2017.\n",
      "\n",
      "- Entity: Last Night\n",
      "  Summary: A 2010 romantic drama directed by Massy Tadjedin, starring Eva Mendes as the co-worker and love interest of a committed man.\n",
      "\n",
      "- Entity: The Place Beyond the Pines\n",
      "  Summary: A 2012 drama directed by Derek Cianfrance, starring Eva Mendes as the former lover of a motorcycle stuntman. Her performance was described as 'quietly heartbreaking'.\n",
      "\n",
      "- Entity: Silver Lake\n",
      "  Summary: A neighborhood in Los Angeles where Eva Mendes was raised by her mother after her parents' divorce.\n",
      "\n",
      "- Entity: Nicolas Cage\n",
      "  Summary: An actor who starred with Eva Mendes in Ghost Rider and Bad Lieutenant: Port of Call New Orleans.\n",
      "\n",
      "- Entity: Lars and the Real Girl\n",
      "  Summary: A critically acclaimed independent drama from 2007 starring Ryan Gosling.\n",
      "\n",
      "- Entity: La La Land\n",
      "  Summary: A romantic musical from 2016 starring Ryan Gosling, for which he won a Golden Globe and received a second Academy Award nomination for Best Actor.\n",
      "\n",
      "- Entity: Blade Runner 2049\n",
      "  Summary: A science fiction film from 2017 starring Ryan Gosling, which brought him further acclaim.\n",
      "\n",
      "- Entity: Whiplash (2014)\n",
      "  Summary: A film directed by Damien Chazelle. Its critical and commercial success in 2014 and 2015 helped La La Land attract studio attention and financing.\n",
      "\n",
      "- Entity: Amelia \"Mia\" Dolan\n",
      "  Summary: A character in La La Land, played by Emma Stone. She is an aspiring actress whose aunt inspired her to follow her dreams, eventually becoming a successful actress.\n",
      "\n",
      "- Entity: Laura Wilder\n",
      "  Summary: A character in La La Land, played by Rosemarie DeWitt. She is Seb's sister.\n",
      "\n",
      "- Entity: Black Label Media\n",
      "  Summary: An organization that, along with Summit Entertainment and Marc Platt, agreed to invest in and distribute La La Land.\n",
      "\n",
      "- Entity: Marc Platt\n",
      "  Summary: A producer who, along with Summit Entertainment and Black Label Media, agreed to invest in and distribute La La Land. He is also adapting the film into a Broadway musical.\n",
      "\n",
      "- Entity: NY NY Land\n",
      "  Summary: An independently produced short film parody set in New York City, titled NY NY Land, which parodied elements of La La Land.\n",
      "\n",
      "- Entity: The Simpsons episode \"Haw-Haw Land\"\n",
      "  Summary: An episode of The Simpsons that was stated to be a parody of Moonlight rather than La La Land, parodying the 89th Academy Awards mistake.\n",
      "\n",
      "- Entity: Klaas Heufer-Umlauf\n",
      "  Summary: A German comedian who, with Joko Winterscheidt, arranged a prank involving a Ryan Gosling impersonator at the Goldene Kamera awards in 2017. They were awarded the Grimme Award for their media criticism in 2018.\n",
      "\n",
      "- Entity: Broadway musical adaptation of La La Land\n",
      "  Summary: A stage musical adaptation of the film La La Land, announced on February 7, 2023, to be directed by Bartlett Sher with additional songs by Hurwitz, Pasek & Paul.\n",
      "\n",
      "- Entity: Alan Vaytsman\n",
      "  Summary: A new actor who will play Sebastian in the Broadway musical adaptation of La La Land and contributed new songs.\n",
      "\n",
      "- Entity: Jordan Black\n",
      "  Summary: A comedian who, with Jimmy Fowlie, created the theatrical spin-off So Long Boulder City in 2017.\n",
      "\n",
      "- Entity: Last Night\n",
      "  Summary: A 2010 romantic drama directed by Massy Tadjedin, starring Eva Mendes as the co-worker and love interest of a committed man.\n",
      "\n",
      "- Entity: The Place Beyond the Pines\n",
      "  Summary: A 2012 drama directed by Derek Cianfrance, starring Eva Mendes as the former lover of a motorcycle stuntman. Her performance was described as 'quietly heartbreaking'.\n",
      "\n",
      "- Entity: Silver Lake\n",
      "  Summary: A neighborhood in Los Angeles where Eva Mendes was raised by her mother after her parents' divorce.\n",
      "\n",
      "- Entity: Nicolas Cage\n",
      "  Summary: An actor who starred with Eva Mendes in Ghost Rider and Bad Lieutenant: Port of Call New Orleans.\n",
      "\n",
      "- Entity: La La Land\n",
      "  Summary: A romantic musical from 2016 starring Ryan Gosling, for which he won a Golden Globe and received a second Academy Award nomination for Best Actor.\n",
      "\n",
      "- Entity: NY NY Land\n",
      "  Summary: An independently produced short film parody set in New York City, titled NY NY Land, which parodied elements of La La Land.\n",
      "\n",
      "- Entity: The Simpsons episode \"Haw-Haw Land\"\n",
      "  Summary: An episode of The Simpsons that was stated to be a parody of Moonlight rather than La La Land, parodying the 89th Academy Awards mistake.\n",
      "\n",
      "- Entity: Broadway musical adaptation of La La Land\n",
      "  Summary: A stage musical adaptation of the film La La Land, announced on February 7, 2023, to be directed by Bartlett Sher with additional songs by Hurwitz, Pasek & Paul.\n",
      "\n",
      "- Relationships:\n",
      "  - Fact: Miles Teller and Emma Watson were originally in talks to star, but after both dropped out, Gosling and Stone were cast. (Connects Emma Stone -> La La Land)\n",
      "  - Fact: She met Chazelle in 2014 while she was making her Broadway debut in Cabaret. (Connects Emma Stone -> Damien Chazelle)\n",
      "  - Fact: Emma Stone plays Mia, an aspiring actress in Los Angeles. (Connects Emma Stone -> Amelia \"Mia\" Dolan)\n",
      "  - Fact: Emma Stone as Amelia \"Mia\" Dolan, an actress whose aunt inspired her to follow her dreams (Connects Emma Stone -> Amelia \"Mia\" Dolan)\n",
      "  - Fact: She met Chazelle in 2014 while she was making her Broadway debut in Cabaret. (Connects Emma Stone -> Cabaret)\n",
      "  - Fact: The film marked the third collaboration between Gosling and Stone, following Crazy, Stupid, Love (2011) and Gangster Squad (2013). (Connects Emma Stone -> Crazy, Stupid, Love (2011))\n",
      "  - Fact: The film marked the third collaboration between Gosling and Stone, following Crazy, Stupid, Love (2011) and Gangster Squad (2013). (Connects Emma Stone -> Gangster Squad (2013))\n",
      "  - Fact: Miles Teller and Emma Watson were originally slated to star in the leading roles. Watson dropped out to honor her commitments to Disney's live-action Beauty and the Beast remake (2017), while Teller exited via long contract negotiations. (Connects Emma Watson -> La La Land)\n",
      "  - Fact: Miles Teller and Emma Watson were originally in talks to star, but after both dropped out, Gosling and Stone were cast. (Connects Emma Watson -> La La Land)\n",
      "  - Fact: Watson dropped out to honor her commitments to Disney's live-action Beauty and the Beast remake (2017) (Connects Emma Watson -> Beauty and the Beast (2017))\n",
      "  - Fact: Miles Teller and Emma Watson were originally slated to star in the leading roles. Watson dropped out to honor her commitments to Disney's live-action Beauty and the Beast remake (2017), while Teller exited via long contract negotiations. (Connects Emma Watson -> La La Land)\n",
      "  - Fact: Miles Teller and Emma Watson were originally in talks to star, but after both dropped out, Gosling and Stone were cast. (Connects Emma Watson -> La La Land)\n",
      "  - Fact: Watson dropped out to honor her commitments to Disney's live-action Beauty and the Beast remake (2017) (Connects Emma Watson -> Beauty and the Beast (2017))\n",
      "  - Fact: La La Land is a 2016 American musical romantic comedy-drama film written and directed by Damien Chazelle. (Connects La La Land -> Damien Chazelle)\n",
      "  - Fact: The film marked the third collaboration between Gosling and Stone, following Crazy, Stupid, Love (2011) and Gangster Squad (2013). (Connects La La Land -> Ryan Gosling)\n",
      "  - Fact: It stars Ryan Gosling and Emma Stone as a struggling jazz pianist and an aspiring actress who meet and fall in love while pursuing their dreams in Los Angeles. (Connects La La Land -> Ryan Gosling)\n",
      "  - Fact: The film marked the third collaboration between Gosling and Stone, following Crazy, Stupid, Love (2011) and Gangster Squad (2013). (Connects La La Land -> Emma Stone)\n",
      "  - Fact: It stars Ryan Gosling and Emma Stone as a struggling jazz pianist and an aspiring actress who meet and fall in love while pursuing their dreams in Los Angeles. (Connects La La Land -> Emma Stone)\n",
      "  - Fact: The supporting cast includes John Legend, Rosemarie DeWitt, Finn Wittrock, and J. K. Simmons. (Connects La La Land -> John Legend)\n",
      "  - Fact: The supporting cast includes John Legend, Rosemarie DeWitt, Finn Wittrock, and J. K. Simmons. (Connects La La Land -> Rosemarie DeWitt)\n",
      "  - Fact: The supporting cast includes John Legend, Rosemarie DeWitt, Finn Wittrock, and J. K. Simmons. (Connects La La Land -> Finn Wittrock)\n",
      "  - Fact: The supporting cast includes John Legend, Rosemarie DeWitt, Finn Wittrock, and J. K. Simmons. (Connects La La Land -> J. K. Simmons)\n",
      "  - Fact: The songs and score for La La Land were composed and orchestrated by Justin Hurwitz, Chazelle's Harvard University classmate, who also worked on his two prior films. (Connects La La Land -> Justin Hurwitz)\n",
      "  - Fact: Filming took place in Los Angeles between August and September 2015, with the film's score composed by Hurwitz, who also wrote the film's songs with lyricists Benj Pasek and Justin Paul and the dance choreography by Mandy Moore. (Connects La La Land -> Justin Hurwitz)\n",
      "  - Fact: The lyrics were written by Pasek and Paul, except for \"Start a Fire\", which was written by John Legend, Hurwitz, Marius de Vries and Angelique Cinelu. (Connects La La Land -> Benj Pasek)\n",
      "  - Fact: The lyrics were written by Pasek and Paul, except for \"Start a Fire\", which was written by John Legend, Hurwitz, Marius de Vries and Angelique Cinelu. (Connects La La Land -> Justin Paul)\n",
      "  - Fact: The film was choreographed by Mandy Moore. (Connects La La Land -> Mandy Moore)\n",
      "  - Fact: Filming took place in Los Angeles between August and September 2015, with the film's score composed by Hurwitz, who also wrote the film's songs with lyricists Benj Pasek and Justin Paul and the dance choreography by Mandy Moore. (Connects La La Land -> Mandy Moore)\n",
      "  - Fact: La La Land premiered at the 73rd Venice International Film Festival on August 31, 2016, and was released theatrically in the United States on December 9, by Lionsgate. (Connects La La Land -> 73rd Venice International Film Festival)\n",
      "  - Fact: La La Land premiered at the 73rd Venice International Film Festival on August 31, 2016, and was released theatrically in the United States on December 9, by Lionsgate. (Connects La La Land -> Lionsgate)\n",
      "  - Fact: At the 74th Golden Globe Awards, La La Land received a leading seven nominations. (Connects La La Land -> 74th Golden Globe Awards)\n",
      "  - Fact: It went on to receive numerous accolades, including winning a record seven awards at the 74th Golden Globe Awards and received eleven nominations at the 70th British Academy Film Awards, winning five, including Best Film. (Connects La La Land -> 74th Golden Globe Awards)\n",
      "  - Fact: La La Land received 11 nominations at the 70th British Academy Film Awards, more than any other film of 2016. (Connects La La Land -> 70th British Academy Film Awards)\n",
      "  - Fact: It went on to receive numerous accolades, including winning a record seven awards at the 74th Golden Globe Awards and received eleven nominations at the 70th British Academy Film Awards, winning five, including Best Film. (Connects La La Land -> 70th British Academy Film Awards)\n",
      "  - Fact: At the 89th Academy Awards, La La Land received a leading six awards, namely Best Director, Best Actress (for Stone), Best Cinematography, Best Original Score, Best Original Song (\"City of Stars\"), and Best Production Design. (Connects La La Land -> 89th Academy Awards)\n",
      "  - Fact: The film received a total of 14 nominations, tying the record for most nominations by a single film with All About Eve (1950) and Titanic (1997). (Connects La La Land -> 89th Academy Awards)\n",
      "  - Fact: The film also received a record-tying fourteen nominations at the 89th Academy Awards, winning in six categories including Best Director and Best Actress (Stone). (Connects La La Land -> 89th Academy Awards)\n",
      "  - Fact: A soundtrack album was released on December 9, 2016, by Interscope Records, featuring selections from Hurwitz's score and songs performed by the cast. (Connects La La Land -> Interscope Records)\n",
      "  - Fact: The film's opening number, \"Another Day of Sun\", shot as a single tracking shot on an L.A. freeway, received praise for its choreography. (Connects La La Land -> Another Day of Sun)\n",
      "  - Fact: The songs \"City of Stars\" and \"Audition (The Fools Who Dream)\" received numerous awards. (Connects La La Land -> City of Stars)\n",
      "  - Fact: The songs \"City of Stars\" and \"Audition (The Fools Who Dream)\" received numerous awards. (Connects La La Land -> Audition (The Fools Who Dream))\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> Telluride Film Festival)\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> Toronto International Film Festival)\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> BFI London Film Festival)\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> Middleburg Film Festival)\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> Virginia Film Festival)\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> AFI Fest)\n",
      "  - Fact: In its sixth week of release, the film grossed $14.5 million (a total of $16.9 million over the four-day weekend for Martin Luther King Jr. Day), finishing second at the box-office behind Hidden Figures. (Connects La La Land -> Hidden Figures)\n",
      "  - Fact: The actual winner was Moonlight. (Connects La La Land -> Moonlight)\n",
      "  - Fact: La La Land's competition for awards and critical attention with the African-American film Moonlight shortly after the election of Donald Trump sharpened the attention on questions of racial sensitivity and unexamined white privilege in the characters of film. (Connects La La Land -> Moonlight)\n",
      "  - Fact: In March 2017, La La Land was at the center of a prank involving Goldene Kamera, an annual German film and television award. (Connects La La Land -> Goldene Kamera)\n",
      "  - Fact: On February 7, 2023, it was announced that the film would be adapted into a Broadway musical by Platt and Lionsgate. (Connects La La Land -> Broadway musical adaptation of La La Land)\n",
      "  - Fact: A theatrical spin-off, So Long Boulder City, was also created in 2017 by comedians Jimmy Fowlie and Jordan Black. (Connects La La Land -> So Long Boulder City)\n",
      "  - Fact: After Whiplash was well received by critics upon its premiere at the 2014 Sundance Film Festival in January, Chazelle continued his efforts to bring La La Land to the big screen. (Connects Whiplash (2014) -> Damien Chazelle)\n",
      "  - Fact: After the success of his film Whiplash (2014), the project was picked up by Summit Entertainment. (Connects Whiplash (2014) -> Damien Chazelle)\n",
      "  - Fact: Five years after Chazelle wrote the script, Summit Entertainment and Black Label Media, along with producer Marc Platt, agreed to invest in La La Land and distribute it. (Connects Black Label Media -> La La Land)\n",
      "  - Fact: Five years after Chazelle wrote the script, Summit Entertainment and Black Label Media, along with producer Marc Platt, agreed to invest in La La Land and distribute it. (Connects Marc Platt -> La La Land)\n",
      "  - Fact: an independently produced short film parody set in New York City titled NY NY Land, a skit on season 42 of Saturday Night Live where host Aziz Ansari plays a character who is interrogated over calling the film \"overrated\" because of its Oscar nominations, and a television commercial for the prescription Jardiance. (Connects NY NY Land -> La La Land)\n",
      "  - Fact: In the closing of The Simpsons episode \"Haw-Haw Land\" it is stated that the episode was supposed to be a parody of Moonlight rather than La La Land (itself parodying the mistake at the 89th Academy Awards. (Connects The Simpsons episode \"Haw-Haw Land\" -> La La Land)\n",
      "  - Fact: German comedians Joko Winterscheidt and Klaas Heufer-Umlauf arranged for a Ryan Gosling impersonator to be awarded the \"Best International Film\" prize for La La Land. (Connects Klaas Heufer-Umlauf -> Goldene Kamera)\n",
      "  - Fact: In 2018, Winterscheidt and Heufer-Umlauf were awarded the Grimme Award for their media criticism. (Connects Klaas Heufer-Umlauf -> Grimme Award)\n",
      "  - Fact: Hurwitz, Pasek & Paul will return to write additional songs for the show. (Connects Broadway musical adaptation of La La Land -> Justin Hurwitz)\n",
      "  - Fact: Hurwitz, Pasek & Paul will return to write additional songs for the show. (Connects Broadway musical adaptation of La La Land -> Benj Pasek)\n",
      "  - Fact: Hurwitz, Pasek & Paul will return to write additional songs for the show. (Connects Broadway musical adaptation of La La Land -> Justin Paul)\n",
      "  - Fact: On February 7, 2023, it was announced that the film would be adapted into a Broadway musical by Platt and Lionsgate. (Connects Broadway musical adaptation of La La Land -> Lionsgate)\n",
      "  - Fact: On February 7, 2023, it was announced that the film would be adapted into a Broadway musical by Platt and Lionsgate. (Connects Broadway musical adaptation of La La Land -> Marc Platt)\n",
      "  - Fact: Bartlett Sher will direct from a book by Ayad Akhtar and Matthew Decker. (Connects Broadway musical adaptation of La La Land -> Bartlett Sher)\n",
      "  - Fact: Bartlett Sher will direct from a book by Ayad Akhtar and Matthew Decker. (Connects Broadway musical adaptation of La La Land -> Ayad Akhtar)\n",
      "  - Fact: Bartlett Sher will direct from a book by Ayad Akhtar and Matthew Decker. (Connects Broadway musical adaptation of La La Land -> Matthew Decker)\n",
      "  - Fact: Alan Vaytsman, the new actor, will play Sebastian. (Connects Alan Vaytsman -> Sebastian \"Seb\" Wilder)\n",
      "  - Fact: Massy Tadjedin's romantic drama Last Night (Connects Last Night -> Massy Tadjedin)\n",
      "  - Fact: alongside Keira Knightley and Sam Worthington. (Connects Last Night -> Keira Knightley)\n",
      "  - Fact: alongside Keira Knightley and Sam Worthington. (Connects Last Night -> Sam Worthington)\n",
      "  - Fact: alongside Ryan Gosling and Bradley Cooper (Connects The Place Beyond the Pines -> Ryan Gosling)\n",
      "  - Fact: a drama directed by Derek Cianfrance (Connects The Place Beyond the Pines -> Derek Cianfrance)\n",
      "  - Fact: alongside Ryan Gosling and Bradley Cooper (Connects The Place Beyond the Pines -> Bradley Cooper)\n",
      "  - Fact: the Los Angeles neighborhood of Silver Lake (Connects Silver Lake -> Los Angeles)\n",
      "  - Fact: La La Land is a 2016 American musical romantic comedy-drama film written and directed by Damien Chazelle. (Connects La La Land -> Damien Chazelle)\n",
      "  - Fact: The film marked the third collaboration between Gosling and Stone, following Crazy, Stupid, Love (2011) and Gangster Squad (2013). (Connects La La Land -> Ryan Gosling)\n",
      "  - Fact: It stars Ryan Gosling and Emma Stone as a struggling jazz pianist and an aspiring actress who meet and fall in love while pursuing their dreams in Los Angeles. (Connects La La Land -> Ryan Gosling)\n",
      "  - Fact: The film marked the third collaboration between Gosling and Stone, following Crazy, Stupid, Love (2011) and Gangster Squad (2013). (Connects La La Land -> Emma Stone)\n",
      "  - Fact: It stars Ryan Gosling and Emma Stone as a struggling jazz pianist and an aspiring actress who meet and fall in love while pursuing their dreams in Los Angeles. (Connects La La Land -> Emma Stone)\n",
      "  - Fact: The supporting cast includes John Legend, Rosemarie DeWitt, Finn Wittrock, and J. K. Simmons. (Connects La La Land -> John Legend)\n",
      "  - Fact: The supporting cast includes John Legend, Rosemarie DeWitt, Finn Wittrock, and J. K. Simmons. (Connects La La Land -> Rosemarie DeWitt)\n",
      "  - Fact: The supporting cast includes John Legend, Rosemarie DeWitt, Finn Wittrock, and J. K. Simmons. (Connects La La Land -> Finn Wittrock)\n",
      "  - Fact: The supporting cast includes John Legend, Rosemarie DeWitt, Finn Wittrock, and J. K. Simmons. (Connects La La Land -> J. K. Simmons)\n",
      "  - Fact: The songs and score for La La Land were composed and orchestrated by Justin Hurwitz, Chazelle's Harvard University classmate, who also worked on his two prior films. (Connects La La Land -> Justin Hurwitz)\n",
      "  - Fact: Filming took place in Los Angeles between August and September 2015, with the film's score composed by Hurwitz, who also wrote the film's songs with lyricists Benj Pasek and Justin Paul and the dance choreography by Mandy Moore. (Connects La La Land -> Justin Hurwitz)\n",
      "  - Fact: The lyrics were written by Pasek and Paul, except for \"Start a Fire\", which was written by John Legend, Hurwitz, Marius de Vries and Angelique Cinelu. (Connects La La Land -> Benj Pasek)\n",
      "  - Fact: The lyrics were written by Pasek and Paul, except for \"Start a Fire\", which was written by John Legend, Hurwitz, Marius de Vries and Angelique Cinelu. (Connects La La Land -> Justin Paul)\n",
      "  - Fact: The film was choreographed by Mandy Moore. (Connects La La Land -> Mandy Moore)\n",
      "  - Fact: Filming took place in Los Angeles between August and September 2015, with the film's score composed by Hurwitz, who also wrote the film's songs with lyricists Benj Pasek and Justin Paul and the dance choreography by Mandy Moore. (Connects La La Land -> Mandy Moore)\n",
      "  - Fact: La La Land premiered at the 73rd Venice International Film Festival on August 31, 2016, and was released theatrically in the United States on December 9, by Lionsgate. (Connects La La Land -> 73rd Venice International Film Festival)\n",
      "  - Fact: La La Land premiered at the 73rd Venice International Film Festival on August 31, 2016, and was released theatrically in the United States on December 9, by Lionsgate. (Connects La La Land -> Lionsgate)\n",
      "  - Fact: At the 74th Golden Globe Awards, La La Land received a leading seven nominations. (Connects La La Land -> 74th Golden Globe Awards)\n",
      "  - Fact: It went on to receive numerous accolades, including winning a record seven awards at the 74th Golden Globe Awards and received eleven nominations at the 70th British Academy Film Awards, winning five, including Best Film. (Connects La La Land -> 74th Golden Globe Awards)\n",
      "  - Fact: La La Land received 11 nominations at the 70th British Academy Film Awards, more than any other film of 2016. (Connects La La Land -> 70th British Academy Film Awards)\n",
      "  - Fact: It went on to receive numerous accolades, including winning a record seven awards at the 74th Golden Globe Awards and received eleven nominations at the 70th British Academy Film Awards, winning five, including Best Film. (Connects La La Land -> 70th British Academy Film Awards)\n",
      "  - Fact: At the 89th Academy Awards, La La Land received a leading six awards, namely Best Director, Best Actress (for Stone), Best Cinematography, Best Original Score, Best Original Song (\"City of Stars\"), and Best Production Design. (Connects La La Land -> 89th Academy Awards)\n",
      "  - Fact: The film received a total of 14 nominations, tying the record for most nominations by a single film with All About Eve (1950) and Titanic (1997). (Connects La La Land -> 89th Academy Awards)\n",
      "  - Fact: The film also received a record-tying fourteen nominations at the 89th Academy Awards, winning in six categories including Best Director and Best Actress (Stone). (Connects La La Land -> 89th Academy Awards)\n",
      "  - Fact: A soundtrack album was released on December 9, 2016, by Interscope Records, featuring selections from Hurwitz's score and songs performed by the cast. (Connects La La Land -> Interscope Records)\n",
      "  - Fact: The film's opening number, \"Another Day of Sun\", shot as a single tracking shot on an L.A. freeway, received praise for its choreography. (Connects La La Land -> Another Day of Sun)\n",
      "  - Fact: The songs \"City of Stars\" and \"Audition (The Fools Who Dream)\" received numerous awards. (Connects La La Land -> City of Stars)\n",
      "  - Fact: The songs \"City of Stars\" and \"Audition (The Fools Who Dream)\" received numerous awards. (Connects La La Land -> Audition (The Fools Who Dream))\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> Telluride Film Festival)\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> Toronto International Film Festival)\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> BFI London Film Festival)\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> Middleburg Film Festival)\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> Virginia Film Festival)\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> AFI Fest)\n",
      "  - Fact: In its sixth week of release, the film grossed $14.5 million (a total of $16.9 million over the four-day weekend for Martin Luther King Jr. Day), finishing second at the box-office behind Hidden Figures. (Connects La La Land -> Hidden Figures)\n",
      "  - Fact: The actual winner was Moonlight. (Connects La La Land -> Moonlight)\n",
      "  - Fact: La La Land's competition for awards and critical attention with the African-American film Moonlight shortly after the election of Donald Trump sharpened the attention on questions of racial sensitivity and unexamined white privilege in the characters of film. (Connects La La Land -> Moonlight)\n",
      "  - Fact: In March 2017, La La Land was at the center of a prank involving Goldene Kamera, an annual German film and television award. (Connects La La Land -> Goldene Kamera)\n",
      "  - Fact: On February 7, 2023, it was announced that the film would be adapted into a Broadway musical by Platt and Lionsgate. (Connects La La Land -> Broadway musical adaptation of La La Land)\n",
      "  - Fact: A theatrical spin-off, So Long Boulder City, was also created in 2017 by comedians Jimmy Fowlie and Jordan Black. (Connects La La Land -> So Long Boulder City)\n",
      "  - Fact: After Whiplash was well received by critics upon its premiere at the 2014 Sundance Film Festival in January, Chazelle continued his efforts to bring La La Land to the big screen. (Connects Whiplash (2014) -> Damien Chazelle)\n",
      "  - Fact: After the success of his film Whiplash (2014), the project was picked up by Summit Entertainment. (Connects Whiplash (2014) -> Damien Chazelle)\n",
      "  - Fact: Five years after Chazelle wrote the script, Summit Entertainment and Black Label Media, along with producer Marc Platt, agreed to invest in La La Land and distribute it. (Connects Black Label Media -> La La Land)\n",
      "  - Fact: Five years after Chazelle wrote the script, Summit Entertainment and Black Label Media, along with producer Marc Platt, agreed to invest in La La Land and distribute it. (Connects Marc Platt -> La La Land)\n",
      "  - Fact: an independently produced short film parody set in New York City titled NY NY Land, a skit on season 42 of Saturday Night Live where host Aziz Ansari plays a character who is interrogated over calling the film \"overrated\" because of its Oscar nominations, and a television commercial for the prescription Jardiance. (Connects NY NY Land -> La La Land)\n",
      "  - Fact: In the closing of The Simpsons episode \"Haw-Haw Land\" it is stated that the episode was supposed to be a parody of Moonlight rather than La La Land (itself parodying the mistake at the 89th Academy Awards. (Connects The Simpsons episode \"Haw-Haw Land\" -> La La Land)\n",
      "  - Fact: German comedians Joko Winterscheidt and Klaas Heufer-Umlauf arranged for a Ryan Gosling impersonator to be awarded the \"Best International Film\" prize for La La Land. (Connects Klaas Heufer-Umlauf -> Goldene Kamera)\n",
      "  - Fact: In 2018, Winterscheidt and Heufer-Umlauf were awarded the Grimme Award for their media criticism. (Connects Klaas Heufer-Umlauf -> Grimme Award)\n",
      "  - Fact: Hurwitz, Pasek & Paul will return to write additional songs for the show. (Connects Broadway musical adaptation of La La Land -> Justin Hurwitz)\n",
      "  - Fact: Hurwitz, Pasek & Paul will return to write additional songs for the show. (Connects Broadway musical adaptation of La La Land -> Benj Pasek)\n",
      "  - Fact: Hurwitz, Pasek & Paul will return to write additional songs for the show. (Connects Broadway musical adaptation of La La Land -> Justin Paul)\n",
      "  - Fact: On February 7, 2023, it was announced that the film would be adapted into a Broadway musical by Platt and Lionsgate. (Connects Broadway musical adaptation of La La Land -> Lionsgate)\n",
      "  - Fact: On February 7, 2023, it was announced that the film would be adapted into a Broadway musical by Platt and Lionsgate. (Connects Broadway musical adaptation of La La Land -> Marc Platt)\n",
      "  - Fact: Bartlett Sher will direct from a book by Ayad Akhtar and Matthew Decker. (Connects Broadway musical adaptation of La La Land -> Bartlett Sher)\n",
      "  - Fact: Bartlett Sher will direct from a book by Ayad Akhtar and Matthew Decker. (Connects Broadway musical adaptation of La La Land -> Ayad Akhtar)\n",
      "  - Fact: Bartlett Sher will direct from a book by Ayad Akhtar and Matthew Decker. (Connects Broadway musical adaptation of La La Land -> Matthew Decker)\n",
      "  - Fact: Alan Vaytsman, the new actor, will play Sebastian. (Connects Alan Vaytsman -> Sebastian \"Seb\" Wilder)\n",
      "  - Fact: Massy Tadjedin's romantic drama Last Night (Connects Last Night -> Massy Tadjedin)\n",
      "  - Fact: alongside Keira Knightley and Sam Worthington. (Connects Last Night -> Keira Knightley)\n",
      "  - Fact: alongside Keira Knightley and Sam Worthington. (Connects Last Night -> Sam Worthington)\n",
      "  - Fact: alongside Ryan Gosling and Bradley Cooper (Connects The Place Beyond the Pines -> Ryan Gosling)\n",
      "  - Fact: a drama directed by Derek Cianfrance (Connects The Place Beyond the Pines -> Derek Cianfrance)\n",
      "  - Fact: alongside Ryan Gosling and Bradley Cooper (Connects The Place Beyond the Pines -> Bradley Cooper)\n",
      "  - Fact: the Los Angeles neighborhood of Silver Lake (Connects Silver Lake -> Los Angeles)\n",
      "  - Fact: La La Land is a 2016 American musical romantic comedy-drama film written and directed by Damien Chazelle. (Connects La La Land -> Damien Chazelle)\n",
      "  - Fact: The film marked the third collaboration between Gosling and Stone, following Crazy, Stupid, Love (2011) and Gangster Squad (2013). (Connects La La Land -> Ryan Gosling)\n",
      "  - Fact: It stars Ryan Gosling and Emma Stone as a struggling jazz pianist and an aspiring actress who meet and fall in love while pursuing their dreams in Los Angeles. (Connects La La Land -> Ryan Gosling)\n",
      "  - Fact: The film marked the third collaboration between Gosling and Stone, following Crazy, Stupid, Love (2011) and Gangster Squad (2013). (Connects La La Land -> Emma Stone)\n",
      "  - Fact: It stars Ryan Gosling and Emma Stone as a struggling jazz pianist and an aspiring actress who meet and fall in love while pursuing their dreams in Los Angeles. (Connects La La Land -> Emma Stone)\n",
      "  - Fact: The supporting cast includes John Legend, Rosemarie DeWitt, Finn Wittrock, and J. K. Simmons. (Connects La La Land -> John Legend)\n",
      "  - Fact: The supporting cast includes John Legend, Rosemarie DeWitt, Finn Wittrock, and J. K. Simmons. (Connects La La Land -> Rosemarie DeWitt)\n",
      "  - Fact: The supporting cast includes John Legend, Rosemarie DeWitt, Finn Wittrock, and J. K. Simmons. (Connects La La Land -> Finn Wittrock)\n",
      "  - Fact: The supporting cast includes John Legend, Rosemarie DeWitt, Finn Wittrock, and J. K. Simmons. (Connects La La Land -> J. K. Simmons)\n",
      "  - Fact: The songs and score for La La Land were composed and orchestrated by Justin Hurwitz, Chazelle's Harvard University classmate, who also worked on his two prior films. (Connects La La Land -> Justin Hurwitz)\n",
      "  - Fact: Filming took place in Los Angeles between August and September 2015, with the film's score composed by Hurwitz, who also wrote the film's songs with lyricists Benj Pasek and Justin Paul and the dance choreography by Mandy Moore. (Connects La La Land -> Justin Hurwitz)\n",
      "  - Fact: The lyrics were written by Pasek and Paul, except for \"Start a Fire\", which was written by John Legend, Hurwitz, Marius de Vries and Angelique Cinelu. (Connects La La Land -> Benj Pasek)\n",
      "  - Fact: The lyrics were written by Pasek and Paul, except for \"Start a Fire\", which was written by John Legend, Hurwitz, Marius de Vries and Angelique Cinelu. (Connects La La Land -> Justin Paul)\n",
      "  - Fact: The film was choreographed by Mandy Moore. (Connects La La Land -> Mandy Moore)\n",
      "  - Fact: Filming took place in Los Angeles between August and September 2015, with the film's score composed by Hurwitz, who also wrote the film's songs with lyricists Benj Pasek and Justin Paul and the dance choreography by Mandy Moore. (Connects La La Land -> Mandy Moore)\n",
      "  - Fact: La La Land premiered at the 73rd Venice International Film Festival on August 31, 2016, and was released theatrically in the United States on December 9, by Lionsgate. (Connects La La Land -> 73rd Venice International Film Festival)\n",
      "  - Fact: La La Land premiered at the 73rd Venice International Film Festival on August 31, 2016, and was released theatrically in the United States on December 9, by Lionsgate. (Connects La La Land -> Lionsgate)\n",
      "  - Fact: At the 74th Golden Globe Awards, La La Land received a leading seven nominations. (Connects La La Land -> 74th Golden Globe Awards)\n",
      "  - Fact: It went on to receive numerous accolades, including winning a record seven awards at the 74th Golden Globe Awards and received eleven nominations at the 70th British Academy Film Awards, winning five, including Best Film. (Connects La La Land -> 74th Golden Globe Awards)\n",
      "  - Fact: La La Land received 11 nominations at the 70th British Academy Film Awards, more than any other film of 2016. (Connects La La Land -> 70th British Academy Film Awards)\n",
      "  - Fact: It went on to receive numerous accolades, including winning a record seven awards at the 74th Golden Globe Awards and received eleven nominations at the 70th British Academy Film Awards, winning five, including Best Film. (Connects La La Land -> 70th British Academy Film Awards)\n",
      "  - Fact: At the 89th Academy Awards, La La Land received a leading six awards, namely Best Director, Best Actress (for Stone), Best Cinematography, Best Original Score, Best Original Song (\"City of Stars\"), and Best Production Design. (Connects La La Land -> 89th Academy Awards)\n",
      "  - Fact: The film received a total of 14 nominations, tying the record for most nominations by a single film with All About Eve (1950) and Titanic (1997). (Connects La La Land -> 89th Academy Awards)\n",
      "  - Fact: The film also received a record-tying fourteen nominations at the 89th Academy Awards, winning in six categories including Best Director and Best Actress (Stone). (Connects La La Land -> 89th Academy Awards)\n",
      "  - Fact: A soundtrack album was released on December 9, 2016, by Interscope Records, featuring selections from Hurwitz's score and songs performed by the cast. (Connects La La Land -> Interscope Records)\n",
      "  - Fact: The film's opening number, \"Another Day of Sun\", shot as a single tracking shot on an L.A. freeway, received praise for its choreography. (Connects La La Land -> Another Day of Sun)\n",
      "  - Fact: The songs \"City of Stars\" and \"Audition (The Fools Who Dream)\" received numerous awards. (Connects La La Land -> City of Stars)\n",
      "  - Fact: The songs \"City of Stars\" and \"Audition (The Fools Who Dream)\" received numerous awards. (Connects La La Land -> Audition (The Fools Who Dream))\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> Telluride Film Festival)\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> Toronto International Film Festival)\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> BFI London Film Festival)\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> Middleburg Film Festival)\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> Virginia Film Festival)\n",
      "  - Fact: The film also screened at the Telluride Film Festival, the Toronto International Film Festival, beginning September 12, 2016, the BFI London Film Festival, the Middleburg Film Festival in late October 2016, the Virginia Film Festival, held at the University of Virginia on November 6, 2016, and the AFI Fest on November 15, 2016. (Connects La La Land -> AFI Fest)\n",
      "  - Fact: In its sixth week of release, the film grossed $14.5 million (a total of $16.9 million over the four-day weekend for Martin Luther King Jr. Day), finishing second at the box-office behind Hidden Figures. (Connects La La Land -> Hidden Figures)\n",
      "  - Fact: The actual winner was Moonlight. (Connects La La Land -> Moonlight)\n",
      "  - Fact: La La Land's competition for awards and critical attention with the African-American film Moonlight shortly after the election of Donald Trump sharpened the attention on questions of racial sensitivity and unexamined white privilege in the characters of film. (Connects La La Land -> Moonlight)\n",
      "  - Fact: In March 2017, La La Land was at the center of a prank involving Goldene Kamera, an annual German film and television award. (Connects La La Land -> Goldene Kamera)\n",
      "  - Fact: On February 7, 2023, it was announced that the film would be adapted into a Broadway musical by Platt and Lionsgate. (Connects La La Land -> Broadway musical adaptation of La La Land)\n",
      "  - Fact: A theatrical spin-off, So Long Boulder City, was also created in 2017 by comedians Jimmy Fowlie and Jordan Black. (Connects La La Land -> So Long Boulder City)\n",
      "  - Fact: an independently produced short film parody set in New York City titled NY NY Land, a skit on season 42 of Saturday Night Live where host Aziz Ansari plays a character who is interrogated over calling the film \"overrated\" because of its Oscar nominations, and a television commercial for the prescription Jardiance. (Connects NY NY Land -> La La Land)\n",
      "  - Fact: In the closing of The Simpsons episode \"Haw-Haw Land\" it is stated that the episode was supposed to be a parody of Moonlight rather than La La Land (itself parodying the mistake at the 89th Academy Awards. (Connects The Simpsons episode \"Haw-Haw Land\" -> La La Land)\n",
      "  - Fact: Hurwitz, Pasek & Paul will return to write additional songs for the show. (Connects Broadway musical adaptation of La La Land -> Justin Hurwitz)\n",
      "  - Fact: Hurwitz, Pasek & Paul will return to write additional songs for the show. (Connects Broadway musical adaptation of La La Land -> Benj Pasek)\n",
      "  - Fact: Hurwitz, Pasek & Paul will return to write additional songs for the show. (Connects Broadway musical adaptation of La La Land -> Justin Paul)\n",
      "  - Fact: On February 7, 2023, it was announced that the film would be adapted into a Broadway musical by Platt and Lionsgate. (Connects Broadway musical adaptation of La La Land -> Lionsgate)\n",
      "  - Fact: On February 7, 2023, it was announced that the film would be adapted into a Broadway musical by Platt and Lionsgate. (Connects Broadway musical adaptation of La La Land -> Marc Platt)\n",
      "  - Fact: Bartlett Sher will direct from a book by Ayad Akhtar and Matthew Decker. (Connects Broadway musical adaptation of La La Land -> Bartlett Sher)\n",
      "  - Fact: Bartlett Sher will direct from a book by Ayad Akhtar and Matthew Decker. (Connects Broadway musical adaptation of La La Land -> Ayad Akhtar)\n",
      "  - Fact: Bartlett Sher will direct from a book by Ayad Akhtar and Matthew Decker. (Connects Broadway musical adaptation of La La Land -> Matthew Decker)\n",
      "\n",
      "--- Sending Prompt to Gemini for Final Answer ---\n",
      "\n",
      "\n",
      "========================================\n",
      "User Question: How is Emma Watson related to the movie La La Land?\n",
      "\n",
      "Chatbot Answer:\n",
      "Emma Watson was originally slated to star in the leading role in La La Land, but she dropped out due to commitments to Disney's Beauty and the Beast remake.\n",
      "========================================\n"
     ]
    }
   ],
   "source": [
    "question = \"How is Emma Watson related to the movie La La Land?\"\n",
    "await main_query(question)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "graphiti-env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

--- /Users/thubpham/knowledge_graph_ingestion/.git/config ---
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = https://github.com/thubpham/knowledge_graph_ingestion.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main

--- /Users/thubpham/knowledge_graph_ingestion/.git/HEAD ---
ref: refs/heads/main

--- /Users/thubpham/knowledge_graph_ingestion/.git/description ---
Unnamed repository; edit this file 'description' to name the repository.

--- /Users/thubpham/knowledge_graph_ingestion/.git/index ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/COMMIT_EDITMSG ---
initial commit

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/57/1890eaede792eb05501fa90e8950a1b4b7b343 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/9e/0653afe0d1b5f2434df9a36d9edf7c15a0436b ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/34/4665c608998d355b2b360c2a1ca91adafc2112 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/34/4260f84dbf4b4a2d8a966a37b21aa738e57409 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/33/ae4cf9244d601de0205dd71d513c94d56a7f12 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/9d/4d2fedf2c68738ac952809b1c9c11006af3bf5 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/a4/0e301619300bacc6ef4ce4c1c8eb7f6c8d0e29 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/d7/24b68f35b4b1a8bfcc2eb25b9da76b5350af9e ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/ae/991cbffdcfbb5d095ff906b5d04ae978175021 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/ab/6748e79b9a273b531fe0883889c4536de5a2d2 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/74/4d88030cc568e8e22dc756f9207e167d882b8e ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/8f/f85a1963fdb7ca007ed481a7f63eabdcc9d4f9 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/10/be6abf45941139c55a891cfc549f625551b342 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/44/de9c99f080a9829bb1af6b1d73b5db04fee219 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/2a/b07ab8f9444ecb75e0f99f0bb6a3fa8f83d400 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/6b/41d195179bde1d673d401c41b276d356e5b618 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/5d/9b44e90fa5899d5f44d08bf58e162175bf426e ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/3a/809dacc621a38abf91886441c75ccb8650b6c8 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/98/86d76e70be7b5fba980a71d3200d93a5054752 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/3f/c0b00c703d3d50cd5b75ba5ca64a0fd318f069 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/3f/806bb3d71c745800087f82a960b04cc06764c8 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/5e/42109bb52b404d2e3e444d29120bf8ae98da8d ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/6d/3e684dab05cd252a3e7dbd1e8e21753e83273a ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/52/f153345464d9e2ba205384d20642f3e758c327 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/0f/4ff275d5b2fea4ff724644af5a6c69fe782872 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/0a/b6ec4125e8aeab4240b374f7a913fa5d25f593 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/b6/bc42e3925628211d83e3971345137969af0c9e ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/b6/502621b4eb942378ac9530ddf89c60b47d7ad4 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/ef/c62721a8e3ef5a3ff4c546d1364d95225d6dfd ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/f8/ba8ab48b89d64f7138365a6f016f385bee6747 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/4a/2cb7d26a51a7bd8ef075835e9be3fffb05de8a ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/12/d16086b709dc32340a7599804c6fafc3263667 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/71/9ef73cedc3ee50c93441105e9130ef0cf33c90 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/2e/dfbad85c352c9811e7230c9bd4529604e298a0 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/78/6014efa9ae073c43ad06ae35b3c066f88c0fbf ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/78/54fa4900146158b7c93b3ea92e8545ae291c53 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/8b/137891791fe96927ad78e64b0aad7bded08bdc ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/8b/88ab461a50ca1824db71f5b9959562e3c38fba ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/objects/13/1aa6850e7510566c7f732f7635fa94d3e3ad86 ---

--- /Users/thubpham/knowledge_graph_ingestion/.git/info/exclude ---
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

--- /Users/thubpham/knowledge_graph_ingestion/.git/logs/HEAD ---
0000000000000000000000000000000000000000 ab6748e79b9a273b531fe0883889c4536de5a2d2 Bao Thu Pham <thubpham@sas.upenn.edu> 1754647429 +0700	commit (initial): initial commit

--- /Users/thubpham/knowledge_graph_ingestion/.git/logs/refs/heads/main ---
0000000000000000000000000000000000000000 ab6748e79b9a273b531fe0883889c4536de5a2d2 Bao Thu Pham <thubpham@sas.upenn.edu> 1754647429 +0700	commit (initial): initial commit

--- /Users/thubpham/knowledge_graph_ingestion/.git/logs/refs/remotes/origin/main ---
0000000000000000000000000000000000000000 ab6748e79b9a273b531fe0883889c4536de5a2d2 Bao Thu Pham <thubpham@sas.upenn.edu> 1754647491 +0700	update by push

--- /Users/thubpham/knowledge_graph_ingestion/.git/hooks/commit-msg.sample ---
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

--- /Users/thubpham/knowledge_graph_ingestion/.git/hooks/pre-rebase.sample ---
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

--- /Users/thubpham/knowledge_graph_ingestion/.git/hooks/sendemail-validate.sample ---
#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi

--- /Users/thubpham/knowledge_graph_ingestion/.git/hooks/pre-commit.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

--- /Users/thubpham/knowledge_graph_ingestion/.git/hooks/applypatch-msg.sample ---
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

--- /Users/thubpham/knowledge_graph_ingestion/.git/hooks/fsmonitor-watchman.sample ---
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

--- /Users/thubpham/knowledge_graph_ingestion/.git/hooks/pre-receive.sample ---
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

--- /Users/thubpham/knowledge_graph_ingestion/.git/hooks/prepare-commit-msg.sample ---
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

--- /Users/thubpham/knowledge_graph_ingestion/.git/hooks/post-update.sample ---
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

--- /Users/thubpham/knowledge_graph_ingestion/.git/hooks/pre-merge-commit.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

--- /Users/thubpham/knowledge_graph_ingestion/.git/hooks/pre-applypatch.sample ---
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

--- /Users/thubpham/knowledge_graph_ingestion/.git/hooks/pre-push.sample ---
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

--- /Users/thubpham/knowledge_graph_ingestion/.git/hooks/update.sample ---
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

--- /Users/thubpham/knowledge_graph_ingestion/.git/hooks/push-to-checkout.sample ---
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

--- /Users/thubpham/knowledge_graph_ingestion/.git/refs/heads/main ---
ab6748e79b9a273b531fe0883889c4536de5a2d2

--- /Users/thubpham/knowledge_graph_ingestion/.git/refs/remotes/origin/main ---
ab6748e79b9a273b531fe0883889c4536de5a2d2
